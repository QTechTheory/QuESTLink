(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    366168,       8392]
NotebookOptionsPosition[    352319,       8136]
NotebookOutlinePosition[    354255,       8186]
CellTagsIndexPosition[    353924,       8174]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Release Summary", "Title",
 CellChangeTimes->{{3.839629423643732*^9, 
  3.8396294293144407`*^9}},ExpressionUUID->"bd254b28-6128-423f-9c33-\
decd95105024"],

Cell[CellGroupData[{

Cell["v0.11", "Chapter",
 CellChangeTimes->{{3.839629440841601*^9, 3.8396294413653603`*^9}, {
  3.86592639996964*^9, 
  3.86592640056574*^9}},ExpressionUUID->"57e67318-85e7-402b-92fb-\
2d3bd573d1ae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Import", "[", "\"\<https://qtechtheory.org/questlink.m\>\"", "]"}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CreateDownloadedQuESTEnv", "[", "]"}], ";"}]}], "Code",
 CellChangeTimes->{{3.839622006960725*^9, 3.8396220305498447`*^9}, {
  3.8396228532552967`*^9, 3.8396228537633533`*^9}, {3.839628315889144*^9, 
  3.839628334391024*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"69ab282b-425b-49bc-9a5a-f64db51eb648"],

Cell[TextData[{
 "This ",
 StyleBox["major",
  FontSlant->"Italic"],
 " release significantly extends QuESTlink\[CloseCurlyQuote]s analytic \
processing of symbolic circuits.\[LineSeparator]It introduces new symbols and \
functions:\n    \[Bullet] ",
 ButtonBox["Matr",
  BaseStyle->"Hyperlink",
  ButtonData->"Matr"],
 "\n    \[Bullet] ",
 ButtonBox["GetCircuitInverse",
  BaseStyle->"Hyperlink",
  ButtonData->"GetCircuitInverse"],
 "\n    \[Bullet] ",
 ButtonBox["SimplifyCircuit",
  BaseStyle->"Hyperlink",
  ButtonData->"SimplifyCircuit"],
 "\n    \[Bullet] ",
 ButtonBox["GetKnownCircuit",
  BaseStyle->"Hyperlink",
  ButtonData->"GetKnownCircuit"],
 "\n    \[Bullet] ",
 ButtonBox["CalcCircuitMatrix",
  BaseStyle->"Hyperlink",
  ButtonData->"CalcCircuitMatrix"],
 "\n    \[Bullet] ",
 ButtonBox["GetCircuitGeneralised",
  BaseStyle->"Hyperlink",
  ButtonData->"GetCircuitGeneralised"],
 "\n    \[Bullet] ",
 ButtonBox["GetCircuitSuperoperator",
  BaseStyle->"Hyperlink",
  ButtonData->"GetCircuitSuperoperator"],
 "\nin addition to some other ",
 ButtonBox["changes",
  BaseStyle->"Hyperlink",
  ButtonData->"Changes"],
 "."
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865928776573058*^9, 3.865928777106324*^9}, {
  3.865931560188929*^9, 3.865931570363043*^9}, {3.865931694185175*^9, 
  3.865931816005578*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"7abe3c67-df0f-460e-883a-c9c9b5840f63"],

Cell[CellGroupData[{

Cell["New features", "Section",
 CellChangeTimes->{{3.865926632955805*^9, 
  3.865926634504974*^9}},ExpressionUUID->"ab35dea3-c0c7-42b8-8dc3-\
4881241cacc8"],

Cell[CellGroupData[{

Cell["Matr", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}},
 CellTags->"Matr",ExpressionUUID->"0f2d32c7-ba41-498d-8faf-b48e3b4a207f"],

Cell[TextData[{
 "The new circuit symbol ",
 StyleBox["Matr",
  FontWeight->"Bold"],
 " works just like ",
 StyleBox["U",
  FontWeight->"Bold"],
 " except it does not enforce unitarity. This is convenient to effect general \
non-unitary operations, or operators which are only approximtely unitary due \
to numerical imprecision"
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.8659266994427423`*^9, 3.86592677773064*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"0e222aec-ee98-4631-917c-1a408a4939ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Matr"}]], "Input",
 CellChangeTimes->{{3.8659267793329353`*^9, 3.865926779987685*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"ba01a00d-b84a-43ac-b12b-992d9d4b42ab"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`Matr\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "Matr[matrix] is an arbitrary operator with any number of target qubits, \
specified as a completely general (even non-unitary) square complex matrix.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "QuEST`Gate`Matr"|>, 
   False]]], "Output",
 CellChangeTimes->{3.86592678065661*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"e04a366a-07d6-4c49-a3cb-627dfcc0c9ad"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"circ", " ", "=", " ", 
   RowBox[{"Circuit", "[", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["Matr", "0"], "[", 
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "2"},
         {"3", "4"}
        }], "\[NoBreak]", ")"}], "]"}], " ", 
     RowBox[{
      SubscriptBox["C", 
       RowBox[{"0", ",", "1"}]], "[", " ", 
      RowBox[{
       SubscriptBox["Matr", 
        RowBox[{"2", ",", "3"}]], "[", 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {".1", "0", "0", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{".2", " ", "\[ImaginaryI]"}]]},
          {"0", "\[ImaginaryI]", "0", "0"},
          {
           RowBox[{"-", "2"}], "0", "0", "0"},
          {"0", "0", "\[Pi]", "1"}
         }], "\[NoBreak]", ")"}], "]"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.865926788072917*^9, 3.865926910427125*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"4a76b223-1551-44b5-9f03-c5cf9c532298"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", "[", "circ", "]"}]], "Input",
 CellChangeTimes->{{3.865926911240003*^9, 3.865926913707958*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"b46d5ee8-449a-4e50-863c-b399bf899207"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Matr\"\>", {0.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 0.5}, 0.1], DiskBox[{1.5, 1.5}, 0.1]}, 
      LineBox[{{1.5, 0.5}, {1.5, 3.5}}]}, {
      RectangleBox[{1.1, 2.1}, {1.9, 3.9}], 
      InsetBox["\<\"Matr\"\>", {1.5, 3.}]}}}},
  ImageSize->90,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.8659269140732307`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"536afcfc-bc26-4896-b237-e5c1a6cf65ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CalcCircuitMatrix", "[", "circ", "]"}], "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{";;", "8"}], ",", 
     RowBox[{";;", "8"}]}], "]"}], "]"}], " ", "//", " ", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.865926918247266*^9, 3.86592692588137*^9}, {
  3.865926982130807*^9, 3.865927036182609*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"3260e531-3759-4ed8-bae2-506ade5e894e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"2.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"3.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"4.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"2.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.30000000000000004`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.4`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"2.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"3.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"4.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"1.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"2.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"3.`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"4.`", " ", "\[ImaginaryI]"}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.865926923274127*^9, 3.865926926135306*^9}, {
  3.865926983291728*^9, 3.865927036692841*^9}},
 CellLabel->
  "Out[25]//MatrixForm=",ExpressionUUID->"d796cc21-a999-4d28-99f7-\
0011cff4ea84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"InitPlusState", " ", "@", " ", 
   RowBox[{"CreateQureg", "[", "4", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ApplyCircuit", "[", 
   RowBox[{"%", ",", " ", "circ"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GetQuregMatrix", "[", "%%", "]"}], " ", "//", " ", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.865927046852262*^9, 3.8659270775782633`*^9}, {
  3.865927131216279*^9, 3.8659271443732758`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"3d461c06-3dc8-4f12-83a5-18784bab5b63"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", 
   TagBox[GridBox[{
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"1.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"1.890116511222173`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.3476713288913571`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"1.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.`", "\[VeryThinSpace]", "+", 
        RowBox[{"1.75`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"1.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{
        RowBox[{"-", "3.5`"}], "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"1.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"0.75`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]},
      {
       RowBox[{"7.247787143782138`", "\[VeryThinSpace]", "+", 
        RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]}
     },
     GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Column], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.865927139127359*^9, 3.865927144611438*^9}},
 CellLabel->
  "Out[34]//MatrixForm=",ExpressionUUID->"49d8ff87-8068-43ce-a41a-\
3ef455cd8caa"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GetCircuitInverse", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}},
 CellTags->
  "GetCircuitInverse",ExpressionUUID->"248b4d5a-65f5-43b6-88ee-273c8a8ec984"],

Cell[TextData[{
 StyleBox["GetCircuitInverse[",
  FontWeight->"Bold"],
 "circ",
 StyleBox["] ",
  FontWeight->"Bold"],
 "returns a symbolic circuit description of the ",
 StyleBox["inverse",
  FontSlant->"Italic"],
 " of the input circuit."
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927446125792*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"f2e091a4-a99f-4f00-8d8d-492011b65c38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetCircuitInverse"}]], "Input",
 CellChangeTimes->{{3.8659264528058863`*^9, 3.865926454766374*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"9bbb8bad-c6a4-449f-bbcf-fc13645bea1a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitInverse[circuit] returns a circuit \
prescribing the inverse unitary operation of the given circuit.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "GetCircuitInverse", "[", "QuEST`Private`circ_List", 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`invs", "=", 
                    RowBox[{"QuEST`Private`getInverseGate", "/@", 
                    RowBox[{"Reverse", "[", "QuEST`Private`circ", "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`bad", "=", 
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"QuEST`Private`invs", ",", 
                    RowBox[{
                    RowBox[{"$Failed", "[", "QuEST`Private`g_", "]"}], 
                    "\[RuleDelayed]", "QuEST`Private`g"}]}], "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`bad", "===", 
                    RowBox[{"Missing", "[", "\"NotFound\"", "]"}]}], ",", 
                    "QuEST`Private`invs", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"GetCircuitInverse", "::", "error"}], 
                    "MessageName"], ",", 
                    
                    RowBox[{"\"Could not determine the inverse of gate \"", 
                    "<>", 
                    RowBox[{"ToString", "[", 
                    
                    RowBox[{"TraditionalForm", "[", "QuEST`Private`bad", 
                    "]"}], "]"}], "<>", "\".\""}]}], "]"}], ";", 
                    "$Failed"}]}], "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetCircuitInverse", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", "GetCircuitInverse",
                     "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetCircuitInverse\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitInverse[circuit] returns a circuit \
prescribing the inverse unitary operation of the given circuit.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetCircuitInverse[circuit] returns a circuit prescribing the inverse \
unitary operation of the given circuit.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetCircuitInverse, {QuEST`GetCircuitInverse[
         Pattern[QuEST`Private`circ, 
          Blank[List]]] :> 
       With[{QuEST`Private`invs = Map[QuEST`Private`getInverseGate, 
            Reverse[QuEST`Private`circ]]}, {
         QuEST`Private`bad = FirstCase[QuEST`Private`invs, $Failed[
              Pattern[QuEST`Private`g, 
               Blank[]]] :> QuEST`Private`g]}, 
         If[
         QuEST`Private`bad === Missing["NotFound"], QuEST`Private`invs, 
          Message[
            MessageName[QuEST`GetCircuitInverse, "error"], 
            "Could not determine the inverse of gate " <> ToString[
              TraditionalForm[QuEST`Private`bad]] <> "."]; $Failed]], 
       QuEST`GetCircuitInverse[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`GetCircuitInverse]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetCircuitInverse"|>, False]]], "Output",
 CellChangeTimes->{3.8659264552676697`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"a0a24843-25ba-479b-afa6-f618a04f3713"]
}, Open  ]],

Cell["For instance, this non-trivial input circuit...", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.8659274768047857`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"3693ac41-e1e2-41cb-bf21-795d7972963b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"circ", " ", "=", " ", 
    RowBox[{"Circuit", "[", " ", 
     RowBox[{
      SubscriptBox["X", "0"], " ", 
      RowBox[{
       SubscriptBox["Rx", "1"], "[", "a", "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"1", ",", "2"}]], "[", 
       RowBox[{
        SubscriptBox["Ry", "0"], "[", "b", "]"}], "]"}], "  ", 
      RowBox[{
       SubscriptBox["U", "3"], "[", 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", "b"},
          {"c", "d"}
         }], "\[NoBreak]", ")"}], "]"}], "  ", 
      RowBox[{
       SubscriptBox["Matr", "4"], "[", 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", "b"},
          {"c", "d"}
         }], "\[NoBreak]", ")"}], "]"}], " ", 
      RowBox[{"G", "[", "e", "]"}], " ", 
      RowBox[{
       SubscriptBox["C", "2"], "[", 
       SubscriptBox["SWAP", 
        RowBox[{"0", ",", "3"}]], "]"}], " ", 
      RowBox[{"R", "[", 
       RowBox[{"f", ",", 
        RowBox[{
         SubscriptBox["X", "2"], 
         SubscriptBox["Y", "3"], 
         SubscriptBox["Z", "0"]}]}], "]"}], " ", 
      SubscriptBox["S", "4"], 
      RowBox[{
       SubscriptBox["C", "4"], "[", 
       RowBox[{
        SubscriptBox["Ph", 
         RowBox[{"3", ",", "2", ",", "1"}]], "[", "g", "]"}], "]"}], 
      SubscriptBox["T", "4"], 
      SubscriptBox["H", "3"]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "circ", "]"}]}], "Input",
 CellChangeTimes->{{3.86592717973913*^9, 3.865927262053732*^9}, {
  3.86592729973501*^9, 3.8659273695362043`*^9}, {3.865927473590859*^9, 
  3.865927473936655*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"96d16e95-f60d-400a-96f9-97a72e39deae"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}], 
     LineBox[{{0, 4.5}, {1, 4.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}], 
     LineBox[{{1, 3.5}, {2, 3.5}}], LineBox[{{1, 4.5}, {2, 4.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}], 
     LineBox[{{2, 4.5}, {3, 4.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}], 
     LineBox[{{3, 3.5}, {4, 3.5}}], LineBox[{{3, 4.5}, {4, 4.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}], 
     LineBox[{{4, 4.5}, {5, 4.5}}]}, {LineBox[{{5, 0.5}, {6, 0.5}}], 
     LineBox[{{5, 1.5}, {6, 1.5}}], LineBox[{{5, 2.5}, {6, 2.5}}], 
     LineBox[{{5, 3.5}, {6, 3.5}}], LineBox[{{5, 4.5}, {6, 4.5}}]}}, {{
     CircleBox[{0.5, 0.5}, 0.25], LineBox[{{0.5, 0.25}, {0.5, 0.75}}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Rx\"\>", {0.5, 1.5}]}, {
     RectangleBox[{0.1, 3.1}, {0.9, 3.9}], 
     InsetBox["\<\"U\"\>", {0.5, 3.5}]}, {
     RectangleBox[{0.1, 4.1}, {0.9, 4.9}], 
     InsetBox["\<\"Matr\"\>", {0.5, 4.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 1.5}, 0.1], DiskBox[{1.5, 2.5}, 0.1]}, 
      LineBox[{{1.5, 0.5}, {1.5, 2.5}}]}, {
      RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {1.5, 0.5}]}}, {
     RectangleBox[{1.1, 4.1}, {1.9, 4.9}], 
     InsetBox["\<\"S\"\>", {1.5, 4.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{2.5, 2.5}, 0.1], 
      LineBox[{{2.5, 0.5}, {2.5, 
       3.5}}]}, {{{LineBox[{{2.4, 0.4}, {2.6, 0.6}}], 
        LineBox[{{2.6, 0.4}, {2.4, 0.6}}]}, {
        LineBox[{{2.4, 3.4}, {2.6, 3.6}}], 
        LineBox[{{2.6, 3.4}, {2.4, 3.6}}]}}, 
      LineBox[{{2.5, 0.5}, {2.5, 3.5}}]}}, {
     LineBox[{{3.5, 0.5}, {3.5, 3.5}}], {RectangleBox[{3.1, 2.1}, {3.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {3.5, 2.5}]}, {
      RectangleBox[{3.1, 3.1}, {3.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 3.5}]}, {
      RectangleBox[{3.1, 0.1}, {3.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 0.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 4.5}, 0.1], DiskBox[{4.5, 3.5}, 0.1], 
       DiskBox[{4.5, 2.5}, 0.1], DiskBox[{4.5, 1.5}, 0.1]}, 
      LineBox[{{4.5, 1.5}, {4.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {4.75, 1.75}]}, {
     RectangleBox[{5.1, 4.1}, {5.9, 4.9}], 
     InsetBox["\<\"T\"\>", {5.5, 4.5}]}, {
     RectangleBox[{5.1, 3.1}, {5.9, 3.9}], 
     InsetBox["\<\"H\"\>", {5.5, 3.5}]}}},
  ImageSize->210,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.865927198378511*^9, {3.865927233679932*^9, 3.865927262417891*^9}, {
   3.865927304056631*^9, 3.865927369906233*^9}, 3.865927474386643*^9, 
   3.865927688398473*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"1c84e032-0478-466e-bb80-03c3edf6e8f5"]
}, Open  ]],

Cell["is inverted to", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.8659274842005863`*^9, 3.865927485468699*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"3fc1d6b9-e743-4a6e-b403-aff5273d61b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"inv", " ", "=", " ", 
  RowBox[{"GetCircuitInverse", "[", "circ", "]"}]}]], "Input",
 CellChangeTimes->{{3.865927680996814*^9, 3.8659276821832047`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a570de6e-e6fc-4df3-b550-8cf15f3070f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["H", "3"], ",", 
   RowBox[{
    SubscriptBox["Ph", "4"], "[", 
    RowBox[{"-", 
     FractionBox["\[Pi]", "4"]}], "]"}], ",", 
   RowBox[{
    SubscriptBox["C", "4"], "[", 
    RowBox[{
     SubscriptBox["Ph", 
      RowBox[{"3", ",", "2", ",", "1"}]], "[", 
     RowBox[{"-", "g"}], "]"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["Ph", "4"], "[", 
    RowBox[{"-", 
     FractionBox["\[Pi]", "2"]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     RowBox[{"-", "f"}], ",", 
     RowBox[{
      SubscriptBox["X", "2"], " ", 
      SubscriptBox["Y", "3"], " ", 
      SubscriptBox["Z", "0"]}]}], "]"}], ",", 
   RowBox[{
    SubscriptBox["C", "2"], "[", 
    SubscriptBox["SWAP", 
     RowBox[{"0", ",", "3"}]], "]"}], ",", 
   RowBox[{"G", "[", 
    RowBox[{"-", "e"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["Matr", "4"], "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["d", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "b"}], " ", "c"}], "+", 
          RowBox[{"a", " ", "d"}]}]], ",", 
        RowBox[{"-", 
         FractionBox["b", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "b"}], " ", "c"}], "+", 
           RowBox[{"a", " ", "d"}]}]]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["c", 
          RowBox[{
           RowBox[{
            RowBox[{"-", "b"}], " ", "c"}], "+", 
           RowBox[{"a", " ", "d"}]}]]}], ",", 
        FractionBox["a", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "b"}], " ", "c"}], "+", 
          RowBox[{"a", " ", "d"}]}]]}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["U", "3"], "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Conjugate", "[", "a", "]"}], ",", 
        RowBox[{"Conjugate", "[", "c", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Conjugate", "[", "b", "]"}], ",", 
        RowBox[{"Conjugate", "[", "d", "]"}]}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["C", 
     RowBox[{"1", ",", "2"}]], "[", 
    RowBox[{
     SubscriptBox["Ry", "0"], "[", 
     RowBox[{"-", "b"}], "]"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["Rx", "1"], "[", 
    RowBox[{"-", "a"}], "]"}], ",", 
   SubscriptBox["X", "0"]}], "}"}]], "Output",
 CellChangeTimes->{{3.865927491346095*^9, 3.865927536499488*^9}, 
   3.865927688449933*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"3e0b8004-9a4b-4c90-8275-752bedcd70c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", "[", 
  RowBox[{"{", 
   RowBox[{"circ", ",", " ", "inv"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.865927492242399*^9, 3.865927493885975*^9}, {
  3.865927532955049*^9, 3.8659275344647007`*^9}, {3.865927684510483*^9, 
  3.8659276849256687`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"cf1f1a17-a7b8-46c0-a157-57aec5d4f7b3"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}], 
     LineBox[{{0, 4.5}, {1, 4.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}], 
     LineBox[{{1, 3.5}, {2, 3.5}}], LineBox[{{1, 4.5}, {2, 4.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}], 
     LineBox[{{2, 4.5}, {3, 4.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}], 
     LineBox[{{3, 3.5}, {4, 3.5}}], LineBox[{{3, 4.5}, {4, 4.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}], 
     LineBox[{{4, 4.5}, {5, 4.5}}]}, {LineBox[{{5, 0.5}, {6, 0.5}}], 
     LineBox[{{5, 1.5}, {6, 1.5}}], LineBox[{{5, 2.5}, {6, 2.5}}], 
     LineBox[{{5, 3.5}, {6, 3.5}}], LineBox[{{5, 4.5}, {6, 4.5}}]}, {
     LineBox[{{6, 0.5}, {6.25, 0.5}}], LineBox[{{6, 1.5}, {6.25, 1.5}}], 
     LineBox[{{6, 2.5}, {6.25, 2.5}}], LineBox[{{6, 3.5}, {6.25, 3.5}}], 
     LineBox[{{6, 4.5}, {6.25, 4.5}}]}, {LineBox[{{6.25, 0.5}, {7.25, 0.5}}], 
     LineBox[{{6.25, 1.5}, {7.25, 1.5}}], LineBox[{{6.25, 2.5}, {7.25, 2.5}}],
      LineBox[{{6.25, 3.5}, {7.25, 3.5}}], 
     LineBox[{{6.25, 4.5}, {7.25, 4.5}}]}, {
     LineBox[{{7.25, 0.5}, {8.25, 0.5}}], LineBox[{{7.25, 1.5}, {8.25, 1.5}}],
      LineBox[{{7.25, 2.5}, {8.25, 2.5}}], 
     LineBox[{{7.25, 3.5}, {8.25, 3.5}}], 
     LineBox[{{7.25, 4.5}, {8.25, 4.5}}]}, {
     LineBox[{{8.25, 0.5}, {9.25, 0.5}}], LineBox[{{8.25, 1.5}, {9.25, 1.5}}],
      LineBox[{{8.25, 2.5}, {9.25, 2.5}}], 
     LineBox[{{8.25, 3.5}, {9.25, 3.5}}], 
     LineBox[{{8.25, 4.5}, {9.25, 4.5}}]}, {
     LineBox[{{9.25, 0.5}, {10.25, 0.5}}], 
     LineBox[{{9.25, 1.5}, {10.25, 1.5}}], 
     LineBox[{{9.25, 2.5}, {10.25, 2.5}}], 
     LineBox[{{9.25, 3.5}, {10.25, 3.5}}], 
     LineBox[{{9.25, 4.5}, {10.25, 4.5}}]}, {
     LineBox[{{10.25, 0.5}, {11.25, 0.5}}], 
     LineBox[{{10.25, 1.5}, {11.25, 1.5}}], 
     LineBox[{{10.25, 2.5}, {11.25, 2.5}}], 
     LineBox[{{10.25, 3.5}, {11.25, 3.5}}], 
     LineBox[{{10.25, 4.5}, {11.25, 4.5}}]}, {
     LineBox[{{11.25, 0.5}, {12.25, 0.5}}], 
     LineBox[{{11.25, 1.5}, {12.25, 1.5}}], 
     LineBox[{{11.25, 2.5}, {12.25, 2.5}}], 
     LineBox[{{11.25, 3.5}, {12.25, 3.5}}], 
     LineBox[{{11.25, 4.5}, {12.25, 4.5}}]}}, {{CircleBox[{0.5, 0.5}, 0.25], 
     LineBox[{{0.5, 0.25}, {0.5, 0.75}}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Rx\"\>", {0.5, 1.5}]}, {
     RectangleBox[{0.1, 3.1}, {0.9, 3.9}], 
     InsetBox["\<\"U\"\>", {0.5, 3.5}]}, {
     RectangleBox[{0.1, 4.1}, {0.9, 4.9}], 
     InsetBox["\<\"Matr\"\>", {0.5, 4.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 1.5}, 0.1], DiskBox[{1.5, 2.5}, 0.1]}, 
      LineBox[{{1.5, 0.5}, {1.5, 2.5}}]}, {
      RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {1.5, 0.5}]}}, {
     RectangleBox[{1.1, 4.1}, {1.9, 4.9}], 
     InsetBox["\<\"S\"\>", {1.5, 4.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{2.5, 2.5}, 0.1], 
      LineBox[{{2.5, 0.5}, {2.5, 
       3.5}}]}, {{{LineBox[{{2.4, 0.4}, {2.6, 0.6}}], 
        LineBox[{{2.6, 0.4}, {2.4, 0.6}}]}, {
        LineBox[{{2.4, 3.4}, {2.6, 3.6}}], 
        LineBox[{{2.6, 3.4}, {2.4, 3.6}}]}}, 
      LineBox[{{2.5, 0.5}, {2.5, 3.5}}]}}, {
     LineBox[{{3.5, 0.5}, {3.5, 3.5}}], {RectangleBox[{3.1, 2.1}, {3.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {3.5, 2.5}]}, {
      RectangleBox[{3.1, 3.1}, {3.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 3.5}]}, {
      RectangleBox[{3.1, 0.1}, {3.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 0.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 4.5}, 0.1], DiskBox[{4.5, 3.5}, 0.1], 
       DiskBox[{4.5, 2.5}, 0.1], DiskBox[{4.5, 1.5}, 0.1]}, 
      LineBox[{{4.5, 1.5}, {4.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {4.75, 1.75}]}, {
     RectangleBox[{5.1, 4.1}, {5.9, 4.9}], 
     InsetBox["\<\"T\"\>", {5.5, 4.5}]}, {
     RectangleBox[{5.1, 3.1}, {5.9, 3.9}], InsetBox["\<\"H\"\>", {5.5, 3.5}]}, 
    {GrayLevel[0.5], Dashing[{Small, Small}], 
     LineBox[{{6.125, 0}, {6.125, 5}}]}, {
     RectangleBox[{6.35, 3.1}, {7.15, 3.9}], 
     InsetBox["\<\"H\"\>", {6.75, 3.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{6.75, 4.5}, 0.1], 
      LineBox[{{6.75, 4.5}, {6.75, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {7., 4.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.75, 4.5}, 0.1], DiskBox[{7.75, 3.5}, 0.1], 
       DiskBox[{7.75, 2.5}, 0.1], DiskBox[{7.75, 1.5}, 0.1]}, 
      LineBox[{{7.75, 1.5}, {7.75, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {8., 1.75}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{8.75, 4.5}, 0.1], 
      LineBox[{{8.75, 4.5}, {8.75, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {9., 4.75}]}, {
     LineBox[{{8.75, 0.5}, {8.75, 3.5}}], {
      RectangleBox[{8.35, 2.1}, {9.15, 2.9}], 
      InsetBox["\<\"Rx\"\>", {8.75, 2.5}]}, {
      RectangleBox[{8.35, 3.1}, {9.15, 3.9}], 
      InsetBox["\<\"Ry\"\>", {8.75, 3.5}]}, {
      RectangleBox[{8.35, 0.1}, {9.15, 0.9}], 
      InsetBox["\<\"Rz\"\>", {8.75, 0.5}]}}, {
     {FaceForm[GrayLevel[0]], DiskBox[{9.75, 2.5}, 0.1], 
      LineBox[{{9.75, 0.5}, {9.75, 
       3.5}}]}, {{{LineBox[{{9.65, 0.4}, {9.85, 0.6}}], 
        LineBox[{{9.85, 0.4}, {9.65, 0.6}}]}, {
        LineBox[{{9.65, 3.4}, {9.85, 3.6}}], 
        LineBox[{{9.85, 3.4}, {9.65, 3.6}}]}}, 
      LineBox[{{9.75, 0.5}, {9.75, 3.5}}]}}, {
     RectangleBox[{9.35, 4.1}, {10.15, 4.9}], 
     InsetBox["\<\"Matr\"\>", {9.75, 4.5}]}, {
     RectangleBox[{10.35, 3.1}, {11.15, 3.9}], 
     InsetBox["\<\"U\"\>", {10.75, 3.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{10.75, 1.5}, 0.1], DiskBox[{10.75, 2.5}, 0.1]}, 
      LineBox[{{10.75, 0.5}, {10.75, 2.5}}]}, {
      RectangleBox[{10.35, 0.1}, {11.15, 0.9}], 
      InsetBox["\<\"Ry\"\>", {10.75, 0.5}]}}, {
     RectangleBox[{11.35, 1.1}, {12.15, 1.9}], 
     InsetBox["\<\"Rx\"\>", {11.75, 1.5}]}, {CircleBox[{11.75, 0.5}, 0.25], 
     LineBox[{{11.75, 0.25}, {11.75, 0.75}}]}}},
  ImageSize->397.5,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.865927494122698*^9, 3.865927537902042*^9}, 
   3.8659276885032883`*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"9e1ae156-c522-431b-b6c2-fbbc83b20f1c"]
}, Open  ]],

Cell["Beware that not every gate has an inverse.", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"787d6ee1-549e-4a49-83a5-c2753caf3a8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitInverse", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   SubscriptBox["M", "0"], "]"}]}]], "Input",
 CellChangeTimes->{{3.865927376875175*^9, 3.865927382013579*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"7f0dd562-b437-4203-ab26-f4bfc2023a54"],

Cell[BoxData[
 TemplateBox[{
  "GetCircuitInverse", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Could not determine the inverse of gate \\\
\\\\\\!\\\\\\\\(\\\\\\\\*FormBox[SubscriptBox[\\\\\\\\\\\\\\\"M\\\\\\\\\\\\\\\
\", \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"], \
TraditionalForm]\\\\\\\\).\\\\\\\"\\\"}]\\)\"", 2, 66, 1, 
   32099630708877237090, "Local", "QuEST`GetCircuitInverse"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.865927382294518*^9},
 CellLabel->
  "During evaluation of \
In[66]:=",ExpressionUUID->"33c4480e-f7d4-40d6-b8b2-759b09486361"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.865927382341324*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"64b48e7b-36b8-420f-b878-76db785cabae"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SimplifyCircuit", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}},
 CellTags->
  "SimplifyCircuit",ExpressionUUID->"603140cc-4dc0-4860-8e44-1862d0817e1f"],

Cell[TextData[{
 StyleBox["SimplifyCircuit[",
  FontWeight->"Bold"],
 "circ",
 StyleBox["] ",
  FontWeight->"Bold"],
 "performs basic but comprehensive simplification of the circuit, useful as a \
pre-step before advanced topological or approximate simplification. ",
 StyleBox["SimplifyCircuit ",
  FontWeight->"Bold"],
 "will...\n    \[Bullet] remove adjacent idempotent operations\n    \[Bullet] \
sort gate qubit indices, even if this requires adjusting the gate arguments\n \
   \[Bullet] combine arguments of adjacent parameterised gates\n    \[Bullet] \
multiply matrices of adjacent unitaries\n    \[Bullet] merge global phases\n  \
  \[Bullet] merge adjacent Pauli operators, and with Pauli rotations\n    \
\[Bullet] remove zero-parameter and identity gates\n    \[Bullet] mod \
arguments of rotation gates to within their periods\n    \[Bullet] simplify \
single-target Pauli gadgets to rotations\n    \[Bullet] replace special-param \
rotation gates with global phases"
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927446125792*^9}, {
  3.865928036538768*^9, 3.865928347584399*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"10ebd17f-d838-4dca-ae5c-1724bad5776b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SimplifyCircuit"}]], "Input",
 CellChangeTimes->{{3.865926456222097*^9, 3.8659264588037567`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"4f0c4c7c-5165-42bd-ad05-69ec907db3a7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SimplifyCircuit[circuit] returns an equivalent but \
simplified circuit.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "SimplifyCircuit", "[", "QuEST`Private`circ_List", "]"}], 
                    ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`initCols", "=", 
                    RowBox[{
                    
                    RowBox[{"GetCircuitColumns", "[", "QuEST`Private`circ", 
                    "]"}], "//.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{"QuEST`Private`t__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`t__Integer", "}"}]}]], "[", 
                    "QuEST`Private`x__", "]"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{"QuEST`Private`tidyInds", "[", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`t"}], 
                    "]"}]], "[", "QuEST`Private`x", "]"}]}], ",", 
                    RowBox[{
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"S", "|", "T"}]}], "QuEST`Private`t_Integer"], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`t"], "[", 
                    FractionBox["\[Pi]", 
                    RowBox[{"QuEST`Private`g", "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", "2"}], ",", 
                    RowBox[{"T", "\[Rule]", "4"}]}], "}"}]}]], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"S", "|", "T"}]}], "QuEST`Private`t_Integer"], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{"QuEST`Private`tidyInds", "[", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`t"}], 
                    "]"}]], "[", 
                    FractionBox["\[Pi]", 
                    RowBox[{"QuEST`Private`g", "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"S", "\[Rule]", "2"}], ",", 
                    RowBox[{"T", "\[Rule]", "4"}]}], "}"}]}]], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"U", "|", "Matr"}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`m_", "]"}]}], "\[RuleDelayed]", 
                    
                    RowBox[{"QuEST`Private`tidyMatrixGate", "[", 
                    "QuEST`Private`g", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c__"], "[", 
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"U", "|", "Matr"}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`m_", "]"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["C", 
                    
                    RowBox[{"QuEST`Private`tidyInds", "[", "QuEST`Private`c", 
                    "]"}]], "[", 
                    
                    RowBox[{"QuEST`Private`tidyMatrixGate", "[", 
                    "QuEST`Private`g", "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["C", 
                    
                    RowBox[{"QuEST`Private`tidyInds", "[", "QuEST`Private`c", 
                    "]"}]], "[", "QuEST`Private`g", "]"}]}], ",", 
                    RowBox[{
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    
                    RowBox[{"H", "|", "X", "|", "Y", "|", "Z", "|", "Id", "|",
                     "SWAP", "|", "Ph", "|", 
                    RowBox[{"M", "||", "T"}], "|", "S"}]}], 
                    RowBox[{"QuEST`Private`t__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`t__Integer", "}"}]}]], 
                    "\[RuleDelayed]", 
                    SubscriptBox["QuEST`Private`g", 
                    
                    RowBox[{"QuEST`Private`tidyInds", "[", "QuEST`Private`t", 
                    "]"}]]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    
                    RowBox[{"Rx", "|", "Ry", "|", "Rz", "|", "Damp", "|", 
                    "Deph", "|", "Depol"}]}], 
                    RowBox[{"QuEST`Private`t__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`t__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`x__", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", 
                    
                    RowBox[{"QuEST`Private`tidyInds", "[", "QuEST`Private`t", 
                    "]"}]], "[", "QuEST`Private`x", "]"}]}], ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`s_", 
                    RowBox[{"{", "QuEST`Private`t__", "}"}]], 
                    "\[RuleDelayed]", 
                    SubscriptBox["QuEST`Private`s", "QuEST`Private`t"]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["QuEST`Private`s_", 
                    RowBox[{"{", "QuEST`Private`t__", "}"}]], "[", 
                    "QuEST`Private`x_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`s", "QuEST`Private`t"], "[", 
                    "QuEST`Private`x", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c__"], "[", 
                    SubscriptBox["QuEST`Private`s_", 
                    RowBox[{"{", "QuEST`Private`t__", "}"}]], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c"], "[", 
                    SubscriptBox["QuEST`Private`s", "QuEST`Private`t"], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c__"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`s_", 
                    RowBox[{"{", "QuEST`Private`t__", "}"}]], "[", 
                    "QuEST`Private`x_", "]"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`s", "QuEST`Private`t"], "[", 
                    "QuEST`Private`x", "]"}], "]"}]}]}], "}"}]}]}], "}"}], 
                    ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`simpCols", "}"}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`simpCols", "=", 
                    RowBox[{"FixedPoint", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`prevCols", "}"}], ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`cols", "}"}], ",", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`cols", "=", 
                    "QuEST`Private`prevCols"}], ";", 
                    RowBox[{"QuEST`Private`cols", "=", 
                    RowBox[{"SequenceReplace", "[", 
                    RowBox[{"QuEST`Private`cols", ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{"QuEST`Private`wrap", "[", 
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "]"}], ",", "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{"QuEST`Private`wrap", "[", 
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "]"}], ",", "QuEST`Private`d___"}], "}"}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", "QuEST`Private`b"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`gate", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"H", ",", "X", ",", "Y", ",", "Z", ",", "Id", ",",
                     "SWAP"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`wrap", ",", 
                    RowBox[{"{", 
                    RowBox[{"Identity", ",", 
                    SubscriptBox["C", "QuEST`Private`ctrls__"]}], "}"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`gate", "=", 
                    "QuEST`Private`gateSymb"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`x_", "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`y_", "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q"], 
                    "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], "]"}], ",", "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`x_", "]"}], "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`y_", "]"}], "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`gate", "QuEST`Private`q"], 
                    "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], "]"}], "]"}], ",", "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`gateSymb", ",", 
                    RowBox[{"{", 
                    RowBox[{"Ph", ",", "Rx", ",", "Ry", ",", "Rz"}], "}"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", "QuEST`Private`op_"}], 
                    "]"}], ",", "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`y_", ",", "QuEST`Private`op_"}], 
                    "]"}], ",", "QuEST`Private`d___"}], "}"}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], ",", "QuEST`Private`op"}], "]"}], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", "QuEST`Private`op_"}], 
                    "]"}], "]"}], ",", "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`y_", ",", "QuEST`Private`op_"}], 
                    "]"}], "]"}], ",", "QuEST`Private`d___"}], "}"}]}], "}"}],
                     "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl"], "[", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], ",", "QuEST`Private`op"}], "]"}], "]"}], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"U", "|", "Matr"}]}], "QuEST`Private`q__"], ")"}],
                     "[", "QuEST`Private`m1_", "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"U", "|", "Matr"}]}], "QuEST`Private`q__"], ")"}],
                     "[", "QuEST`Private`m2_", "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`m1", ".", "QuEST`Private`m2"}], 
                    "]"}], "]"}], ",", "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"U", "|", "Matr"}]}], "QuEST`Private`q__"], ")"}],
                     "[", "QuEST`Private`m1_", "]"}], "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl__"], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"U", "|", "Matr"}]}], "QuEST`Private`q__"], ")"}],
                     "[", "QuEST`Private`m2_", "]"}], "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`ctrl"], "[", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`m1", ".", "QuEST`Private`m2"}], 
                    "]"}], "]"}], "]"}], ",", "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{"G", "[", "QuEST`Private`x_", "]"}], ",", 
                    "QuEST`Private`b___", ",", 
                    RowBox[{"G", "[", "QuEST`Private`y_", "]"}], ",", 
                    "QuEST`Private`c___"}], "}"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"G", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], "]"}], ",", "QuEST`Private`a", ",", 
                    "QuEST`Private`b", ",", "QuEST`Private`c"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{"G", "[", "QuEST`Private`x_", "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    "QuEST`Private`infix___", ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{"G", "[", "QuEST`Private`y_", "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"G", "[", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"QuEST`Private`x", "+", "QuEST`Private`y"}], 
                    "]"}], "]"}], ",", "QuEST`Private`a", ",", 
                    "QuEST`Private`b"}], "}"}], ",", "QuEST`Private`infix", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["X", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["Y", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], "]"}], ",", 
                    SubscriptBox["Z", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["Y", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["Z", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], "]"}], ",", 
                    SubscriptBox["X", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["Z", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["X", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], "]"}], ",", 
                    SubscriptBox["Y", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["Y", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["X", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox["\[Pi]", "2"], "]"}], ",", 
                    SubscriptBox["Z", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["Z", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["Y", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox["\[Pi]", "2"], "]"}], ",", 
                    SubscriptBox["X", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["X", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["Z", "QuEST`Private`q__"], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox["\[Pi]", "2"], "]"}], ",", 
                    SubscriptBox["Y", "QuEST`Private`q"], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"QuEST`Private`rot", "=", 
                    RowBox[{"First", "[", "QuEST`Private`ops", "]"}]}], ",", 
                    RowBox[{"QuEST`Private`pauli", "=", 
                    RowBox[{"Last", "[", "QuEST`Private`ops", "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    SubscriptBox["QuEST`Private`pauli", "QuEST`Private`q__"], 
                    ",", "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`rot", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`x_", "]"}], ",", 
                    "QuEST`Private`d___"}], "}"}]}], "}"}], "\[RuleDelayed]", 
                    
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox["\[Pi]", "2"], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`rot", "QuEST`Private`q"], "[", 
                    RowBox[{"QuEST`Private`x", "+", "\[Pi]"}], "]"}], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a___", ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`rot", "QuEST`Private`q__"], 
                    "[", "QuEST`Private`x_", "]"}], ",", 
                    "QuEST`Private`b___"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c___", ",", 
                    SubscriptBox["QuEST`Private`pauli", "QuEST`Private`q__"], 
                    ",", "QuEST`Private`d___"}], "}"}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`a", ",", 
                    RowBox[{"G", "[", 
                    FractionBox["\[Pi]", "2"], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`rot", "QuEST`Private`q"], "[", 
                    RowBox[{"QuEST`Private`x", "+", "\[Pi]"}], "]"}], ",", 
                    "QuEST`Private`b"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`d"}], 
                    "}"}]}], "]"}]}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`ops", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Rx", ",", "X"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Ry", ",", "Y"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Rz", ",", "Z"}], "}"}]}], "}"}]}], "}"}]}], 
                    "]"}]}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"QuEST`Private`cols", "=", 
                    RowBox[{"QuEST`Private`cols", "//.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "}"}], ".."}], "}"}], "\[Rule]", "Nothing"}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", "__"], "[", "Nothing", "]"}], "\[Rule]",
                     "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    
                    RowBox[{"Ph", "|", "Rx", "|", "Ry", "|", "Rz", "|", 
                    "Damp", "|", "Deph", "|", "Depol"}], "__"], ")"}], "[", 
                    "0", "]"}], "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"0", ",", "_"}], "]"}], "\[Rule]", "Nothing"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"G", "[", "0", "]"}], "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"U", "|", "Matr"}], "QuEST`Private`q__"], ")"}], 
                    "[", "QuEST`Private`m_", "]"}], "/;", 
                    RowBox[{"QuEST`Private`m", "===", 
                    RowBox[{"IdentityMatrix", "[", 
                    SuperscriptBox["2", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "QuEST`Private`q", "}"}], "]"}]], "]"}]}]}], 
                    "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q__"], "[", 
                    RowBox[{"QuEST`Private`x_", "?", "NumericQ"}], "]"}], 
                    "/;", 
                    RowBox[{"!", 
                    RowBox[{"0", "\[LessEqual]", "QuEST`Private`x", "<", 
                    RowBox[{"2", " ", "\[Pi]"}]}]}]}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q"], "[", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    RowBox[{"2", " ", "\[Pi]"}]}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"QuEST`Private`g", ":", 
                    SubscriptBox[
                    RowBox[{"Rx", "|", "Ry", "|", "Rz"}], 
                    "QuEST`Private`q__"]}], ")"}], "[", 
                    RowBox[{"QuEST`Private`x_", "?", "NumericQ"}], "]"}], 
                    "/;", 
                    RowBox[{"!", 
                    RowBox[{"0", "\[LessEqual]", "QuEST`Private`x", "<", 
                    RowBox[{"4", " ", "\[Pi]"}]}]}]}], "\[RuleDelayed]", 
                    RowBox[{"QuEST`Private`g", "[", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    RowBox[{"4", " ", "\[Pi]"}]}], "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`x_", "?", "NumericQ"}], ",", 
                    "QuEST`Private`op_"}], "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"0", "\[LessEqual]", "QuEST`Private`x", "<", 
                    RowBox[{"4", " ", "\[Pi]"}]}]}]}], "\[RuleDelayed]", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    RowBox[{"4", " ", "\[Pi]"}]}], "]"}], ",", 
                    "QuEST`Private`op"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", 
                    RowBox[{"QuEST`Private`op", ":", 
                    SubscriptBox[
                    RowBox[{"X", "|", "Y", "|", "Z"}], 
                    "QuEST`Private`q_"]}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"QuEST`Private`op", "[", "QuEST`Private`x", "]"}],
                     "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"X", "\[Rule]", "Rx"}], ",", 
                    RowBox[{"Y", "\[Rule]", "Ry"}], ",", 
                    RowBox[{"Z", "\[Rule]", "Rz"}]}], "}"}]}], ")"}]}]}], 
                    "}"}]}]}], ";", 
                    RowBox[{"QuEST`Private`cols", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"QuEST`Private`cols", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"QuEST`Private`g", ":", 
                    SubscriptBox[
                    RowBox[{"Rx", "|", "Ry", "|", "Rz"}], 
                    "QuEST`Private`q__"]}], ")"}], "[", "\[Pi]", "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"G", "[", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], "]"}], ",", 
                    RowBox[{"QuEST`Private`g", "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Rx", "\[Rule]", "X"}], ",", 
                    RowBox[{"Ry", "\[Rule]", "Y"}], ",", 
                    RowBox[{"Rz", "\[Rule]", "Z"}]}], "}"}]}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"\[Pi]", ",", "QuEST`Private`op_Times"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Sequence", "[", 
                    RowBox[{
                    RowBox[{"G", "[", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]"}], "2"], "]"}], ",", 
                    RowBox[{"Sequence", "@@", "QuEST`Private`op"}]}], "]"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q_"], "[", "\[Pi]", 
                    "]"}], "\[RuleDelayed]", 
                    SubscriptBox["Z", "QuEST`Private`q"]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q__"], "[", "\[Pi]", 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Rest", "[", 
                    RowBox[{"{", "QuEST`Private`q", "}"}], "]"}]}]], "[", 
                    SubscriptBox["Z", 
                    RowBox[{"First", "[", 
                    RowBox[{"{", "QuEST`Private`q", "}"}], "]"}]], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"QuEST`Private`g", ":", 
                    SubscriptBox[
                    RowBox[{"Rx", "|", "Ry", "|", "Rz"}], 
                    "QuEST`Private`q__"]}], ")"}], "[", 
                    RowBox[{"2", " ", "\[Pi]"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"G", "[", "\[Pi]", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], ",", "_Times"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"G", "[", "\[Pi]", "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`cols", "===", "Nothing"}], ",", 
                    RowBox[{"QuEST`Private`cols", "=", 
                    RowBox[{"{", "}"}]}]}], "]"}], ";", 
                    RowBox[{"QuEST`Private`cols", "=", 
                    RowBox[{"GetCircuitColumns", "[", 
                    
                    RowBox[{"ExtractCircuit", "[", "QuEST`Private`cols", 
                    "]"}], "]"}]}], ";", "QuEST`Private`cols"}]}], "]"}]}], 
                    "]"}], ",", "QuEST`Private`initCols"}], "]"}]}], ";", 
                    RowBox[{
                    
                    RowBox[{"ExtractCircuit", "[", "QuEST`Private`simpCols", 
                    "]"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q_"], "[", 
                    FractionBox["\[Pi]", "2"], "]"}], "\[RuleDelayed]", 
                    SubscriptBox["S", "QuEST`Private`q"]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", "QuEST`Private`q_"], "[", 
                    FractionBox["\[Pi]", "4"], "]"}], "\[RuleDelayed]", 
                    SubscriptBox["T", "QuEST`Private`q"]}]}], "}"}]}]}]}], 
                    "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"SimplifyCircuit", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", "SimplifyCircuit", 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`SimplifyCircuit\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SimplifyCircuit[circuit] returns an equivalent but \
simplified circuit.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "SimplifyCircuit[circuit] returns an equivalent but simplified circuit.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`SimplifyCircuit, {QuEST`SimplifyCircuit[
         Pattern[QuEST`Private`circ, 
          Blank[List]]] :> With[{QuEST`Private`initCols = ReplaceRepeated[
            QuEST`GetCircuitColumns[QuEST`Private`circ], {Subscript[C, 
               Alternatives[
                Pattern[QuEST`Private`c, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]]}]][
               Subscript[QuEST`Gate`Ph, 
                Alternatives[
                 Pattern[QuEST`Private`t, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`t, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`x, 
                 BlankSequence[]]]] :> Subscript[QuEST`Gate`Ph, 
               QuEST`Private`tidyInds[QuEST`Private`c, QuEST`Private`t]][
              QuEST`Private`x], Subscript[
               Pattern[QuEST`Private`g, 
                Alternatives[QuEST`Gate`S, QuEST`Gate`T]], 
               Pattern[QuEST`Private`t, 
                Blank[Integer]]] :> 
             Subscript[QuEST`Gate`Ph, QuEST`Private`t][
              Pi/ReplaceAll[
               QuEST`Private`g, {QuEST`Gate`S -> 2, QuEST`Gate`T -> 4}]], 
             Subscript[C, 
               Alternatives[
                Pattern[QuEST`Private`c, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]]}]][
               Subscript[
                Pattern[QuEST`Private`g, 
                 Alternatives[QuEST`Gate`S, QuEST`Gate`T]], 
                Pattern[QuEST`Private`t, 
                 Blank[Integer]]]] :> Subscript[QuEST`Gate`Ph, 
               QuEST`Private`tidyInds[QuEST`Private`c, QuEST`Private`t]][
              Pi/ReplaceAll[
               QuEST`Private`g, {QuEST`Gate`S -> 2, QuEST`Gate`T -> 4}]], 
             Pattern[QuEST`Private`g, 
               Subscript[
                Alternatives[QuEST`Gate`U, QuEST`Gate`Matr], 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`m, 
                 Blank[]]]] :> QuEST`Private`tidyMatrixGate[QuEST`Private`g], 
             Subscript[C, 
               Pattern[QuEST`Private`c, 
                BlankSequence[]]][
               Pattern[QuEST`Private`g, 
                Subscript[
                 Alternatives[QuEST`Gate`U, QuEST`Gate`Matr], 
                 Alternatives[
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]], {
                   Pattern[QuEST`Private`q, 
                    BlankSequence[Integer]]}]][
                 Pattern[QuEST`Private`m, 
                  Blank[]]]]] :> Subscript[C, 
               QuEST`Private`tidyInds[QuEST`Private`c]][
               QuEST`Private`tidyMatrixGate[QuEST`Private`g]], Subscript[C, 
               Alternatives[
                Pattern[QuEST`Private`c, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]]}]][
               Pattern[QuEST`Private`g, 
                Blank[]]] :> Subscript[C, 
               QuEST`Private`tidyInds[QuEST`Private`c]][QuEST`Private`g], 
             Subscript[
               Pattern[QuEST`Private`g, 
                Alternatives[
                QuEST`Gate`H, QuEST`Gate`X, QuEST`Gate`Y, QuEST`Gate`Z, 
                 QuEST`Gate`Id, QuEST`Gate`SWAP, QuEST`Gate`Ph, 
                 Or[QuEST`Gate`M, QuEST`Gate`T], QuEST`Gate`S]], 
               Alternatives[
                Pattern[QuEST`Private`t, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`t, 
                  BlankSequence[Integer]]}]] :> Subscript[QuEST`Private`g, 
               QuEST`Private`tidyInds[QuEST`Private`t]], Subscript[
               Pattern[QuEST`Private`g, 
                Alternatives[
                QuEST`Gate`Rx, QuEST`Gate`Ry, QuEST`Gate`Rz, QuEST`Gate`Damp, 
                 QuEST`Gate`Deph, QuEST`Gate`Depol]], 
               Alternatives[
                Pattern[QuEST`Private`t, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`t, 
                  BlankSequence[Integer]]}]][
               Pattern[QuEST`Private`x, 
                BlankSequence[]]] :> Subscript[QuEST`Private`g, 
               QuEST`Private`tidyInds[QuEST`Private`t]][QuEST`Private`x], 
             Subscript[
               Pattern[QuEST`Private`s, 
                Blank[]], {
                Pattern[QuEST`Private`t, 
                 BlankSequence[]]}] :> 
             Subscript[QuEST`Private`s, QuEST`Private`t], Subscript[
               Pattern[QuEST`Private`s, 
                Blank[]], {
                Pattern[QuEST`Private`t, 
                 BlankSequence[]]}][
               Pattern[QuEST`Private`x, 
                Blank[]]] :> 
             Subscript[QuEST`Private`s, QuEST`Private`t][QuEST`Private`x], 
             Subscript[C, 
               Pattern[QuEST`Private`c, 
                BlankSequence[]]][
               Subscript[
                Pattern[QuEST`Private`s, 
                 Blank[]], {
                 Pattern[QuEST`Private`t, 
                  BlankSequence[]]}]] :> Subscript[C, QuEST`Private`c][
               Subscript[QuEST`Private`s, QuEST`Private`t]], Subscript[C, 
               Pattern[QuEST`Private`c, 
                BlankSequence[]]][
               Subscript[
                Pattern[QuEST`Private`s, 
                 Blank[]], {
                 Pattern[QuEST`Private`t, 
                  BlankSequence[]]}][
                Pattern[QuEST`Private`x, 
                 Blank[]]]] :> Subscript[C, QuEST`Private`c][
               Subscript[QuEST`Private`s, QuEST`Private`t][
               QuEST`Private`x]]}]}, 
         Module[{QuEST`Private`simpCols}, 
          QuEST`Private`simpCols = FixedPoint[
             Function[{QuEST`Private`prevCols}, 
              
              Module[{QuEST`Private`cols}, 
               QuEST`Private`cols = QuEST`Private`prevCols; 
               QuEST`Private`cols = SequenceReplace[QuEST`Private`cols, 
                  Join[
                   Apply[Join, 
                    Table[{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    QuEST`Private`wrap[
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    QuEST`Private`wrap[
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> 
                    Sequence[{QuEST`Private`a, QuEST`Private`b}, {
                    QuEST`Private`c, QuEST`Private`d}], {
                    QuEST`Private`gate, {
                    QuEST`Gate`H, QuEST`Gate`X, QuEST`Gate`Y, QuEST`Gate`Z, 
                    QuEST`Gate`Id, QuEST`Gate`SWAP}}, {
                    QuEST`Private`wrap, {Identity, 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrls, 
                    BlankSequence[]]]}}]], 
                   Apply[Join, 
                    Table[
                    With[{QuEST`Private`gate = QuEST`Private`gateSymb}, {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`x, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`y, 
                    Blank[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    Subscript[QuEST`Private`gate, QuEST`Private`q][
                    Simplify[QuEST`Private`x + QuEST`Private`y]], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`x, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    Subscript[QuEST`Private`gate, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`y, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    Subscript[C, QuEST`Private`ctrl][
                    Subscript[QuEST`Private`gate, QuEST`Private`q][
                    Simplify[QuEST`Private`x + QuEST`Private`y]]], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}]}], {
                    QuEST`Private`gateSymb, {
                    QuEST`Gate`Ph, QuEST`Gate`Rx, QuEST`Gate`Ry, 
                    QuEST`Gate`Rz}}]], {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    QuEST`Gate`R[
                    Pattern[QuEST`Private`x, 
                    Blank[]], 
                    Pattern[QuEST`Private`op, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    QuEST`Gate`R[
                    Pattern[QuEST`Private`y, 
                    Blank[]], 
                    Pattern[QuEST`Private`op, 
                    Blank[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`R[
                    Simplify[QuEST`Private`x + QuEST`Private`y], 
                    QuEST`Private`op], QuEST`Private`b}, {
                    QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    QuEST`Gate`R[
                    Pattern[QuEST`Private`x, 
                    Blank[]], 
                    Pattern[QuEST`Private`op, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    QuEST`Gate`R[
                    Pattern[QuEST`Private`y, 
                    Blank[]], 
                    Pattern[QuEST`Private`op, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    Subscript[C, QuEST`Private`ctrl][
                    QuEST`Gate`R[
                    Simplify[QuEST`Private`x + QuEST`Private`y], 
                    QuEST`Private`op]], QuEST`Private`b}, {
                    QuEST`Private`c, QuEST`Private`d}]}, {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[
                    Pattern[QuEST`Private`g, 
                    Alternatives[QuEST`Gate`U, QuEST`Gate`Matr]], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`m1, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[
                    Pattern[QuEST`Private`g, 
                    Alternatives[QuEST`Gate`U, QuEST`Gate`Matr]], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`m2, 
                    Blank[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    Subscript[QuEST`Private`g, QuEST`Private`q][
                    Simplify[
                    Dot[QuEST`Private`m1, QuEST`Private`m2]]], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    Subscript[
                    Pattern[QuEST`Private`g, 
                    Alternatives[QuEST`Gate`U, QuEST`Gate`Matr]], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`m1, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[C, 
                    Pattern[QuEST`Private`ctrl, 
                    BlankSequence[]]][
                    Subscript[
                    Pattern[QuEST`Private`g, 
                    Alternatives[QuEST`Gate`U, QuEST`Gate`Matr]], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`m2, 
                    Blank[]]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    Subscript[C, QuEST`Private`ctrl][
                    Subscript[QuEST`Private`g, QuEST`Private`q][
                    Simplify[
                    Dot[QuEST`Private`m1, QuEST`Private`m2]]]], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}]}, {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    QuEST`Gate`G[
                    Pattern[QuEST`Private`x, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]], 
                    QuEST`Gate`G[
                    Pattern[QuEST`Private`y, 
                    Blank[]]], 
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]]}} :> {
                    QuEST`Gate`G[
                    Simplify[QuEST`Private`x + QuEST`Private`y]], 
                    QuEST`Private`a, QuEST`Private`b, QuEST`Private`c}, {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    QuEST`Gate`G[
                    Pattern[QuEST`Private`x, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, 
                    Pattern[QuEST`Private`infix, 
                    BlankNullSequence[]], {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    QuEST`Gate`G[
                    Pattern[QuEST`Private`y, 
                    Blank[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{
                    QuEST`Gate`G[
                    Simplify[QuEST`Private`x + QuEST`Private`y]], 
                    QuEST`Private`a, QuEST`Private`b}, QuEST`Private`infix, {
                    QuEST`Private`c, QuEST`Private`d}]}, {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`X, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Y, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[3 (Pi/2)], 
                    Subscript[QuEST`Gate`Z, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Y, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Z, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[3 (Pi/2)], 
                    Subscript[QuEST`Gate`X, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Z, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`X, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[3 (Pi/2)], 
                    Subscript[QuEST`Gate`Y, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Y, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`X, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[Pi/2], 
                    Subscript[QuEST`Gate`Z, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Z, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Y, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[Pi/2], 
                    Subscript[QuEST`Gate`X, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`X, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Gate`Z, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[Pi/2], 
                    Subscript[QuEST`Gate`Y, QuEST`Private`q], 
                    QuEST`Private`b}, {QuEST`Private`c, QuEST`Private`d}]}, 
                   Apply[Join, 
                    Table[
                    
                    With[{QuEST`Private`rot = First[QuEST`Private`ops], 
                    QuEST`Private`pauli = Last[QuEST`Private`ops]}, {{{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`pauli, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`rot, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`x, 
                    Blank[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[Pi/2], 
                    Subscript[QuEST`Private`rot, QuEST`Private`q][
                    QuEST`Private`x + Pi], QuEST`Private`b}, {
                    QuEST`Private`c, QuEST`Private`d}], {{
                    Pattern[QuEST`Private`a, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`rot, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`x, 
                    Blank[]]], 
                    Pattern[QuEST`Private`b, 
                    BlankNullSequence[]]}, {
                    Pattern[QuEST`Private`c, 
                    BlankNullSequence[]], 
                    Subscript[QuEST`Private`pauli, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]], 
                    Pattern[QuEST`Private`d, 
                    BlankNullSequence[]]}} :> Sequence[{QuEST`Private`a, 
                    QuEST`Gate`G[Pi/2], 
                    Subscript[QuEST`Private`rot, QuEST`Private`q][
                    QuEST`Private`x + Pi], QuEST`Private`b}, {
                    QuEST`Private`c, QuEST`Private`d}]}], {
                    QuEST`Private`ops, {{QuEST`Gate`Rx, QuEST`Gate`X}, {
                    QuEST`Gate`Ry, QuEST`Gate`Y}, {
                    QuEST`Gate`Rz, QuEST`Gate`Z}}}]]]]; 
               QuEST`Private`cols = 
                ReplaceRepeated[QuEST`Private`cols, {{} -> Nothing, {
                    Repeated[{}]} -> Nothing, Subscript[C, 
                    BlankSequence[]][Nothing] -> Nothing, Subscript[
                    Alternatives[
                    QuEST`Gate`Ph, QuEST`Gate`Rx, QuEST`Gate`Ry, 
                    QuEST`Gate`Rz, QuEST`Gate`Damp, QuEST`Gate`Deph, 
                    QuEST`Gate`Depol], 
                    BlankSequence[]][0] -> Nothing, QuEST`Gate`R[0, 
                    Blank[]] -> Nothing, QuEST`Gate`G[0] -> Nothing, Condition[
                    Subscript[
                    Alternatives[QuEST`Gate`U, QuEST`Gate`Matr], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    Pattern[QuEST`Private`m, 
                    Blank[]]], QuEST`Private`m === 
                    IdentityMatrix[2^Length[{QuEST`Private`q}]]] -> Nothing, 
                   Condition[
                    Subscript[QuEST`Gate`Ph, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][
                    PatternTest[
                    Pattern[QuEST`Private`x, 
                    Blank[]], NumericQ]], 
                    Not[
                    Inequality[0, LessEqual, QuEST`Private`x, Less, 2 Pi]]] :> 
                   Subscript[QuEST`Gate`Ph, QuEST`Private`q][
                    Mod[QuEST`Private`x, 2 Pi]], Condition[
                    Pattern[QuEST`Private`g, 
                    Subscript[
                    Alternatives[QuEST`Gate`Rx, QuEST`Gate`Ry, QuEST`Gate`Rz], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]]][
                    PatternTest[
                    Pattern[QuEST`Private`x, 
                    Blank[]], NumericQ]], 
                    Not[
                    Inequality[0, LessEqual, QuEST`Private`x, Less, 4 Pi]]] :> 
                   QuEST`Private`g[
                    Mod[QuEST`Private`x, 4 Pi]], Condition[
                    QuEST`Gate`R[
                    PatternTest[
                    Pattern[QuEST`Private`x, 
                    Blank[]], NumericQ], 
                    Pattern[QuEST`Private`op, 
                    Blank[]]], 
                    Not[
                    Inequality[0, LessEqual, QuEST`Private`x, Less, 4 Pi]]] :> 
                   QuEST`Gate`R[
                    Mod[QuEST`Private`x, 4 Pi], QuEST`Private`op], 
                   QuEST`Gate`R[
                    Pattern[QuEST`Private`x, 
                    Blank[]], 
                    Pattern[QuEST`Private`op, 
                    Subscript[
                    Alternatives[QuEST`Gate`X, QuEST`Gate`Y, QuEST`Gate`Z], 
                    Pattern[QuEST`Private`q, 
                    Blank[]]]]] :> ReplaceAll[
                    QuEST`Private`op[QuEST`Private`x], {
                    QuEST`Gate`X -> QuEST`Gate`Rx, QuEST`Gate`Y -> 
                    QuEST`Gate`Ry, QuEST`Gate`Z -> QuEST`Gate`Rz}]}]; 
               QuEST`Private`cols = 
                Replace[QuEST`Private`cols, {Pattern[QuEST`Private`g, 
                    Subscript[
                    Alternatives[QuEST`Gate`Rx, QuEST`Gate`Ry, QuEST`Gate`Rz], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]]][Pi] :> Sequence[
                    QuEST`Gate`G[3 (Pi/2)], 
                    ReplaceAll[
                    QuEST`Private`g, {
                    QuEST`Gate`Rx -> QuEST`Gate`X, QuEST`Gate`Ry -> 
                    QuEST`Gate`Y, QuEST`Gate`Rz -> QuEST`Gate`Z}]], 
                   QuEST`Gate`R[Pi, 
                    Pattern[QuEST`Private`op, 
                    Blank[Times]]] :> Sequence[
                    QuEST`Gate`G[3 (Pi/2)], 
                    Apply[Sequence, QuEST`Private`op]], 
                   Subscript[QuEST`Gate`Ph, 
                    Pattern[QuEST`Private`q, 
                    Blank[]]][Pi] :> Subscript[QuEST`Gate`Z, QuEST`Private`q],
                    Subscript[QuEST`Gate`Ph, 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]][Pi] :> Subscript[C, 
                    Apply[Sequence, 
                    Rest[{QuEST`Private`q}]]][
                    Subscript[QuEST`Gate`Z, 
                    First[{QuEST`Private`q}]]], Pattern[QuEST`Private`g, 
                    Subscript[
                    Alternatives[QuEST`Gate`Rx, QuEST`Gate`Ry, QuEST`Gate`Rz], 
                    Pattern[QuEST`Private`q, 
                    BlankSequence[]]]][2 Pi] :> QuEST`Gate`G[Pi], 
                   QuEST`Gate`R[2 Pi, 
                    Blank[Times]] :> QuEST`Gate`G[Pi]}, {2}]; 
               If[QuEST`Private`cols === Nothing, QuEST`Private`cols = {}]; 
               QuEST`Private`cols = QuEST`GetCircuitColumns[
                  QuEST`ExtractCircuit[QuEST`Private`cols]]; 
               QuEST`Private`cols]], QuEST`Private`initCols]; ReplaceAll[
            QuEST`ExtractCircuit[QuEST`Private`simpCols], {
            Subscript[QuEST`Gate`Ph, 
               Pattern[QuEST`Private`q, 
                Blank[]]][Pi/2] :> Subscript[QuEST`Gate`S, QuEST`Private`q], 
             Subscript[QuEST`Gate`Ph, 
               Pattern[QuEST`Private`q, 
                Blank[]]][Pi/4] :> 
             Subscript[QuEST`Gate`T, QuEST`Private`q]}]]], 
       QuEST`SimplifyCircuit[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`SimplifyCircuit]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`SimplifyCircuit"|>, False]]], "Output",
 CellChangeTimes->{3.865926459185729*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"aabc0f13-d2cd-4ce0-9bd9-85b19e2e16f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SimplifyCircuit", " ", "@", " ", 
  RowBox[{"Circuit", "[", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox["Ph", 
      RowBox[{"0", ",", "1"}]], "[", "x", "]"}], " ", 
    RowBox[{
     SubscriptBox["C", "1"], "[", 
     RowBox[{
      SubscriptBox["Ph", "0"], "[", "y", "]"}], "]"}], " ", 
    RowBox[{
     SubscriptBox["C", "0"], "[", 
     SubscriptBox["S", "1"], "]"}], " ", 
    RowBox[{
     SubscriptBox["C", "1"], "[", 
     SubscriptBox["T", "0"], "]"}]}], " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.86072576298701*^9, 3.860725796464033*^9}, {
  3.860727919100417*^9, 3.860727920530079*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"77a9db33-1ba2-4c1a-8bfd-369cd30daaa6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["Ph", 
    RowBox[{"0", ",", "1"}]], "[", 
   RowBox[{
    FractionBox[
     RowBox[{"3", " ", "\[Pi]"}], "4"], "+", "x", "+", "y"}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8659283860266933`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"3eccdbf1-b4e0-4caf-8091-07f3c555c701"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SimplifyCircuit", " ", "@", " ", 
  RowBox[{"Circuit", "[", "\[IndentingNewLine]", "\t", 
   RowBox[{
    SubscriptBox["hi", "0"], " ", 
    SubscriptBox["SWAP", 
     RowBox[{"1", ",", "2", " "}]], 
    SubscriptBox["H", "2"], 
    SubscriptBox["H", "0"], " ", 
    SubscriptBox["X", "1"], " ", 
    SubscriptBox["Y", "2"], " ", 
    SubscriptBox["Z", "3"], " ", 
    SubscriptBox["X", "1"], " ", 
    SubscriptBox["Y", "2"], " ", 
    SubscriptBox["H", 
     RowBox[{"2", " "}]], 
    SubscriptBox["Z", "3"], " ", 
    RowBox[{
     SubscriptBox["C", "1"], "[", 
     SubscriptBox["X", "0"], "]"}], 
    RowBox[{
     SubscriptBox["C", "2"], "[", 
     SubscriptBox["Y", "3"], "]"}], " ", 
    RowBox[{
     SubscriptBox["C", "2"], "[", 
     SubscriptBox["Y", "3"], "]"}], 
    RowBox[{
     SubscriptBox["C", "1"], "[", 
     SubscriptBox["X", "0"], "]"}], " ", 
    SubscriptBox["H", "0"], 
    SubscriptBox["SWAP", 
     RowBox[{"2", ",", "1"}]]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865928421365912*^9, 3.865928428887569*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"b3de9dd0-5ed3-4e05-aa72-fba66dd075a8"],

Cell[BoxData[
 RowBox[{"{", 
  SubscriptBox["hi", "0"], "}"}]], "Output",
 CellChangeTimes->{{3.865928421658381*^9, 3.865928431091011*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"79a984ef-ad66-4181-b454-7352e162d5aa"]
}, Open  ]],

Cell["\<\
Expect the number and nature of these simplifications to grow and improve as \
QuESTlink matures\
\>", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"ad49ab6b-f2b0-46e4-bfe8-bc86df83f6c9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"circ", " ", "=", " ", 
    RowBox[{"Circuit", "[", 
     RowBox[{
      SubscriptBox["Y", "0"], " ", 
      RowBox[{
       SubscriptBox["Ry", "0"], "[", "\[Pi]", "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", "1"], "[", "\[Pi]", "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"0", ",", "1", ",", "2", ",", "3"}]], "[", "\[Pi]", "]"}], 
      " ", 
      RowBox[{"R", "[", 
       RowBox[{"\[Pi]", ",", 
        RowBox[{
         SubscriptBox["X", "0"], 
         SubscriptBox["Y", "1"], 
         SubscriptBox["Z", "2"], 
         SubscriptBox["X", "3"]}]}], "]"}], " ", 
      RowBox[{"R", "[", 
       RowBox[{"eh", ",", " ", 
        SubscriptBox["X", "0"]}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Rx", "2"], "[", 
       RowBox[{"-", "\[Pi]"}], "]"}], "  ", 
      RowBox[{
       SubscriptBox["C", "0"], "[", 
       RowBox[{
        SubscriptBox["Rz", "2"], "[", "\[Pi]", "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", "1"], "[", 
       RowBox[{"R", "[", 
        RowBox[{"\[Phi]", ",", 
         SubscriptBox["Y", "0"]}], "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Rx", "0"], "[", "a", "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"0", ",", "1"}]], "[", "13", "]"}], " ", 
      RowBox[{
       SubscriptBox["Rx", "0"], "[", 
       RowBox[{"11", "\[Pi]"}], "]"}], " ", 
      RowBox[{"G", "[", "x", "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"2", ",", "1"}]], "[", 
       RowBox[{
        SubscriptBox["Rx", "0"], "[", 
        RowBox[{"11", "\[Pi]"}], "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"1", ",", "0"}]], "[", 
       RowBox[{"-", "\[Pi]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["U", 
        RowBox[{"2", ",", "1"}]], "[", 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"a", "b", "c", "d"},
          {"e", "f", "g", "h"},
          {"i", "j", "k", "l"},
          {"m", "n", "o", "p"}
         }], "\[NoBreak]", ")"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["U", 
        RowBox[{"2", ",", "1"}]], "[", 
       RowBox[{"Inverse", "@", 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"a", "b", "c", "d"},
           {"e", "f", "g", "h"},
           {"i", "j", "k", "l"},
           {"m", "n", "o", "p"}
          }], "\[NoBreak]", ")"}]}], "]"}], "  ", 
      RowBox[{
       SubscriptBox["U", "0"], "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", "b"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"c", ",", "d"}], "}"}]}], "}"}], "]"}], " ", 
      RowBox[{"G", "[", "z", "]"}], " ", 
      RowBox[{
       SubscriptBox["U", "0"], "[", 
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"e", "f"},
          {"g", "h"}
         }], "\[NoBreak]", ")"}], "]"}], " ", 
      SubscriptBox["H", "2"], " ", 
      RowBox[{"R", "[", 
       RowBox[{"3", ",", 
        RowBox[{
         SubscriptBox["X", "0"], 
         SubscriptBox["Y", "1"]}]}], "]"}], " ", 
      RowBox[{"R", "[", 
       RowBox[{"200", ",", 
        RowBox[{
         SubscriptBox["X", "0"], 
         SubscriptBox["Y", "1"]}]}], "]"}], " ", 
      RowBox[{"R", "[", 
       RowBox[{
        RowBox[{"-", "5"}], ",", 
        RowBox[{
         SubscriptBox["X", "0"], 
         SubscriptBox["Y", "1"]}]}], "]"}], "  ", 
      SubscriptBox["S", "2"], " ", 
      RowBox[{
       SubscriptBox["C", "3"], "[", 
       SubscriptBox["T", "2"], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"3", ",", "2"}]], "[", 
       RowBox[{
        SubscriptBox["Ph", 
         RowBox[{"1", ",", "0"}]], "[", "x", "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"2", ",", "1"}]], "[", 
       FractionBox["\[Pi]", "2"], "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"2", ",", "0"}]], "[", 
       FractionBox["\[Pi]", "4"], "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"0", ",", "2"}]], "[", 
       FractionBox["\[Pi]", "4"], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", "2"], "[", 
       RowBox[{
        SubscriptBox["Ph", "0"], "[", 
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"3", ",", "2", ",", "2"}]], "[", 
       RowBox[{
        SubscriptBox["Ry", "1"], "[", "e", "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"{", 
         RowBox[{"3", ",", "2"}], "}"}]], "[", 
       RowBox[{
        SubscriptBox["Ry", "1"], "[", "e", "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"0", ",", "2", ",", "1"}]], "[", 
       SubscriptBox["X", "3"], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", 
        RowBox[{"0", ",", "1", ",", "2"}]], "[", 
       SubscriptBox["X", "3"], "]"}], " ", 
      SubscriptBox["H", "1"], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"1", ",", "0"}]], "[", 
       FractionBox["\[Pi]", "2"], "]"}], " ", 
      SubscriptBox["H", "0"], " ", 
      SubscriptBox["SWAP", 
       RowBox[{"0", ",", "2"}]], " ", 
      SubscriptBox["SWAP", 
       RowBox[{"0", ",", "2"}]], " ", 
      SubscriptBox["H", "0"], " ", 
      RowBox[{"G", "[", "eh", "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"1", ",", "0"}]], "[", 
       RowBox[{"-", 
        FractionBox["\[Pi]", "2"]}], "]"}], " ", 
      SubscriptBox["H", "1"], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"2", ",", "0"}]], "[", 
       RowBox[{"-", 
        FractionBox["\[Pi]", "4"]}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Ph", 
        RowBox[{"2", ",", "1"}]], "[", 
       RowBox[{"-", 
        FractionBox["\[Pi]", "2"]}], "]"}], " ", 
      SubscriptBox["H", "2"]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", 
  RowBox[{"circ", ",", " ", 
   RowBox[{"ImageSize", " ", "->", " ", "600"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", 
  RowBox[{
   RowBox[{"SimplifyCircuit", "@", "circ"}], ",", " ", 
   RowBox[{"ImageSize", " ", "->", " ", "300"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.865928469715323*^9, 3.865928688626238*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"3ceb98d7-4ae4-45c1-a9fe-2e5b6466c2e6"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}]}, {
     LineBox[{{11, 0.5}, {12, 0.5}}], LineBox[{{11, 1.5}, {12, 1.5}}], 
     LineBox[{{11, 2.5}, {12, 2.5}}], LineBox[{{11, 3.5}, {12, 3.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}], LineBox[{{12, 3.5}, {13, 3.5}}]}, {
     LineBox[{{13, 0.5}, {14, 0.5}}], LineBox[{{13, 1.5}, {14, 1.5}}], 
     LineBox[{{13, 2.5}, {14, 2.5}}], LineBox[{{13, 3.5}, {14, 3.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}], LineBox[{{14, 3.5}, {15, 3.5}}]}, {
     LineBox[{{15, 0.5}, {16, 0.5}}], LineBox[{{15, 1.5}, {16, 1.5}}], 
     LineBox[{{15, 2.5}, {16, 2.5}}], LineBox[{{15, 3.5}, {16, 3.5}}]}, {
     LineBox[{{16, 0.5}, {17, 0.5}}], LineBox[{{16, 1.5}, {17, 1.5}}], 
     LineBox[{{16, 2.5}, {17, 2.5}}], LineBox[{{16, 3.5}, {17, 3.5}}]}, {
     LineBox[{{17, 0.5}, {18, 0.5}}], LineBox[{{17, 1.5}, {18, 1.5}}], 
     LineBox[{{17, 2.5}, {18, 2.5}}], LineBox[{{17, 3.5}, {18, 3.5}}]}, {
     LineBox[{{18, 0.5}, {19, 0.5}}], LineBox[{{18, 1.5}, {19, 1.5}}], 
     LineBox[{{18, 2.5}, {19, 2.5}}], LineBox[{{18, 3.5}, {19, 3.5}}]}, {
     LineBox[{{19, 0.5}, {20, 0.5}}], LineBox[{{19, 1.5}, {20, 1.5}}], 
     LineBox[{{19, 2.5}, {20, 2.5}}], LineBox[{{19, 3.5}, {20, 3.5}}]}, {
     LineBox[{{20, 0.5}, {21, 0.5}}], LineBox[{{20, 1.5}, {21, 1.5}}], 
     LineBox[{{20, 2.5}, {21, 2.5}}], LineBox[{{20, 3.5}, {21, 3.5}}]}, {
     LineBox[{{21, 0.5}, {22, 0.5}}], LineBox[{{21, 1.5}, {22, 1.5}}], 
     LineBox[{{21, 2.5}, {22, 2.5}}], LineBox[{{21, 3.5}, {22, 3.5}}]}, {
     LineBox[{{22, 0.5}, {23, 0.5}}], LineBox[{{22, 1.5}, {23, 1.5}}], 
     LineBox[{{22, 2.5}, {23, 2.5}}], LineBox[{{22, 3.5}, {23, 3.5}}]}, {
     LineBox[{{23, 0.5}, {24, 0.5}}], LineBox[{{23, 1.5}, {24, 1.5}}], 
     LineBox[{{23, 2.5}, {24, 2.5}}], LineBox[{{23, 3.5}, {24, 3.5}}]}, {
     LineBox[{{24, 0.5}, {25, 0.5}}], LineBox[{{24, 1.5}, {25, 1.5}}], 
     LineBox[{{24, 2.5}, {25, 2.5}}], LineBox[{{24, 3.5}, {25, 3.5}}]}, {
     LineBox[{{25, 0.5}, {26, 0.5}}], LineBox[{{25, 1.5}, {26, 1.5}}], 
     LineBox[{{25, 2.5}, {26, 2.5}}], LineBox[{{25, 3.5}, {26, 3.5}}]}, {
     LineBox[{{26, 0.5}, {27, 0.5}}], LineBox[{{26, 1.5}, {27, 1.5}}], 
     LineBox[{{26, 2.5}, {27, 2.5}}], LineBox[{{26, 3.5}, {27, 3.5}}]}, {
     LineBox[{{27, 0.5}, {28, 0.5}}], LineBox[{{27, 1.5}, {28, 1.5}}], 
     LineBox[{{27, 2.5}, {28, 2.5}}], LineBox[{{27, 3.5}, {28, 3.5}}]}, {
     LineBox[{{28, 0.5}, {29, 0.5}}], LineBox[{{28, 1.5}, {29, 1.5}}], 
     LineBox[{{28, 2.5}, {29, 2.5}}], LineBox[{{28, 3.5}, {29, 3.5}}]}, {
     LineBox[{{29, 0.5}, {30, 0.5}}], LineBox[{{29, 1.5}, {30, 1.5}}], 
     LineBox[{{29, 2.5}, {30, 2.5}}], LineBox[{{29, 3.5}, {30, 3.5}}]}, {
     LineBox[{{30, 0.5}, {31, 0.5}}], LineBox[{{30, 1.5}, {31, 1.5}}], 
     LineBox[{{30, 2.5}, {31, 2.5}}], LineBox[{{30, 3.5}, {31, 3.5}}]}, {
     LineBox[{{31, 0.5}, {32, 0.5}}], LineBox[{{31, 1.5}, {32, 1.5}}], 
     LineBox[{{31, 2.5}, {32, 2.5}}], LineBox[{{31, 3.5}, {32, 3.5}}]}, {
     LineBox[{{32, 0.5}, {33, 0.5}}], LineBox[{{32, 1.5}, {33, 1.5}}], 
     LineBox[{{32, 2.5}, {33, 2.5}}], LineBox[{{32, 3.5}, {33, 3.5}}]}, {
     LineBox[{{33, 0.5}, {34, 0.5}}], LineBox[{{33, 1.5}, {34, 1.5}}], 
     LineBox[{{33, 2.5}, {34, 2.5}}], LineBox[{{33, 3.5}, {34, 3.5}}]}, {
     LineBox[{{34, 0.5}, {35, 0.5}}], LineBox[{{34, 1.5}, {35, 1.5}}], 
     LineBox[{{34, 2.5}, {35, 2.5}}], LineBox[{{34, 3.5}, {35, 3.5}}]}, {
     LineBox[{{35, 0.5}, {36, 0.5}}], LineBox[{{35, 1.5}, {36, 1.5}}], 
     LineBox[{{35, 2.5}, {36, 2.5}}], LineBox[{{35, 3.5}, {36, 3.5}}]}, {
     LineBox[{{36, 0.5}, {37, 0.5}}], LineBox[{{36, 1.5}, {37, 1.5}}], 
     LineBox[{{36, 2.5}, {37, 2.5}}], LineBox[{{36, 3.5}, {37, 3.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Y\"\>", {0.5, 0.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{0.5, 1.5}, 0.1], 
      LineBox[{{0.5, 1.5}, {0.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {0.75, 1.75}]}, {
     RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {1.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{2.5, 0.5}, 0.1], DiskBox[{2.5, 1.5}, 0.1], 
       DiskBox[{2.5, 2.5}, 0.1], DiskBox[{2.5, 3.5}, 0.1]}, 
      LineBox[{{2.5, 0.5}, {2.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {2.75, 0.75}]}, {
     LineBox[{{3.5, 0.5}, {3.5, 3.5}}], {RectangleBox[{3.1, 0.1}, {3.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {3.5, 0.5}]}, {
      RectangleBox[{3.1, 3.1}, {3.9, 3.9}], 
      InsetBox["\<\"Rx\"\>", {3.5, 3.5}]}, {
      RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 1.5}]}, {
      RectangleBox[{3.1, 2.1}, {3.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 2.5}]}}, {
     LineBox[{{4.5, 0.5}, {4.5, 0.5}}], {RectangleBox[{4.1, 0.1}, {4.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {4.5, 0.5}]}}, {
     RectangleBox[{4.1, 2.1}, {4.9, 2.9}], 
     InsetBox["\<\"Rx\"\>", {4.5, 2.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{5.5, 0.5}, 0.1], 
      LineBox[{{5.5, 0.5}, {5.5, 2.5}}]}, {
      RectangleBox[{5.1, 2.1}, {5.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {5.5, 2.5}]}}, {
     {FaceForm[GrayLevel[0]], DiskBox[{6.5, 1.5}, 0.1], 
      LineBox[{{6.5, 0.5}, {6.5, 1.5}}]}, {
      LineBox[{{6.5, 0.5}, {6.5, 0.5}}], {
       RectangleBox[{6.1, 0.1}, {6.9, 0.9}], 
       InsetBox["\<\"Ry\"\>", {6.5, 0.5}]}}}, {
     RectangleBox[{7.1, 0.1}, {7.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {7.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{8.5, 0.5}, 0.1], DiskBox[{8.5, 1.5}, 0.1]}, 
      LineBox[{{8.5, 0.5}, {8.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {8.75, 0.75}]}, {
     RectangleBox[{9.1, 0.1}, {9.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {9.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{10.5, 2.5}, 0.1], DiskBox[{10.5, 1.5}, 0.1]}, 
      LineBox[{{10.5, 0.5}, {10.5, 2.5}}]}, {
      RectangleBox[{10.1, 0.1}, {10.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {10.5, 0.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{11.5, 1.5}, 0.1], DiskBox[{11.5, 0.5}, 0.1]}, 
      LineBox[{{11.5, 0.5}, {11.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {11.75, 0.75}]}, {
     RectangleBox[{12.1, 1.1}, {12.9, 2.9}], 
     InsetBox["\<\"U\"\>", {12.5, 2.}]}, {
     RectangleBox[{12.1, 0.1}, {12.9, 0.9}], 
     InsetBox["\<\"U\"\>", {12.5, 0.5}]}, {
     RectangleBox[{13.1, 1.1}, {13.9, 2.9}], 
     InsetBox["\<\"U\"\>", {13.5, 2.}]}, {
     RectangleBox[{13.1, 0.1}, {13.9, 0.9}], 
     InsetBox["\<\"U\"\>", {13.5, 0.5}]}, {
     RectangleBox[{14.1, 2.1}, {14.9, 2.9}], 
     InsetBox["\<\"H\"\>", {14.5, 2.5}]}, {
     LineBox[{{14.5, 0.5}, {14.5, 1.5}}], {
      RectangleBox[{14.1, 0.1}, {14.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {14.5, 0.5}]}, {
      RectangleBox[{14.1, 1.1}, {14.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {14.5, 1.5}]}}, {
     LineBox[{{15.5, 0.5}, {15.5, 1.5}}], {
      RectangleBox[{15.1, 0.1}, {15.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {15.5, 0.5}]}, {
      RectangleBox[{15.1, 1.1}, {15.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {15.5, 1.5}]}}, {
     RectangleBox[{15.1, 2.1}, {15.9, 2.9}], 
     InsetBox["\<\"S\"\>", {15.5, 2.5}]}, {
     LineBox[{{16.5, 0.5}, {16.5, 1.5}}], {
      RectangleBox[{16.1, 0.1}, {16.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {16.5, 0.5}]}, {
      RectangleBox[{16.1, 1.1}, {16.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {16.5, 1.5}]}}, {
     {FaceForm[GrayLevel[0]], DiskBox[{16.5, 3.5}, 0.1], 
      LineBox[{{16.5, 2.5}, {16.5, 3.5}}]}, {
      RectangleBox[{16.1, 2.1}, {16.9, 2.9}], 
      InsetBox["\<\"T\"\>", {16.5, 2.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{17.5, 3.5}, 0.1], DiskBox[{17.5, 2.5}, 0.1], 
       DiskBox[{17.5, 1.5}, 0.1], DiskBox[{17.5, 0.5}, 0.1]}, 
      LineBox[{{17.5, 0.5}, {17.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {17.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{18.5, 2.5}, 0.1], DiskBox[{18.5, 1.5}, 0.1]}, 
      LineBox[{{18.5, 1.5}, {18.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {18.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{19.5, 2.5}, 0.1], DiskBox[{19.5, 0.5}, 0.1]}, 
      LineBox[{{19.5, 0.5}, {19.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {19.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{20.5, 0.5}, 0.1], DiskBox[{20.5, 2.5}, 0.1]}, 
      LineBox[{{20.5, 0.5}, {20.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {20.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{21.5, 2.5}, 0.1], DiskBox[{21.5, 0.5}, 0.1]}, 
      LineBox[{{21.5, 0.5}, {21.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {21.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{22.5, 3.5}, 0.1], DiskBox[{22.5, 2.5}, 0.1], 
       DiskBox[{22.5, 2.5}, 0.1]}, LineBox[{{22.5, 1.5}, {22.5, 3.5}}]}, {
      RectangleBox[{22.1, 1.1}, {22.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {22.5, 1.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{23.5, 3.5}, 0.1], DiskBox[{23.5, 2.5}, 0.1]}, 
      LineBox[{{23.5, 1.5}, {23.5, 3.5}}]}, {
      RectangleBox[{23.1, 1.1}, {23.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {23.5, 1.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{24.5, 0.5}, 0.1], DiskBox[{24.5, 2.5}, 0.1], 
       DiskBox[{24.5, 1.5}, 0.1]}, LineBox[{{24.5, 0.5}, {24.5, 3.5}}]}, {
      CircleBox[{24.5, 3.5}, 0.25], 
      LineBox[{{24.5, 3.25}, {24.5, 3.75}}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{25.5, 0.5}, 0.1], DiskBox[{25.5, 1.5}, 0.1], 
       DiskBox[{25.5, 2.5}, 0.1]}, LineBox[{{25.5, 0.5}, {25.5, 3.5}}]}, {
      CircleBox[{25.5, 3.5}, 0.25], LineBox[{{25.5, 3.25}, {25.5, 3.75}}]}}, {
     RectangleBox[{26.1, 1.1}, {26.9, 1.9}], 
     InsetBox["\<\"H\"\>", {26.5, 1.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{27.5, 1.5}, 0.1], DiskBox[{27.5, 0.5}, 0.1]}, 
      LineBox[{{27.5, 0.5}, {27.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {27.75, 0.75}]}, {
     RectangleBox[{28.1, 0.1}, {28.9, 0.9}], 
     InsetBox["\<\"H\"\>", {28.5, 0.5}]}, {{{
       LineBox[{{29.4, 0.4}, {29.6, 0.6}}], 
       LineBox[{{29.6, 0.4}, {29.4, 0.6}}]}, {
       LineBox[{{29.4, 2.4}, {29.6, 2.6}}], 
       LineBox[{{29.6, 2.4}, {29.4, 2.6}}]}}, 
     LineBox[{{29.5, 0.5}, {29.5, 
      2.5}}]}, {{{LineBox[{{30.4, 0.4}, {30.6, 0.6}}], 
       LineBox[{{30.6, 0.4}, {30.4, 0.6}}]}, {
       LineBox[{{30.4, 2.4}, {30.6, 2.6}}], 
       LineBox[{{30.6, 2.4}, {30.4, 2.6}}]}}, 
     LineBox[{{30.5, 0.5}, {30.5, 2.5}}]}, {
     RectangleBox[{31.1, 0.1}, {31.9, 0.9}], 
     InsetBox["\<\"H\"\>", {31.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{32.5, 1.5}, 0.1], DiskBox[{32.5, 0.5}, 0.1]}, 
      LineBox[{{32.5, 0.5}, {32.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {32.75, 0.75}]}, {
     RectangleBox[{33.1, 1.1}, {33.9, 1.9}], 
     InsetBox["\<\"H\"\>", {33.5, 1.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{34.5, 2.5}, 0.1], DiskBox[{34.5, 0.5}, 0.1]}, 
      LineBox[{{34.5, 0.5}, {34.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {34.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{35.5, 2.5}, 0.1], DiskBox[{35.5, 1.5}, 0.1]}, 
      LineBox[{{35.5, 1.5}, {35.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {35.75, 1.75}]}, {
     RectangleBox[{36.1, 2.1}, {36.9, 2.9}], 
     InsetBox["\<\"H\"\>", {36.5, 2.5}]}}},
  ImageSize->600,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.865928655811544*^9, 3.865928688874098*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"0a269124-9f44-46bf-aed6-eca86a91a642"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}]}, {
     LineBox[{{11, 0.5}, {12, 0.5}}], LineBox[{{11, 1.5}, {12, 1.5}}], 
     LineBox[{{11, 2.5}, {12, 2.5}}], LineBox[{{11, 3.5}, {12, 3.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}], LineBox[{{12, 3.5}, {13, 3.5}}]}, {
     LineBox[{{13, 0.5}, {14, 0.5}}], LineBox[{{13, 1.5}, {14, 1.5}}], 
     LineBox[{{13, 2.5}, {14, 2.5}}], LineBox[{{13, 3.5}, {14, 3.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}], LineBox[{{14, 3.5}, {15, 3.5}}]}, {
     LineBox[{{15, 0.5}, {16, 0.5}}], LineBox[{{15, 1.5}, {16, 1.5}}], 
     LineBox[{{15, 2.5}, {16, 2.5}}], LineBox[{{15, 3.5}, {16, 3.5}}]}, {
     LineBox[{{16, 0.5}, {17, 0.5}}], LineBox[{{16, 1.5}, {17, 1.5}}], 
     LineBox[{{16, 2.5}, {17, 2.5}}], LineBox[{{16, 3.5}, {17, 3.5}}]}, {
     LineBox[{{17, 0.5}, {18, 0.5}}], LineBox[{{17, 1.5}, {18, 1.5}}], 
     LineBox[{{17, 2.5}, {18, 2.5}}], LineBox[{{17, 3.5}, {18, 3.5}}]}, {
     LineBox[{{18, 0.5}, {19, 0.5}}], LineBox[{{18, 1.5}, {19, 1.5}}], 
     LineBox[{{18, 2.5}, {19, 2.5}}], LineBox[{{18, 3.5}, {19, 3.5}}]}}, {{
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Z\"\>", {0.5, 1.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 1.5}, 0.1], DiskBox[{1.5, 2.5}, 0.1], 
       DiskBox[{1.5, 3.5}, 0.1], DiskBox[{1.5, 0.5}, 0.1]}, 
      LineBox[{{1.5, 0.5}, {1.5, 3.5}}]}, 
     LineBox[{{1.5, 1.5}, {1.5, 3.5}}]}, {
     RectangleBox[{2.1, 0.1}, {2.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {2.5, 0.5}]}, {CircleBox[{2.5, 3.5}, 0.25], 
     LineBox[{{2.5, 3.25}, {2.5, 3.75}}]}, {
     RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
     InsetBox["\<\"Y\"\>", {2.5, 1.5}]}, {
     RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
     InsetBox["\<\"Z\"\>", {2.5, 2.5}]}, {
     RectangleBox[{3.1, 2.1}, {3.9, 2.9}], 
     InsetBox["\<\"Rx\"\>", {3.5, 2.5}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{4.5, 0.5}, 0.1], 
      LineBox[{{4.5, 0.5}, {4.5, 2.5}}]}, {
      RectangleBox[{4.1, 2.1}, {4.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {4.5, 2.5}]}}, {
     {FaceForm[GrayLevel[0]], DiskBox[{5.5, 1.5}, 0.1], 
      LineBox[{{5.5, 0.5}, {5.5, 1.5}}]}, {
      RectangleBox[{5.1, 0.1}, {5.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {5.5, 0.5}]}}, {
     RectangleBox[{6.1, 0.1}, {6.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {6.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.5, 0.5}, 0.1], DiskBox[{7.5, 1.5}, 0.1]}, 
      LineBox[{{7.5, 0.5}, {7.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {7.75, 0.75}]}, {
     RectangleBox[{8.1, 0.1}, {8.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {8.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{9.5, 1.5}, 0.1], DiskBox[{9.5, 2.5}, 0.1]}, 
      LineBox[{{9.5, 0.5}, {9.5, 2.5}}]}, {
      RectangleBox[{9.1, 0.1}, {9.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {9.5, 0.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{10.5, 1.5}, 0.1], DiskBox[{10.5, 0.5}, 0.1]}, 
      LineBox[{{10.5, 0.5}, {10.5, 1.5}}]}, 
     LineBox[{{10.5, 1.5}, {10.5, 1.5}}]}, {
     RectangleBox[{10.1, 2.1}, {10.9, 2.9}], 
     InsetBox["\<\"H\"\>", {10.5, 2.5}]}, {
     RectangleBox[{11.1, 0.1}, {11.9, 0.9}], 
     InsetBox["\<\"U\"\>", {11.5, 0.5}]}, {
     RectangleBox[{11.1, 2.1}, {11.9, 2.9}], 
     InsetBox["\<\"S\"\>", {11.5, 2.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{12.5, 2.5}, 0.1], DiskBox[{12.5, 3.5}, 0.1]}, 
      LineBox[{{12.5, 2.5}, {12.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {12.75, 2.75}]}, {
     LineBox[{{12.5, 0.5}, {12.5, 1.5}}], {
      RectangleBox[{12.1, 0.1}, {12.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {12.5, 0.5}]}, {
      RectangleBox[{12.1, 1.1}, {12.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {12.5, 1.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{13.5, 0.5}, 0.1], DiskBox[{13.5, 1.5}, 0.1], 
       DiskBox[{13.5, 2.5}, 0.1], DiskBox[{13.5, 3.5}, 0.1]}, 
      LineBox[{{13.5, 0.5}, {13.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {13.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{14.5, 1.5}, 0.1], DiskBox[{14.5, 2.5}, 0.1]}, 
      LineBox[{{14.5, 1.5}, {14.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {14.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{15.5, 2.5}, 0.1], DiskBox[{15.5, 3.5}, 0.1]}, 
      LineBox[{{15.5, 1.5}, {15.5, 3.5}}]}, {
      RectangleBox[{15.1, 1.1}, {15.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {15.5, 1.5}]}}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{16.5, 0.5}, 0.1], DiskBox[{16.5, 2.5}, 0.1]}, 
      LineBox[{{16.5, 0.5}, {16.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {16.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{17.5, 1.5}, 0.1], DiskBox[{17.5, 2.5}, 0.1]}, 
      LineBox[{{17.5, 1.5}, {17.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {17.75, 1.75}]}, {
     RectangleBox[{18.1, 2.1}, {18.9, 2.9}], 
     InsetBox["\<\"H\"\>", {18.5, 2.5}]}}},
  ImageSize->300,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.865928655811544*^9, 3.8659286891807747`*^9}},
 CellLabel->"Out[41]=",ExpressionUUID->"5bea890d-f754-4c90-ab35-b6826c5cc24b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GetKnownCircuit", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}},
 CellTags->
  "GetKnownCircuit",ExpressionUUID->"5f591cdc-a4f2-489f-8391-1ce3cfe1e206"],

Cell[TextData[{
 StyleBox["GetKnownCircuit[]",
  FontWeight->"Bold"],
 " can dynamically generate canonical quantum circuits."
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"3f9ef4f6-2dcb-4ba8-97a2-ea9da79c8c83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetKnownCircuit"}]], "Input",
 CellChangeTimes->{{3.865926459971369*^9, 3.865926461389707*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"c9d3d1f0-70bb-4629-8817-159aa012a825"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetKnownCircuit[\\\"QFT\\\", \
qubits]\\nGetKnownCircuit[\\\"Trotter\\\", hamil, order, reps, time]\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    RowBox[{"\"QFT\"", ",", "QuEST`Private`qubits_List"}], 
                    "]"}], ":=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["H", 
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`n", "\[RightDoubleBracket]"}]], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`n", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    RowBox[{"QuEST`Private`n", "-", "QuEST`Private`m"}], 
                    "\[RightDoubleBracket]"}]}]], "[", 
                    FractionBox["\[Pi]", 
                    SuperscriptBox["2", "QuEST`Private`m"]], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`m", ",", "1", ",", 
                    RowBox[{"QuEST`Private`n", "-", "1"}]}], "}"}]}], "]"}]}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`n", ",", 
                    RowBox[{"Length", "[", "QuEST`Private`qubits", "]"}], ",",
                     "1", ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    SubscriptBox["SWAP", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`q", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "QuEST`Private`q"}], 
                    "\[RightDoubleBracket]"}]}]], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`q", ",", "1", ",", 
                    RowBox[{"Floor", "[", 
                    FractionBox[
                    RowBox[{"Length", "[", "QuEST`Private`qubits", "]"}], 
                    "2"], "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}]}, {" "}, {
                   
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"QFT\"", ",", "QuEST`Private`numQubits_Integer"}], 
                    "]"}], ":=", 
                    RowBox[{"GetKnownCircuit", "[", 
                    RowBox[{"\"QFT\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"Trotter\"", ",", "QuEST`Private`hamil_", ",", 
                    "QuEST`Private`order_Integer", ",", 
                    "QuEST`Private`reps_Integer", ",", 
                    "QuEST`Private`time_"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"QuEST`Private`order", "\[GreaterEqual]", "1"}], 
                    "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"QuEST`Private`order", "===", "1"}], "||", 
                    RowBox[{"EvenQ", "[", "QuEST`Private`order", "]"}]}], 
                    ")"}], "&&", 
                    
                    RowBox[{
                    "QuEST`Private`reps", "\[GreaterEqual]", "1"}]}]}], ":=", 
                    
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`terms", "=", 
                    
                    RowBox[{"QuEST`Private`separateTermsOfPauliHamil", "[", 
                    "QuEST`Private`hamil", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`gates", "=", 
                    RowBox[{"Apply", "[", 
                    RowBox[{"R", ",", 
                    RowBox[{"QuEST`Private`getTrotterTerms", "[", 
                    
                    RowBox[{"QuEST`Private`terms", ",", "QuEST`Private`order",
                     ",", "QuEST`Private`reps", ",", "QuEST`Private`time"}], 
                    "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"QuEST`Private`gates", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"_", ",", 
                    SubscriptBox["Id", "_Integer"]}], "]"}], "\[RuleDelayed]",
                     "Nothing"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetKnownCircuit\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetKnownCircuit[\\\"QFT\\\", \
qubits]\\nGetKnownCircuit[\\\"Trotter\\\", hamil, order, reps, time]\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetKnownCircuit[\"QFT\", qubits]\nGetKnownCircuit[\"Trotter\", hamil, \
order, reps, time]", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetKnownCircuit, {QuEST`GetKnownCircuit["QFT", 
         Pattern[QuEST`Private`qubits, 
          Blank[List]]] :> Flatten[{
          Table[{
            Subscript[QuEST`Gate`H, 
             Part[QuEST`Private`qubits, QuEST`Private`n]], 
            Table[
             Subscript[QuEST`Gate`Ph, 
              Part[QuEST`Private`qubits, QuEST`Private`n], 
              Part[QuEST`Private`qubits, QuEST`Private`n - QuEST`Private`m]][
             Pi/2^QuEST`Private`m], {
             QuEST`Private`m, 1, QuEST`Private`n - 1}]}, {QuEST`Private`n, 
            Length[QuEST`Private`qubits], 1, -1}], 
          Table[
           Subscript[QuEST`Gate`SWAP, 
            Part[QuEST`Private`qubits, QuEST`Private`q], 
            Part[QuEST`Private`qubits, -QuEST`Private`q]], {
           QuEST`Private`q, 1, 
            Floor[Length[QuEST`Private`qubits]/2]}]}], 
       QuEST`GetKnownCircuit["QFT", 
         Pattern[QuEST`Private`numQubits, 
          Blank[Integer]]] :> QuEST`GetKnownCircuit["QFT", 
         Range[0, QuEST`Private`numQubits - 1]], Condition[
         QuEST`GetKnownCircuit["Trotter", 
          Pattern[QuEST`Private`hamil, 
           Blank[]], 
          Pattern[QuEST`Private`order, 
           Blank[Integer]], 
          Pattern[QuEST`Private`reps, 
           Blank[Integer]], 
          Pattern[QuEST`Private`time, 
           Blank[]]], 
         And[QuEST`Private`order >= 1, 
          Or[QuEST`Private`order === 1, 
           EvenQ[QuEST`Private`order]], QuEST`Private`reps >= 1]] :> 
       With[{QuEST`Private`terms = 
          QuEST`Private`separateTermsOfPauliHamil[QuEST`Private`hamil]}, {
         QuEST`Private`gates = Apply[QuEST`Gate`R, 
            QuEST`Private`getTrotterTerms[
            QuEST`Private`terms, QuEST`Private`order, QuEST`Private`reps, 
             QuEST`Private`time], {1}]}, 
         ReplaceAll[QuEST`Private`gates, QuEST`Gate`R[
            Blank[], 
            Subscript[QuEST`Gate`Id, 
             Blank[Integer]]] :> Nothing]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetKnownCircuit"|>, False]]], "Output",
 CellChangeTimes->{{3.865926461656674*^9, 3.865926469034959*^9}},
 CellLabel->"Out[6]=",ExpressionUUID->"4dd12123-4e04-4f04-a633-65bf4f4f2bca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", " ", "@", " ", 
  RowBox[{"GetKnownCircuit", "[", 
   RowBox[{"\"\<QFT\>\"", ",", " ", "5"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.86592882777787*^9, 3.86592884172443*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"794a377e-470d-4fc3-9e3d-3d37302fb4db"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}], 
     LineBox[{{0, 4.5}, {1, 4.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}], 
     LineBox[{{1, 3.5}, {2, 3.5}}], LineBox[{{1, 4.5}, {2, 4.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}], 
     LineBox[{{2, 4.5}, {3, 4.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}], 
     LineBox[{{3, 3.5}, {4, 3.5}}], LineBox[{{3, 4.5}, {4, 4.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}], 
     LineBox[{{4, 4.5}, {5, 4.5}}]}, {LineBox[{{5, 0.5}, {6, 0.5}}], 
     LineBox[{{5, 1.5}, {6, 1.5}}], LineBox[{{5, 2.5}, {6, 2.5}}], 
     LineBox[{{5, 3.5}, {6, 3.5}}], LineBox[{{5, 4.5}, {6, 4.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}], 
     LineBox[{{6, 4.5}, {7, 4.5}}]}, {LineBox[{{7, 0.5}, {8, 0.5}}], 
     LineBox[{{7, 1.5}, {8, 1.5}}], LineBox[{{7, 2.5}, {8, 2.5}}], 
     LineBox[{{7, 3.5}, {8, 3.5}}], LineBox[{{7, 4.5}, {8, 4.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}], 
     LineBox[{{8, 4.5}, {9, 4.5}}]}, {LineBox[{{9, 0.5}, {10, 0.5}}], 
     LineBox[{{9, 1.5}, {10, 1.5}}], LineBox[{{9, 2.5}, {10, 2.5}}], 
     LineBox[{{9, 3.5}, {10, 3.5}}], LineBox[{{9, 4.5}, {10, 4.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}], 
     LineBox[{{10, 4.5}, {11, 4.5}}]}, {LineBox[{{11, 0.5}, {12, 0.5}}], 
     LineBox[{{11, 1.5}, {12, 1.5}}], LineBox[{{11, 2.5}, {12, 2.5}}], 
     LineBox[{{11, 3.5}, {12, 3.5}}], LineBox[{{11, 4.5}, {12, 4.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}], LineBox[{{12, 3.5}, {13, 3.5}}], 
     LineBox[{{12, 4.5}, {13, 4.5}}]}, {LineBox[{{13, 0.5}, {14, 0.5}}], 
     LineBox[{{13, 1.5}, {14, 1.5}}], LineBox[{{13, 2.5}, {14, 2.5}}], 
     LineBox[{{13, 3.5}, {14, 3.5}}], LineBox[{{13, 4.5}, {14, 4.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}], LineBox[{{14, 3.5}, {15, 3.5}}], 
     LineBox[{{14, 4.5}, {15, 4.5}}]}, {LineBox[{{15, 0.5}, {16, 0.5}}], 
     LineBox[{{15, 1.5}, {16, 1.5}}], LineBox[{{15, 2.5}, {16, 2.5}}], 
     LineBox[{{15, 3.5}, {16, 3.5}}], LineBox[{{15, 4.5}, {16, 4.5}}]}}, {{
     RectangleBox[{0.1, 4.1}, {0.9, 4.9}], 
     InsetBox["\<\"H\"\>", {0.5, 4.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 4.5}, 0.1], DiskBox[{1.5, 3.5}, 0.1]}, 
      LineBox[{{1.5, 3.5}, {1.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {1.75, 3.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{2.5, 4.5}, 0.1], DiskBox[{2.5, 2.5}, 0.1]}, 
      LineBox[{{2.5, 2.5}, {2.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {2.75, 2.75}]}, {
     RectangleBox[{3.1, 3.1}, {3.9, 3.9}], 
     InsetBox["\<\"H\"\>", {3.5, 3.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 4.5}, 0.1], DiskBox[{4.5, 1.5}, 0.1]}, 
      LineBox[{{4.5, 1.5}, {4.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {4.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{5.5, 3.5}, 0.1], DiskBox[{5.5, 2.5}, 0.1]}, 
      LineBox[{{5.5, 2.5}, {5.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {5.75, 2.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{6.5, 4.5}, 0.1], DiskBox[{6.5, 0.5}, 0.1]}, 
      LineBox[{{6.5, 0.5}, {6.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {6.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.5, 3.5}, 0.1], DiskBox[{7.5, 1.5}, 0.1]}, 
      LineBox[{{7.5, 1.5}, {7.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {7.75, 1.75}]}, {
     RectangleBox[{8.1, 2.1}, {8.9, 2.9}], 
     InsetBox["\<\"H\"\>", {8.5, 2.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{9.5, 3.5}, 0.1], DiskBox[{9.5, 0.5}, 0.1]}, 
      LineBox[{{9.5, 0.5}, {9.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {9.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{10.5, 2.5}, 0.1], DiskBox[{10.5, 1.5}, 0.1]}, 
      LineBox[{{10.5, 1.5}, {10.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {10.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{11.5, 2.5}, 0.1], DiskBox[{11.5, 0.5}, 0.1]}, 
      LineBox[{{11.5, 0.5}, {11.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {11.75, 0.75}]}, {
     RectangleBox[{12.1, 1.1}, {12.9, 1.9}], 
     InsetBox["\<\"H\"\>", {12.5, 1.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{13.5, 1.5}, 0.1], DiskBox[{13.5, 0.5}, 0.1]}, 
      LineBox[{{13.5, 0.5}, {13.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {13.75, 0.75}]}, {
     RectangleBox[{14.1, 0.1}, {14.9, 0.9}], 
     InsetBox["\<\"H\"\>", {14.5, 0.5}]}, {{{
       LineBox[{{14.4, 1.4}, {14.6, 1.6}}], 
       LineBox[{{14.6, 1.4}, {14.4, 1.6}}]}, {
       LineBox[{{14.4, 3.4}, {14.6, 3.6}}], 
       LineBox[{{14.6, 3.4}, {14.4, 3.6}}]}}, 
     LineBox[{{14.5, 1.5}, {14.5, 
      3.5}}]}, {{{LineBox[{{15.4, 0.4}, {15.6, 0.6}}], 
       LineBox[{{15.6, 0.4}, {15.4, 0.6}}]}, {
       LineBox[{{15.4, 4.4}, {15.6, 4.6}}], 
       LineBox[{{15.6, 4.4}, {15.4, 4.6}}]}}, 
     LineBox[{{15.5, 0.5}, {15.5, 4.5}}]}}},
  ImageSize->510,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.86592883113026*^9, 3.865928841955455*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"922eca1a-8224-4dda-b1f8-bae6dd1bcd14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", " ", "@", " ", 
  RowBox[{"GetKnownCircuit", "[", 
   RowBox[{"\"\<QFT\>\"", ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "3", ",", "5", ",", "2", ",", "4"}], "}"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.8659288488932943`*^9, 3.865928853258353*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"98860a16-3dac-4527-b65f-ad71f86271da"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}], 
     LineBox[{{0, 4.5}, {1, 4.5}}], LineBox[{{0, 5.5}, {1, 5.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}], 
     LineBox[{{1, 4.5}, {2, 4.5}}], LineBox[{{1, 5.5}, {2, 5.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}], 
     LineBox[{{2, 4.5}, {3, 4.5}}], LineBox[{{2, 5.5}, {3, 5.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}], 
     LineBox[{{3, 4.5}, {4, 4.5}}], LineBox[{{3, 5.5}, {4, 5.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}], 
     LineBox[{{4, 4.5}, {5, 4.5}}], LineBox[{{4, 5.5}, {5, 5.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}], 
     LineBox[{{5, 4.5}, {6, 4.5}}], LineBox[{{5, 5.5}, {6, 5.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}], 
     LineBox[{{6, 4.5}, {7, 4.5}}], LineBox[{{6, 5.5}, {7, 5.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}], 
     LineBox[{{7, 4.5}, {8, 4.5}}], LineBox[{{7, 5.5}, {8, 5.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}], 
     LineBox[{{8, 4.5}, {9, 4.5}}], LineBox[{{8, 5.5}, {9, 5.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}], 
     LineBox[{{9, 4.5}, {10, 4.5}}], LineBox[{{9, 5.5}, {10, 5.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}], 
     LineBox[{{10, 4.5}, {11, 4.5}}], LineBox[{{10, 5.5}, {11, 5.5}}]}, {
     LineBox[{{11, 0.5}, {12, 0.5}}], LineBox[{{11, 1.5}, {12, 1.5}}], 
     LineBox[{{11, 2.5}, {12, 2.5}}], LineBox[{{11, 3.5}, {12, 3.5}}], 
     LineBox[{{11, 4.5}, {12, 4.5}}], LineBox[{{11, 5.5}, {12, 5.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}], LineBox[{{12, 3.5}, {13, 3.5}}], 
     LineBox[{{12, 4.5}, {13, 4.5}}], LineBox[{{12, 5.5}, {13, 5.5}}]}, {
     LineBox[{{13, 0.5}, {14, 0.5}}], LineBox[{{13, 1.5}, {14, 1.5}}], 
     LineBox[{{13, 2.5}, {14, 2.5}}], LineBox[{{13, 3.5}, {14, 3.5}}], 
     LineBox[{{13, 4.5}, {14, 4.5}}], LineBox[{{13, 5.5}, {14, 5.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}], LineBox[{{14, 3.5}, {15, 3.5}}], 
     LineBox[{{14, 4.5}, {15, 4.5}}], LineBox[{{14, 5.5}, {15, 5.5}}]}, {
     LineBox[{{15, 0.5}, {16, 0.5}}], LineBox[{{15, 1.5}, {16, 1.5}}], 
     LineBox[{{15, 2.5}, {16, 2.5}}], LineBox[{{15, 3.5}, {16, 3.5}}], 
     LineBox[{{15, 4.5}, {16, 4.5}}], LineBox[{{15, 5.5}, {16, 5.5}}]}, {
     LineBox[{{16, 0.5}, {17, 0.5}}], LineBox[{{16, 1.5}, {17, 1.5}}], 
     LineBox[{{16, 2.5}, {17, 2.5}}], LineBox[{{16, 3.5}, {17, 3.5}}], 
     LineBox[{{16, 4.5}, {17, 4.5}}], LineBox[{{16, 5.5}, {17, 5.5}}]}, {
     LineBox[{{17, 0.5}, {18, 0.5}}], LineBox[{{17, 1.5}, {18, 1.5}}], 
     LineBox[{{17, 2.5}, {18, 2.5}}], LineBox[{{17, 3.5}, {18, 3.5}}], 
     LineBox[{{17, 4.5}, {18, 4.5}}], LineBox[{{17, 5.5}, {18, 5.5}}]}, {
     LineBox[{{18, 0.5}, {19, 0.5}}], LineBox[{{18, 1.5}, {19, 1.5}}], 
     LineBox[{{18, 2.5}, {19, 2.5}}], LineBox[{{18, 3.5}, {19, 3.5}}], 
     LineBox[{{18, 4.5}, {19, 4.5}}], LineBox[{{18, 5.5}, {19, 5.5}}]}}, {{
     RectangleBox[{0.1, 4.1}, {0.9, 4.9}], 
     InsetBox["\<\"H\"\>", {0.5, 4.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{1.5, 4.5}, 0.1], DiskBox[{1.5, 2.5}, 0.1]}, 
      LineBox[{{1.5, 2.5}, {1.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {1.75, 2.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{2.5, 4.5}, 0.1], DiskBox[{2.5, 5.5}, 0.1]}, 
      LineBox[{{2.5, 4.5}, {2.5, 5.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {2.75, 4.75}]}, {
     RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
     InsetBox["\<\"H\"\>", {2.5, 2.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{3.5, 4.5}, 0.1], DiskBox[{3.5, 3.5}, 0.1]}, 
      LineBox[{{3.5, 3.5}, {3.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {3.75, 3.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 2.5}, 0.1], DiskBox[{4.5, 5.5}, 0.1]}, 
      LineBox[{{4.5, 2.5}, {4.5, 5.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {4.75, 2.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{5.5, 4.5}, 0.1], DiskBox[{5.5, 0.5}, 0.1]}, 
      LineBox[{{5.5, 0.5}, {5.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {5.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{6.5, 2.5}, 0.1], DiskBox[{6.5, 3.5}, 0.1]}, 
      LineBox[{{6.5, 2.5}, {6.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {6.75, 2.75}]}, {
     RectangleBox[{6.1, 5.1}, {6.9, 5.9}], 
     InsetBox["\<\"H\"\>", {6.5, 5.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.5, 4.5}, 0.1], DiskBox[{7.5, 1.5}, 0.1]}, 
      LineBox[{{7.5, 1.5}, {7.5, 4.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {7.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{8.5, 2.5}, 0.1], DiskBox[{8.5, 0.5}, 0.1]}, 
      LineBox[{{8.5, 0.5}, {8.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {8.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{8.5, 5.5}, 0.1], DiskBox[{8.5, 3.5}, 0.1]}, 
      LineBox[{{8.5, 3.5}, {8.5, 5.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {8.75, 3.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{9.5, 2.5}, 0.1], DiskBox[{9.5, 1.5}, 0.1]}, 
      LineBox[{{9.5, 1.5}, {9.5, 2.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {9.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{10.5, 5.5}, 0.1], DiskBox[{10.5, 0.5}, 0.1]}, 
      LineBox[{{10.5, 0.5}, {10.5, 5.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {10.75, 0.75}]}, {
     RectangleBox[{11.1, 3.1}, {11.9, 3.9}], 
     InsetBox["\<\"H\"\>", {11.5, 3.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{12.5, 5.5}, 0.1], DiskBox[{12.5, 1.5}, 0.1]}, 
      LineBox[{{12.5, 1.5}, {12.5, 5.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {12.75, 1.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{13.5, 3.5}, 0.1], DiskBox[{13.5, 0.5}, 0.1]}, 
      LineBox[{{13.5, 0.5}, {13.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {13.75, 0.75}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{14.5, 3.5}, 0.1], DiskBox[{14.5, 1.5}, 0.1]}, 
      LineBox[{{14.5, 1.5}, {14.5, 3.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {14.75, 1.75}]}, {
     RectangleBox[{14.1, 0.1}, {14.9, 0.9}], 
     InsetBox["\<\"H\"\>", {14.5, 0.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{15.5, 0.5}, 0.1], DiskBox[{15.5, 1.5}, 0.1]}, 
      LineBox[{{15.5, 0.5}, {15.5, 1.5}}]}, 
     InsetBox["\<\"\[Theta]\"\>", {15.75, 0.75}]}, {{{
       LineBox[{{15.4, 3.4}, {15.6, 3.6}}], 
       LineBox[{{15.6, 3.4}, {15.4, 3.6}}]}, {
       LineBox[{{15.4, 5.4}, {15.6, 5.6}}], 
       LineBox[{{15.6, 5.4}, {15.4, 5.6}}]}}, 
     LineBox[{{15.5, 3.5}, {15.5, 5.5}}]}, {
     RectangleBox[{16.1, 1.1}, {16.9, 1.9}], 
     InsetBox["\<\"H\"\>", {16.5, 1.5}]}, {{{
       LineBox[{{17.4, 0.4}, {17.6, 0.6}}], 
       LineBox[{{17.6, 0.4}, {17.4, 0.6}}]}, {
       LineBox[{{17.4, 2.4}, {17.6, 2.6}}], 
       LineBox[{{17.6, 2.4}, {17.4, 2.6}}]}}, 
     LineBox[{{17.5, 0.5}, {17.5, 
      2.5}}]}, {{{LineBox[{{18.4, 1.4}, {18.6, 1.6}}], 
       LineBox[{{18.6, 1.4}, {18.4, 1.6}}]}, {
       LineBox[{{18.4, 4.4}, {18.6, 4.6}}], 
       LineBox[{{18.6, 4.4}, {18.4, 4.6}}]}}, 
     LineBox[{{18.5, 1.5}, {18.5, 4.5}}]}}},
  ImageSize->600,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.86592885370266*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"e0b1ae9e-0fff-4634-82e8-902a14c65189"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"GetKnownCircuit", "[", 
  RowBox[{"\"\<Trotter\>\"", ",", " ", 
   RowBox[{
    RowBox[{"a", " ", 
     SubscriptBox["X", "0"]}], "+", 
    RowBox[{"b", " ", 
     SubscriptBox["Y", "0"], 
     SubscriptBox["Y", "1"], 
     SubscriptBox["Z", "2"]}], " ", "+", " ", 
    RowBox[{"c", " ", 
     SubscriptBox["Z", "0"], 
     SubscriptBox["X", "2"]}]}], ",", " ", "2", ",", " ", "2", ",", " ", 
   "t"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.865928860905374*^9, 3.8659289338828983`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"70d7f130-7613-4532-9db9-f3d0e0afff64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "t"}], "4"], ",", 
     SubscriptBox["X", "0"]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"c", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["X", "2"], " ", 
      SubscriptBox["Z", "0"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"b", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["Y", "0"], " ", 
      SubscriptBox["Y", "1"], " ", 
      SubscriptBox["Z", "2"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"b", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["Y", "0"], " ", 
      SubscriptBox["Y", "1"], " ", 
      SubscriptBox["Z", "2"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"c", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["X", "2"], " ", 
      SubscriptBox["Z", "0"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "t"}], "4"], ",", 
     SubscriptBox["X", "0"]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "t"}], "4"], ",", 
     SubscriptBox["X", "0"]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"c", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["X", "2"], " ", 
      SubscriptBox["Z", "0"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"b", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["Y", "0"], " ", 
      SubscriptBox["Y", "1"], " ", 
      SubscriptBox["Z", "2"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"b", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["Y", "0"], " ", 
      SubscriptBox["Y", "1"], " ", 
      SubscriptBox["Z", "2"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"c", " ", "t"}], "4"], ",", 
     RowBox[{
      SubscriptBox["X", "2"], " ", 
      SubscriptBox["Z", "0"]}]}], "]"}], ",", 
   RowBox[{"R", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"a", " ", "t"}], "4"], ",", 
     SubscriptBox["X", "0"]}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.86592889487985*^9, 3.865928934073007*^9}},
 CellLabel->"Out[57]=",ExpressionUUID->"2449e71d-0889-40ed-a741-491a497293d7"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}]}, {LineBox[{{5, 0.5}, {6, 0.5}}], 
     LineBox[{{5, 1.5}, {6, 1.5}}], LineBox[{{5, 2.5}, {6, 2.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}]}, {LineBox[{{7, 0.5}, {8, 0.5}}], 
     LineBox[{{7, 1.5}, {8, 1.5}}], LineBox[{{7, 2.5}, {8, 2.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}]}, {LineBox[{{9, 0.5}, {10, 0.5}}], 
     LineBox[{{9, 1.5}, {10, 1.5}}], LineBox[{{9, 2.5}, {10, 2.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}]}, {LineBox[{{11, 0.5}, {12, 0.5}}], 
     LineBox[{{11, 1.5}, {12, 1.5}}], LineBox[{{11, 2.5}, {12, 2.5}}]}}, {{
     LineBox[{{0.5, 0.5}, {0.5, 0.5}}], {RectangleBox[{0.1, 0.1}, {0.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {0.5, 0.5}]}}, {
     LineBox[{{1.5, 0.5}, {1.5, 2.5}}], {RectangleBox[{1.1, 2.1}, {1.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {1.5, 2.5}]}, {
      RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {1.5, 0.5}]}}, {
     LineBox[{{2.5, 0.5}, {2.5, 2.5}}], {RectangleBox[{2.1, 0.1}, {2.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {2.5, 0.5}]}, {
      RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {2.5, 1.5}]}, {
      RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {2.5, 2.5}]}}, {
     LineBox[{{3.5, 0.5}, {3.5, 2.5}}], {RectangleBox[{3.1, 0.1}, {3.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {3.5, 0.5}]}, {
      RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 1.5}]}, {
      RectangleBox[{3.1, 2.1}, {3.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 2.5}]}}, {
     LineBox[{{4.5, 0.5}, {4.5, 2.5}}], {RectangleBox[{4.1, 2.1}, {4.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {4.5, 2.5}]}, {
      RectangleBox[{4.1, 0.1}, {4.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {4.5, 0.5}]}}, {
     LineBox[{{5.5, 0.5}, {5.5, 0.5}}], {RectangleBox[{5.1, 0.1}, {5.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {5.5, 0.5}]}}, {
     LineBox[{{6.5, 0.5}, {6.5, 0.5}}], {RectangleBox[{6.1, 0.1}, {6.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {6.5, 0.5}]}}, {
     LineBox[{{7.5, 0.5}, {7.5, 2.5}}], {RectangleBox[{7.1, 2.1}, {7.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {7.5, 2.5}]}, {
      RectangleBox[{7.1, 0.1}, {7.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {7.5, 0.5}]}}, {
     LineBox[{{8.5, 0.5}, {8.5, 2.5}}], {RectangleBox[{8.1, 0.1}, {8.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {8.5, 0.5}]}, {
      RectangleBox[{8.1, 1.1}, {8.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {8.5, 1.5}]}, {
      RectangleBox[{8.1, 2.1}, {8.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {8.5, 2.5}]}}, {
     LineBox[{{9.5, 0.5}, {9.5, 2.5}}], {RectangleBox[{9.1, 0.1}, {9.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {9.5, 0.5}]}, {
      RectangleBox[{9.1, 1.1}, {9.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {9.5, 1.5}]}, {
      RectangleBox[{9.1, 2.1}, {9.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {9.5, 2.5}]}}, {
     LineBox[{{10.5, 0.5}, {10.5, 2.5}}], {
      RectangleBox[{10.1, 2.1}, {10.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {10.5, 2.5}]}, {
      RectangleBox[{10.1, 0.1}, {10.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {10.5, 0.5}]}}, {
     LineBox[{{11.5, 0.5}, {11.5, 0.5}}], {
      RectangleBox[{11.1, 0.1}, {11.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {11.5, 0.5}]}}}},
  ImageSize->390,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.86592889487985*^9, 3.865928934078558*^9}},
 CellLabel->"Out[58]=",ExpressionUUID->"740c6e8b-195b-4ac2-8f82-f3b3d5c67e5e"]
}, Open  ]],

Cell["\<\
We expect this family of circuits to quickly grow and include canonical \
variational circuits.\
\>", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"2d39ae47-7752-469c-b40e-01a3b534227c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcCircuitMatrix", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}},
 CellTags->
  "CalcCircuitMatrix",ExpressionUUID->"2673500d-91ed-439c-9ceb-45d5c8f97387"],

Cell[TextData[{
 StyleBox["CalcCircuitMatrix[]",
  FontWeight->"Bold"],
 " can now analytically evaluate ",
 StyleBox["channels",
  FontSlant->"Italic"],
 "!"
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"9ca81c5d-ad4b-413b-9f85-49f7d23dc914"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcCircuitMatrix"}]], "Input",
 CellChangeTimes->{{3.865926481234316*^9, 3.8659264849740467`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"3078f96d-dfe1-480b-8faf-3b53794aae9b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcCircuitMatrix[circuit] returns an analytic \
matrix for the given unitary circuit, which may contain symbolic parameters. \
The number of qubits is inferred from the circuit indices (0 to maximum \
specified).\\nCalcCircuitMatrix[circuit] returns an analytic superoperator \
for the given non-unitary circuit, expressed as a matrix upon twice as many \
qubits. The result can be multiplied upon a column-flattened density \
matrix.\\nCalcCircuitMatrix[circuit, numQubits] forces the number of present \
qubits.\\nCalcCircuitMatrix accepts optional argument AsSuperoperator->True \
to obtain a superoperator from a unitary circuit.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"CalcCircuitMatrix", "[", 
                    
                    RowBox[{
                    "QuEST`Private`gates_List", ",", 
                    "QuEST`Private`numQb_Integer", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"QuEST`Private`gates", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    
                    RowBox[{"Damp", "|", "Deph", "|", "Depol", "|", "Kraus", 
                    "|", "KrausNonTP"}], "__"], ")"}], "[", "__", "]"}]}], 
                    "]"}]}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "AsSuperoperator", "]"}], 
                    "=!=", "True"}], "&&", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "AsSuperoperator", "]"}], 
                    "=!=", "Automatic"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcCircuitMatrix", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"The input circuit contains decoherence channels and \
must be calculated as a superoperator.\""}], "]"}], ";", "$Failed"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`superops", "=", 
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    
                    RowBox[{"QuEST`Private`gates", ",", 
                    "QuEST`Private`numQb"}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`superops", "===", "$Failed"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcCircuitMatrix", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"Could not prepare superoperator, as per the above \
error.\""}], "]"}], ";", "$Failed"}], ",", 
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{"QuEST`Private`superops", ",", 
                    RowBox[{"2", " ", "QuEST`Private`numQb"}]}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcCircuitMatrix", "[", 
                    
                    RowBox[{
                    "QuEST`Private`gates_List", ",", 
                    "QuEST`Private`numQb_Integer", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"OptionValue", "[", "AsSuperoperator", "]"}], 
                    "===", "True"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`superops", "=", 
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    
                    RowBox[{"QuEST`Private`gates", ",", 
                    "QuEST`Private`numQb"}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`superops", "===", "$Failed"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcCircuitMatrix", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"Could not prepare superoperator, as per the above \
error.\""}], "]"}], ";", "$Failed"}], ",", 
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{"QuEST`Private`superops", ",", 
                    RowBox[{"2", " ", "QuEST`Private`numQb"}]}], "]"}]}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`matrices", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"QuEST`Private`getAnalFullMatrix", "[", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`getAnalGateControls", "[", "#1", 
                    "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`getAnalGateTargets", "[", "#1", 
                    "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`getAnalGateMatrix", "[", "#1", 
                    "]"}], ",", "QuEST`Private`numQb"}], "]"}], "&"}], ")"}], 
                    "/@", "QuEST`Private`gates"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    
                    RowBox[{"QuEST`Private`matrices", ",", 
                    "QuEST`Private`getAnalGateMatrix"}], "]"}], ",", 
                    RowBox[{"Dot", "@@", 
                    RowBox[{"Reverse", "[", "QuEST`Private`matrices", "]"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcCircuitMatrix", "::", "error"}], 
                    "MessageName"], ",", 
                    
                    RowBox[{
                    "\"Circuit contained an unrecognised or unsupported gate: \
\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"StandardForm", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"QuEST`Private`matrices", ",", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`getAnalGateMatrix", "[", 
                    "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    "QuEST`Private`g"}], ",", "\[Infinity]"}], "]"}], "]"}], 
                    "]"}], "]"}]}]}], "]"}], ";", "$Failed"}]}], "]"}]}], 
                    "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{"QuEST`Private`gates_List", ",", 
                    RowBox[{"QuEST`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{"QuEST`Private`gates", ",", 
                    
                    RowBox[{
                    "QuEST`Private`getNumQubitsInCircuit", "[", 
                    "QuEST`Private`gates", "]"}], ",", "QuEST`Private`opts"}],
                     "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{"QuEST`Private`gate_", ",", 
                    RowBox[{"QuEST`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"CalcCircuitMatrix", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`gate", "}"}], ",", 
                    "QuEST`Private`opts"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcCircuitMatrix", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", "CalcCircuitMatrix",
                     "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"AsSuperoperator", "\[Rule]", "Automatic"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`CalcCircuitMatrix\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcCircuitMatrix[circuit] returns an analytic \
matrix for the given unitary circuit, which may contain symbolic parameters. \
The number of qubits is inferred from the circuit indices (0 to maximum \
specified).\\nCalcCircuitMatrix[circuit] returns an analytic superoperator \
for the given non-unitary circuit, expressed as a matrix upon twice as many \
qubits. The result can be multiplied upon a column-flattened density \
matrix.\\nCalcCircuitMatrix[circuit, numQubits] forces the number of present \
qubits.\\nCalcCircuitMatrix accepts optional argument AsSuperoperator->True \
to obtain a superoperator from a unitary circuit.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "CalcCircuitMatrix[circuit] returns an analytic matrix for the given \
unitary circuit, which may contain symbolic parameters. The number of qubits \
is inferred from the circuit indices (0 to maximum specified).\n\
CalcCircuitMatrix[circuit] returns an analytic superoperator for the given \
non-unitary circuit, expressed as a matrix upon twice as many qubits. The \
result can be multiplied upon a column-flattened density matrix.\n\
CalcCircuitMatrix[circuit, numQubits] forces the number of present qubits.\n\
CalcCircuitMatrix accepts optional argument AsSuperoperator->True to obtain a \
superoperator from a unitary circuit.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`CalcCircuitMatrix, {Condition[
         QuEST`CalcCircuitMatrix[
          Pattern[QuEST`Private`gates, 
           Blank[List]], 
          Pattern[QuEST`Private`numQb, 
           Blank[Integer]], 
          OptionsPattern[]], 
         MemberQ[QuEST`Private`gates, 
          Subscript[
           Alternatives[
           QuEST`Gate`Damp, QuEST`Gate`Deph, QuEST`Gate`Depol, 
            QuEST`Gate`Kraus, QuEST`Gate`KrausNonTP], 
           BlankSequence[]][
           BlankSequence[]]]] :> If[
         And[
         OptionValue[QuEST`Option`AsSuperoperator] =!= True, 
          OptionValue[QuEST`Option`AsSuperoperator] =!= Automatic], Message[
           MessageName[QuEST`CalcCircuitMatrix, "error"], 
           "The input circuit contains decoherence channels and must be \
calculated as a superoperator."]; $Failed, 
         With[{
          QuEST`Private`superops = 
           QuEST`GetCircuitSuperoperator[
            QuEST`Private`gates, QuEST`Private`numQb]}, 
          If[QuEST`Private`superops === $Failed, Message[
             MessageName[QuEST`CalcCircuitMatrix, "error"], 
             "Could not prepare superoperator, as per the above error."]; \
$Failed, 
           QuEST`CalcCircuitMatrix[
           QuEST`Private`superops, 2 QuEST`Private`numQb]]]], 
       QuEST`CalcCircuitMatrix[
         Pattern[QuEST`Private`gates, 
          Blank[List]], 
         Pattern[QuEST`Private`numQb, 
          Blank[Integer]], 
         OptionsPattern[]] :> 
       If[OptionValue[QuEST`Option`AsSuperoperator] === True, 
         With[{
          QuEST`Private`superops = 
           QuEST`GetCircuitSuperoperator[
            QuEST`Private`gates, QuEST`Private`numQb]}, 
          If[QuEST`Private`superops === $Failed, Message[
             MessageName[QuEST`CalcCircuitMatrix, "error"], 
             "Could not prepare superoperator, as per the above error."]; \
$Failed, 
           QuEST`CalcCircuitMatrix[
           QuEST`Private`superops, 2 QuEST`Private`numQb]]], 
         With[{QuEST`Private`matrices = Map[QuEST`Private`getAnalFullMatrix[
              QuEST`Private`getAnalGateControls[#], 
              QuEST`Private`getAnalGateTargets[#], 
              QuEST`Private`getAnalGateMatrix[#], QuEST`Private`numQb]& , 
             QuEST`Private`gates]}, 
          If[
           FreeQ[QuEST`Private`matrices, QuEST`Private`getAnalGateMatrix], 
           Apply[Dot, 
            Reverse[QuEST`Private`matrices]], Message[
             MessageName[QuEST`CalcCircuitMatrix, "error"], 
             "Circuit contained an unrecognised or unsupported gate: " <> 
             ToString[
               StandardForm[
                First[
                 Cases[QuEST`Private`matrices, QuEST`Private`getAnalGateMatrix[
                    Pattern[QuEST`Private`g, 
                    Blank[]]] :> QuEST`Private`g, Infinity]]]]]; $Failed]]], 
       QuEST`CalcCircuitMatrix[
         Pattern[QuEST`Private`gates, 
          Blank[List]], 
         Pattern[QuEST`Private`opts, 
          OptionsPattern[]]] :> QuEST`CalcCircuitMatrix[QuEST`Private`gates, 
         QuEST`Private`getNumQubitsInCircuit[QuEST`Private`gates], 
         QuEST`Private`opts], QuEST`CalcCircuitMatrix[
         Pattern[QuEST`Private`gate, 
          Blank[]], 
         Pattern[QuEST`Private`opts, 
          OptionsPattern[]]] :> 
       QuEST`CalcCircuitMatrix[{QuEST`Private`gate}, QuEST`Private`opts], 
       QuEST`CalcCircuitMatrix[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`CalcCircuitMatrix]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {QuEST`Option`AsSuperoperator -> Automatic}, 
    "Attributes" -> {}, "FullName" -> "QuEST`CalcCircuitMatrix"|>, 
   False]]], "Output",
 CellChangeTimes->{3.865926487463994*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"efe52d87-74c6-49f2-b28b-8450a67bfa7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcCircuitMatrix", " ", "@", " ", 
  RowBox[{"Circuit", "[", " ", 
   RowBox[{
    SubscriptBox["Deph", "0"], "[", "\[Lambda]", "]"}], " ", "]"}]}]], "Input",\

 CellChangeTimes->{{3.865929054373621*^9, 3.865929078292642*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"39032c55-75a0-401d-875d-0540a01b6068"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Lambda]"}]], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox[
         RowBox[{"1", "-", "\[Lambda]"}]], "]"}]}], "+", 
      RowBox[{
       SqrtBox["\[Lambda]"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["\[Lambda]"], "]"}]}]}], ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Lambda]"}]], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox[
         RowBox[{"1", "-", "\[Lambda]"}]], "]"}]}], "-", 
      RowBox[{
       SqrtBox["\[Lambda]"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["\[Lambda]"], "]"}]}]}], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Lambda]"}]], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox[
         RowBox[{"1", "-", "\[Lambda]"}]], "]"}]}], "-", 
      RowBox[{
       SqrtBox["\[Lambda]"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["\[Lambda]"], "]"}]}]}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     RowBox[{
      RowBox[{
       SqrtBox[
        RowBox[{"1", "-", "\[Lambda]"}]], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox[
         RowBox[{"1", "-", "\[Lambda]"}]], "]"}]}], "+", 
      RowBox[{
       SqrtBox["\[Lambda]"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["\[Lambda]"], "]"}]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.865929062030129*^9, 3.865929078770535*^9}},
 CellLabel->"Out[64]=",ExpressionUUID->"e5726bd0-5f8b-49e0-809c-3b02a63d6f7b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"circ", " ", "=", " ", 
   RowBox[{"Circuit", "[", 
    RowBox[{
     SubscriptBox["H", "0"], 
     SubscriptBox["H", "1"], 
     SubscriptBox["H", "2"], 
     RowBox[{
      SubscriptBox["Depol", 
       RowBox[{"0", ",", "1"}]], "[", "a", "]"}], " ", 
     RowBox[{
      SubscriptBox["Deph", 
       RowBox[{"1", ",", "2"}]], "[", "b", "]"}], " ", 
     RowBox[{
      SubscriptBox["Damp", "0"], "[", "c", "]"}], 
     RowBox[{"R", "[", 
      RowBox[{"2", ",", 
       RowBox[{
        SubscriptBox["X", "0"], 
        SubscriptBox["Y", "1"], 
        SubscriptBox["Z", "2"]}]}], "]"}], " ", 
     RowBox[{
      SubscriptBox["KrausNonTP", "1"], "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"a", "b"},
           {"c", "d"}
          }], "\[NoBreak]", ")"}], ",", " ", 
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"b", "c"},
           {"c", "a"}
          }], "\[NoBreak]", ")"}]}], "}"}], "]"}], " ", 
     RowBox[{
      SubscriptBox["Deph", "0"], "[", "a", "]"}], 
     RowBox[{
      SubscriptBox["Depol", "2"], "[", "b", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "circ", "]"}]}], "Input",
 CellChangeTimes->{{3.865929132083666*^9, 3.865929290658627*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"643a2ca8-ac31-4a17-a413-9ae6943d31a4"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}]}}, {{RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"H\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"H\"\>", {0.5, 1.5}]}, {
     RectangleBox[{0.1, 2.1}, {0.9, 2.9}], InsetBox["\<\"H\"\>", {0.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{1.1, 0.1}, {1.9, 1.9}], 
     InsetBox["\<\"\[CapitalDelta]\"\>", {1.5, 1.}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{2.1, 1.1}, {2.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {2.5, 2.}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{2.1, 0.1}, {2.9, 0.9}], 
     InsetBox["\<\"\[Gamma]\"\>", {2.5, 0.5}]}, {
     LineBox[{{3.5, 0.5}, {3.5, 2.5}}], {RectangleBox[{3.1, 0.1}, {3.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {3.5, 0.5}]}, {
      RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 1.5}]}, {
      RectangleBox[{3.1, 2.1}, {3.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 2.5}]}}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{4.1, 1.1}, {4.9, 1.9}], 
     InsetBox["\<\"\[Kappa]NTP\"\>", {4.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{4.1, 0.1}, {4.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {4.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{4.1, 2.1}, {4.9, 2.9}], 
     InsetBox["\<\"\[CapitalDelta]\"\>", {4.5, 2.5}]}}},
  ImageSize->180,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.865929166852605*^9, 3.865929224560423*^9}, {
   3.865929256410671*^9, 3.865929283645965*^9}, 3.865930873292143*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"ce497b15-c5c4-4b62-881f-c0a9a5a87786"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"matr", " ", "=", " ", 
   RowBox[{"CalcCircuitMatrix", "[", 
    RowBox[{"circ", " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a", "->", ".1"}], ",", 
       RowBox[{"b", "->", ".2"}], ",", 
       RowBox[{"c", "->", ".3"}], ",", 
       RowBox[{"d", "->", ".4"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", " ", "@", " ", 
  RowBox[{"matr", "\[LeftDoubleBracket]", 
   RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}]}], "Input",
 CellChangeTimes->{{3.8659291710500727`*^9, 3.865929180049127*^9}, {
  3.8659292959923897`*^9, 3.8659293735142937`*^9}, {3.865930202852305*^9, 
  3.865930211739633*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"7d62e4fb-3a05-4587-adc9-af6e9927271d"],

Cell[BoxData[
 RowBox[{"0.021824092473203507`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{{3.865929175191469*^9, 3.86592918168753*^9}, {
   3.8659293144586277`*^9, 3.865929377689286*^9}, 3.8659308754670763`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"6eb8bdc3-0935-4e17-bfda-5c724496b1e7"]
}, Open  ]],

Cell[TextData[{
 "The result is a ",
 StyleBox["superoperator matrix",
  FontWeight->"Bold"],
 " which can be multiplied upon a ",
 StyleBox["column-flattened density matrix",
  FontWeight->"Bold"],
 ". The latter is obtained by ",
 StyleBox["Flatten @ Transpose @ ",
  FontWeight->"Bold"],
 "matrix"
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.865929838331788*^9, 3.86592989059731*^9}, {
  3.8659299482132998`*^9, 3.86592995745962*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"6ea243fa-0205-42e3-97e5-83be32de511e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Rho]", " ", "=", " ", 
   RowBox[{"InitPlusState", " ", "@", " ", 
    RowBox[{"CreateDensityQureg", "[", "3", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Rho]v", " ", "=", " ", 
   RowBox[{"Flatten", " ", "@", " ", 
    RowBox[{"Transpose", " ", "@", 
     RowBox[{"GetQuregMatrix", "[", "\[Rho]", "]"}]}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"\[Sigma]v", " ", "=", " ", 
  RowBox[{
   RowBox[{"matr", " ", ".", " ", "\[Rho]v"}], " ", "//", " ", 
   "Chop"}]}]}], "Input",
 CellChangeTimes->{{3.865929903731839*^9, 3.865930025666688*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"3e043417-ac14-4c0e-9ff4-2e671ecdf593"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.014941451089487806`", ",", "0.022527944782653672`", ",", 
   "0.02438660949024106`", ",", "0.01644203731151887`", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0.022527944782653665`", ",", 
   "0.07594615405300319`", ",", "0.04269381774294701`", ",", 
   "0.06550195846204829`", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0.02438660949024106`", ",", "0.042693817742947004`", ",", 
   "0.047761927661596246`", ",", "0.042239896467475654`", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0.01644203731151888`", ",", 
   "0.06550195846204829`", ",", "0.04223989646747563`", ",", 
   "0.10229378836225891`", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0.002298684782998127`", ",", 
   "0.003465837658869798`", ",", "0.0037517860754216975`", ",", 
   "0.0025295442017721358`", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0.003465837658869799`", ",", "0.011684023700462022`", ",", 
   "0.006568279652761076`", ",", "0.01007722437877666`", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0.0037517860754217014`", ",", 
   "0.006568279652761075`", ",", "0.007347988871014806`", ",", 
   "0.006498445610380867`", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0.0025295442017721353`", ",", "0.010077224378776657`", ",", 
   "0.006498445610380869`", ",", "0.01573750590188598`"}], "}"}]], "Output",
 CellChangeTimes->{{3.865929986921124*^9, 3.8659299956036177`*^9}, 
   3.865930028573526*^9, {3.865930877698037*^9, 3.8659309071054697`*^9}},
 CellLabel->
  "Out[130]=",ExpressionUUID->"6229ef35-202c-4f14-96ec-e3a98747f717"]
}, Open  ]],

Cell["\<\
It is trivial to reformat this back to a matrix for comparison to QuESTlink\
\[CloseCurlyQuote]s numerical methods.\
\>", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.865929838331788*^9, 3.86592989059731*^9}, {
  3.8659299482132998`*^9, 3.86592995745962*^9}, {3.8659300358362093`*^9, 
  3.8659300562235813`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"881e6ccc-a7ec-410f-8ab9-9ac9f3edf48b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ApplyCircuit", "[", 
   RowBox[{"\[Rho]", ",", " ", 
    RowBox[{"circ", " ", "/.", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a", "->", ".1"}], ",", 
       RowBox[{"b", "->", ".2"}], ",", 
       RowBox[{"c", "->", ".3"}], ",", 
       RowBox[{"d", "->", ".4"}]}], "}"}]}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetQuregMatrix", "[", "\[Rho]", "]"}], " ", "-", " ", 
   RowBox[{"Transpose", " ", "@", " ", 
    RowBox[{"ArrayReshape", "[", 
     RowBox[{"\[Sigma]v", ",", " ", 
      RowBox[{"{", 
       RowBox[{
        SuperscriptBox["2", "3"], ",", 
        SuperscriptBox["2", "3"]}], "}"}]}], "]"}]}]}], " ", "//", " ", 
  "Chop"}]}], "Input",
 CellChangeTimes->{{3.865930088977046*^9, 3.865930190772503*^9}, {
  3.865930891151147*^9, 3.865930921551553*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"b973435d-3d9d-411a-b866-98d9cf62d0aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
     "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.865930129336033*^9, 3.865930158893694*^9}, 
   3.865930192133477*^9, {3.8659308829951963`*^9, 3.865930923367979*^9}},
 CellLabel->
  "Out[132]=",ExpressionUUID->"6579b4b3-2d55-4c4b-a231-e5156b014eec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GetCircuitGeneralised", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}, {3.865929554788669*^9, 3.865929559279708*^9}},
 CellTags->
  "GetCircuitGeneralised",ExpressionUUID->"6f14da4c-cb93-46a2-8c26-\
78a42c409703"],

Cell[TextData[{
 StyleBox["GetCircuitGeneralised[",
  FontWeight->"Bold"],
 "circ",
 StyleBox["]",
  FontWeight->"Bold"],
 " produces an equivalent circuit composed only of general operators. This is \
likely only useful as a subroutine in user-implemented recompilation \
schemes."
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.8659295676745043`*^9, 3.8659295987461452`*^9}, {
  3.865929633810301*^9, 3.865929695792633*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"f82d0053-21f7-4e98-b7ea-a22d3af5d3b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetCircuitGeneralised"}]], "Input",
 CellChangeTimes->{{3.86592650101539*^9, 3.865926511247664*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"feaf7c51-d187-4468-ba09-fac2e11782a8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitGeneralised[circuit] returns an \
equivalent circuit composed only of general unitaries (and Matr operators) \
and Kraus operators of analytic matrices.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "GetCircuitGeneralised", "[", "QuEST`Private`gates_List", 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`generalGates", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"QuEST`Private`gates", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    SubscriptBox["Kraus", "__"], "[", "__", "]"}]}], 
                    "\[RuleDelayed]", "QuEST`Private`g"}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Damp", "QuEST`Private`q_"], "[", 
                    "QuEST`Private`p_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Kraus", "QuEST`Private`q"], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    SqrtBox[
                    RowBox[{"1", "-", "QuEST`Private`p"}]]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    SqrtBox["QuEST`Private`p"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], "]"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Deph", "QuEST`Private`q_"], "[", 
                    "QuEST`Private`p_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Kraus", "QuEST`Private`q"], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", "QuEST`Private`p"}]], " ", 
                    RowBox[{"PauliMatrix", "[", "0", "]"}]}], ",", 
                    RowBox[{
                    SqrtBox["QuEST`Private`p"], " ", 
                    RowBox[{"PauliMatrix", "[", "3", "]"}]}]}], "}"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Deph", 
                    RowBox[{"QuEST`Private`q1_", ",", "QuEST`Private`q2_"}]], 
                    "[", "QuEST`Private`p_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Kraus", 
                    RowBox[{"QuEST`Private`q1", ",", "QuEST`Private`q2"}]], 
                    "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", "QuEST`Private`p"}]], " ", 
                    RowBox[{"IdentityMatrix", "[", "4", "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"KroneckerProduct", "[", 
                    RowBox[{
                    RowBox[{"PauliMatrix", "[", "0", "]"}], ",", 
                    RowBox[{"PauliMatrix", "[", "3", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"KroneckerProduct", "[", 
                    RowBox[{
                    RowBox[{"PauliMatrix", "[", "3", "]"}], ",", 
                    RowBox[{"PauliMatrix", "[", "0", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"KroneckerProduct", "[", 
                    RowBox[{
                    RowBox[{"PauliMatrix", "[", "3", "]"}], ",", 
                    RowBox[{"PauliMatrix", "[", "3", "]"}]}], "]"}]}]}], 
                    "}"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Depol", "QuEST`Private`q_"], "[", 
                    "QuEST`Private`p_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Kraus", "QuEST`Private`q"], "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", "QuEST`Private`p"}]], " ", 
                    RowBox[{"PauliMatrix", "[", "0", "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"PauliMatrix", "[", "1", "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"PauliMatrix", "[", "2", "]"}]}], ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "3"]], " ", 
                    RowBox[{"PauliMatrix", "[", "3", "]"}]}]}], "}"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Depol", 
                    RowBox[{"QuEST`Private`q1_", ",", "QuEST`Private`q2_"}]], 
                    "[", "QuEST`Private`p_", "]"}], "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["Kraus", 
                    RowBox[{"QuEST`Private`q1", ",", "QuEST`Private`q2"}]], 
                    "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", "QuEST`Private`p"}]], " ", 
                    RowBox[{"IdentityMatrix", "[", "4", "]"}]}], "}"}], ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"QuEST`Private`n1", "===", "0"}], "&&", 
                    RowBox[{"QuEST`Private`n2", "===", "0"}]}], ",", 
                    "Nothing", ",", 
                    RowBox[{
                    SqrtBox[
                    FractionBox["QuEST`Private`p", "15"]], " ", 
                    RowBox[{"KroneckerProduct", "[", 
                    RowBox[{
                    RowBox[{"PauliMatrix", "[", "QuEST`Private`n1", "]"}], 
                    ",", 
                    RowBox[{"PauliMatrix", "[", "QuEST`Private`n2", "]"}]}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`n1", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "2", ",", "3"}], "}"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`n2", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "2", ",", "3"}], "}"}]}], 
                    "}"}]}], "]"}], ",", "1"}], "]"}]}], "]"}], "]"}]}], ",", 
                    
                    RowBox[{
                    RowBox[{"G", "[", "QuEST`Private`x_", "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["U", "0"], "[", 
                    RowBox[{
                    RowBox[{"Exp", "[", 
                    RowBox[{"\[ImaginaryI]", " ", "QuEST`Private`x"}], "]"}], 
                    " ", 
                    RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    SubscriptBox["Matr", 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], "[", 
                    "QuEST`Private`m_", "]"}]}], "\[RuleDelayed]", 
                    "QuEST`Private`g"}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    RowBox[{
                    SubscriptBox["Matr", 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], "[", 
                    "QuEST`Private`m_", "]"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"QuEST`Private`cDim", "=", 
                    SuperscriptBox["2", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "QuEST`Private`c", "}"}], "]"}]]}], ",", 
                    RowBox[{"QuEST`Private`tDim", "=", 
                    RowBox[{"Length", "[", "QuEST`Private`m", "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{
                    SubscriptBox["Matr", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`q", "}"}], ",", 
                    RowBox[{"{", "QuEST`Private`c", "}"}]}], "]"}]}]], "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IdentityMatrix", "[", "QuEST`Private`cDim", 
                    "]"}], ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`cDim", ",", "QuEST`Private`tDim"}],
                     "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`tDim", ",", "QuEST`Private`cDim"}],
                     "}"}]}], "]"}], ",", "QuEST`Private`m"}], "}"}]}], 
                    "]"}]}], "]"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"QuEST`Private`cDim", "=", 
                    SuperscriptBox["2", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "QuEST`Private`c", "}"}], "]"}]]}], ",", 
                    RowBox[{"QuEST`Private`tDim", "=", 
                    SuperscriptBox["2", 
                    RowBox[{"Length", "[", 
                    
                    RowBox[{"QuEST`Private`getAnalGateTargets", "[", 
                    "QuEST`Private`g", "]"}], "]"}]]}]}], "}"}], ",", 
                    RowBox[{
                    SubscriptBox["U", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "QuEST`Private`getAnalGateTargets", "[", 
                    "QuEST`Private`g", "]"}], ",", 
                    RowBox[{"{", "QuEST`Private`c", "}"}]}], "]"}]}]], "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"IdentityMatrix", "[", "QuEST`Private`cDim", 
                    "]"}], ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`cDim", ",", "QuEST`Private`tDim"}],
                     "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Join", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`tDim", ",", "QuEST`Private`cDim"}],
                     "}"}]}], "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`getAnalGateMatrix", "[", 
                    "QuEST`Private`g", "]"}]}], "}"}]}], "]"}]}], "]"}], 
                    "]"}]}], "]"}]}], ",", 
                    RowBox[{"QuEST`Private`g_", "\[RuleDelayed]", 
                    RowBox[{
                    SubscriptBox["U", 
                    RowBox[{"Sequence", "@@", 
                    
                    RowBox[{"QuEST`Private`getAnalGateTargets", "[", 
                    "QuEST`Private`g", "]"}]}]], "[", 
                    
                    RowBox[{"QuEST`Private`getAnalGateMatrix", "[", 
                    "QuEST`Private`g", "]"}], "]"}]}]}], "}"}], ",", "1"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    
                    RowBox[{"QuEST`Private`generalGates", ",", 
                    "QuEST`Private`getAnalGateMatrix"}], "]"}], ",", 
                    "QuEST`Private`generalGates", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"GetCircuitGeneralised", "::", "error"}], 
                    "MessageName"], ",", 
                    
                    RowBox[{
                    "\"Circuit contained an unrecognised or unsupported gate: \
\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"StandardForm", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"QuEST`Private`generalGates", ",", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`getAnalGateMatrix", "[", 
                    "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    "QuEST`Private`g"}], ",", "\[Infinity]"}], "]"}], "]"}], 
                    "]"}], "]"}]}]}], "]"}], ";", "$Failed"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "GetCircuitGeneralised", "[", "QuEST`Private`op_", "]"}], 
                    ":=", 
                    RowBox[{"GetCircuitGeneralised", "[", 
                    RowBox[{"{", "QuEST`Private`op", "}"}], "]"}]}]}, {" "}, {
                   
                    RowBox[{
                    RowBox[{"GetCircuitGeneralised", "[", "___", "]"}], ":=", 
                    
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "GetCircuitGeneralised", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetCircuitGeneralised\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitGeneralised[circuit] returns an \
equivalent circuit composed only of general unitaries (and Matr operators) \
and Kraus operators of analytic matrices.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetCircuitGeneralised[circuit] returns an equivalent circuit composed \
only of general unitaries (and Matr operators) and Kraus operators of \
analytic matrices.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetCircuitGeneralised, {QuEST`GetCircuitGeneralised[
         Pattern[QuEST`Private`gates, 
          Blank[List]]] :> 
       With[{QuEST`Private`generalGates = 
          Replace[QuEST`Private`gates, {Pattern[QuEST`Private`g, 
               Subscript[QuEST`Gate`Kraus, 
                BlankSequence[]][
                BlankSequence[]]] :> QuEST`Private`g, 
             Subscript[QuEST`Gate`Damp, 
               Pattern[QuEST`Private`q, 
                Blank[]]][
               Pattern[QuEST`Private`p, 
                Blank[]]] :> 
             Subscript[QuEST`Gate`Kraus, QuEST`Private`q][{{{1, 0}, {0, 
                  Sqrt[1 - QuEST`Private`p]}}, {{0, 
                  Sqrt[QuEST`Private`p]}, {0, 0}}}], 
             Subscript[QuEST`Gate`Deph, 
               Pattern[QuEST`Private`q, 
                Blank[]]][
               Pattern[QuEST`Private`p, 
                Blank[]]] :> 
             Subscript[
              QuEST`Gate`Kraus, QuEST`Private`q][{
               Sqrt[1 - QuEST`Private`p] PauliMatrix[0], 
                Sqrt[QuEST`Private`p] PauliMatrix[3]}], 
             Subscript[QuEST`Gate`Deph, 
               Pattern[QuEST`Private`q1, 
                Blank[]], 
               Pattern[QuEST`Private`q2, 
                Blank[]]][
               Pattern[QuEST`Private`p, 
                Blank[]]] :> 
             Subscript[
              QuEST`Gate`Kraus, QuEST`Private`q1, QuEST`Private`q2][{
               Sqrt[1 - QuEST`Private`p] IdentityMatrix[4], 
                Sqrt[QuEST`Private`p/3] KroneckerProduct[
                  PauliMatrix[0], 
                  PauliMatrix[3]], Sqrt[QuEST`Private`p/3] KroneckerProduct[
                  PauliMatrix[3], 
                  PauliMatrix[0]], Sqrt[QuEST`Private`p/3] KroneckerProduct[
                  PauliMatrix[3], 
                  PauliMatrix[3]]}], Subscript[QuEST`Gate`Depol, 
               Pattern[QuEST`Private`q, 
                Blank[]]][
               Pattern[QuEST`Private`p, 
                Blank[]]] :> 
             Subscript[
              QuEST`Gate`Kraus, QuEST`Private`q][{
               Sqrt[1 - QuEST`Private`p] PauliMatrix[0], 
                Sqrt[QuEST`Private`p/3] PauliMatrix[1], 
                Sqrt[QuEST`Private`p/3] PauliMatrix[2], 
                Sqrt[QuEST`Private`p/3] PauliMatrix[3]}], 
             Subscript[QuEST`Gate`Depol, 
               Pattern[QuEST`Private`q1, 
                Blank[]], 
               Pattern[QuEST`Private`q2, 
                Blank[]]][
               Pattern[QuEST`Private`p, 
                Blank[]]] :> 
             Subscript[QuEST`Gate`Kraus, QuEST`Private`q1, QuEST`Private`q2][
               Join[{Sqrt[1 - QuEST`Private`p] IdentityMatrix[4]}, 
                Flatten[
                 Table[
                  If[
                   And[QuEST`Private`n1 === 0, QuEST`Private`n2 === 0], 
                   Nothing, Sqrt[QuEST`Private`p/15] KroneckerProduct[
                    PauliMatrix[QuEST`Private`n1], 
                    PauliMatrix[QuEST`Private`n2]]], {
                  QuEST`Private`n1, {0, 1, 2, 3}}, {
                  QuEST`Private`n2, {0, 1, 2, 3}}], 1]]], QuEST`Gate`G[
               Pattern[QuEST`Private`x, 
                Blank[]]] :> 
             Subscript[QuEST`Gate`U, 0][
              Exp[I QuEST`Private`x] IdentityMatrix[2]], 
             Pattern[QuEST`Private`g, 
               Subscript[QuEST`Gate`Matr, 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`m, 
                 Blank[]]]] :> QuEST`Private`g, Subscript[C, 
               Alternatives[
                Pattern[QuEST`Private`c, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]]}]][
               Subscript[QuEST`Gate`Matr, 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`m, 
                 Blank[]]]] :> 
             With[{QuEST`Private`cDim = 2^Length[{QuEST`Private`c}], 
                QuEST`Private`tDim = Length[QuEST`Private`m]}, 
               Subscript[QuEST`Gate`Matr, 
                Apply[Sequence, 
                 Join[{QuEST`Private`q}, {QuEST`Private`c}]]][
                Join[
                 MapThread[Join, {
                   IdentityMatrix[QuEST`Private`cDim], 
                   ConstantArray[
                   0, {QuEST`Private`cDim, QuEST`Private`tDim}]}], 
                 MapThread[Join, {
                   ConstantArray[0, {QuEST`Private`tDim, QuEST`Private`cDim}],
                    QuEST`Private`m}]]]], Subscript[C, 
               Alternatives[
                Pattern[QuEST`Private`c, 
                 BlankSequence[Integer]], {
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]]}]][
               Pattern[QuEST`Private`g, 
                Blank[]]] :> 
             With[{QuEST`Private`cDim = 2^Length[{QuEST`Private`c}], 
                QuEST`Private`tDim = 2^Length[
                   QuEST`Private`getAnalGateTargets[QuEST`Private`g]]}, 
               Subscript[QuEST`Gate`U, 
                Apply[Sequence, 
                 Join[
                  QuEST`Private`getAnalGateTargets[QuEST`Private`g], {
                  QuEST`Private`c}]]][
                Join[
                 MapThread[Join, {
                   IdentityMatrix[QuEST`Private`cDim], 
                   ConstantArray[
                   0, {QuEST`Private`cDim, QuEST`Private`tDim}]}], 
                 MapThread[Join, {
                   ConstantArray[0, {QuEST`Private`tDim, QuEST`Private`cDim}], 
                   QuEST`Private`getAnalGateMatrix[QuEST`Private`g]}]]]], 
             Pattern[QuEST`Private`g, 
               Blank[]] :> Subscript[QuEST`Gate`U, 
               Apply[Sequence, 
                QuEST`Private`getAnalGateTargets[QuEST`Private`g]]][
               QuEST`Private`getAnalGateMatrix[QuEST`Private`g]]}, 1]}, 
         If[
          FreeQ[QuEST`Private`generalGates, QuEST`Private`getAnalGateMatrix], 
          QuEST`Private`generalGates, Message[
            MessageName[QuEST`GetCircuitGeneralised, "error"], 
            "Circuit contained an unrecognised or unsupported gate: " <> 
            ToString[
              StandardForm[
               First[
                Cases[
                QuEST`Private`generalGates, QuEST`Private`getAnalGateMatrix[
                   Pattern[QuEST`Private`g, 
                    Blank[]]] :> QuEST`Private`g, Infinity]]]]]; $Failed]], 
       QuEST`GetCircuitGeneralised[
         Pattern[QuEST`Private`op, 
          Blank[]]] :> QuEST`GetCircuitGeneralised[{QuEST`Private`op}], 
       QuEST`GetCircuitGeneralised[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`GetCircuitGeneralised]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetCircuitGeneralised"|>, False]]], "Output",
 CellChangeTimes->{3.865926511611453*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d1a1e556-b776-4bda-8695-a7a0230ef893"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitGeneralised", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    SubscriptBox["X", "0"], " ", 
    SubscriptBox["Y", "1"], " ", 
    RowBox[{
     SubscriptBox["C", "0"], "[", 
     SubscriptBox["Z", "1"], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865929600706148*^9, 3.865929622851777*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"9ff7a4cd-2943-4ad5-9d34-d100c1a31859"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["U", "0"], "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["U", "1"], "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"-", "\[ImaginaryI]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[ImaginaryI]", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["U", 
     RowBox[{"1", ",", "0"}]], "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "}"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.865929608312333*^9, 3.865929623360896*^9}},
 CellLabel->"Out[92]=",ExpressionUUID->"61d10362-7959-4f53-837d-b4d90a82a881"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitGeneralised", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    SubscriptBox["Depol", "0"], "[", "a", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865929642508493*^9, 3.865929644605583*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"35acea83-77ad-41ff-a2df-eed7f0fe1a8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["Kraus", "0"], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         SqrtBox[
          RowBox[{"1", "-", "a"}]], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         SqrtBox[
          RowBox[{"1", "-", "a"}]]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         FractionBox[
          SqrtBox["a"], 
          SqrtBox["3"]]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox[
          SqrtBox["a"], 
          SqrtBox["3"]], ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[ImaginaryI]", " ", 
            SqrtBox["a"]}], 
           SqrtBox["3"]]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         FractionBox[
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["a"]}], 
          SqrtBox["3"]], ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox[
          SqrtBox["a"], 
          SqrtBox["3"]], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", 
          FractionBox[
           SqrtBox["a"], 
           SqrtBox["3"]]}]}], "}"}]}], "}"}]}], "}"}], "]"}], "}"}]], "Output",\

 CellChangeTimes->{3.8659296450542097`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"c9052fab-210c-4102-a351-bd19653c0a10"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GetCircuitSuperoperator", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}, {3.865929554788669*^9, 3.865929559279708*^9}, {
  3.8659297081908207`*^9, 3.865929709839326*^9}},
 CellTags->
  "GetCircuitSuperoperator",ExpressionUUID->"f6f7b4ff-7f8b-4166-a7c6-\
7e0a7c8e648b"],

Cell[TextData[{
 StyleBox["GetCircuitSuperoperator[",
  FontWeight->"Bold"],
 "circ",
 StyleBox["]",
  FontWeight->"Bold"],
 " produces a Choi--Jamiolkowski superoperator of the input circuit. This \
will again be most useful for user subroutines."
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.8659295676745043`*^9, 3.8659295987461452`*^9}, {
  3.865929633810301*^9, 3.865929787339891*^9}, {3.865930946230845*^9, 
  3.865930957502337*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"0129016e-6f58-403b-bd2b-bf8f910f2670"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetCircuitSuperoperator"}]], "Input",
 CellChangeTimes->{{3.865926512585327*^9, 3.865926515570155*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"70c13630-224d-4445-a094-719ddd5228d8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitSuperoperator[circuit] returns the \
corresponding superoperator circuit upon doubly-many qubits as per the Choi\
\[Dash]Jamiolkowski isomorphism. Decoherence channels become Matr[] \
superoperators.\\nGetCircuitSuperoperator[circuit, numQubits] forces the \
circuit to be assumed size numQubits, so that the output superoperator \
circuit is of size 2*numQubits.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    
                    RowBox[{
                    "QuEST`Private`circ_List", ",", "QuEST`Private`numQb_"}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`superops", "=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"QuEST`Private`circ", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"G", "[", "QuEST`Private`x_", "]"}], 
                    "\[RuleDelayed]", "Nothing"}], ",", 
                    RowBox[{
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"H", "|", "X", "|", "Z"}]}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], ",", 
                    SubscriptBox["QuEST`Private`g", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`numQb"}], 
                    "]"}]]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    SubscriptBox["P", 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], "[", 
                    "QuEST`Private`v_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`g", ",", 
                    RowBox[{
                    SubscriptBox["P", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`numQb"}], 
                    "]"}]], "[", "QuEST`Private`v", "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    SubscriptBox["SWAP", 
                    
                    RowBox[{"QuEST`Private`q1_", ",", 
                    "QuEST`Private`q2_"}]]}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`g", ",", 
                    SubscriptBox["SWAP", 
                    RowBox[{
                    RowBox[{"QuEST`Private`q1", "+", "QuEST`Private`numQb"}], 
                    ",", 
                    RowBox[{
                    "QuEST`Private`q2", "+", "QuEST`Private`numQb"}]}]]}], 
                    "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    SubscriptBox["Ry", "QuEST`Private`q_Integer"], "[", 
                    "QuEST`Private`x_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`g", ",", 
                    RowBox[{
                    SubscriptBox["Ry", 
                    RowBox[{"QuEST`Private`q", "+", "QuEST`Private`numQb"}]], 
                    "[", "QuEST`Private`x", "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    SubscriptBox["T", "QuEST`Private`q_Integer"], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["T", "QuEST`Private`q"], ",", 
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{"QuEST`Private`q", "+", "QuEST`Private`numQb"}]], 
                    "[", 
                    RowBox[{"-", 
                    FractionBox["\[Pi]", "4"]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    SubscriptBox["S", "QuEST`Private`q_Integer"], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["S", "QuEST`Private`q"], ",", 
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{"QuEST`Private`q", "+", "QuEST`Private`numQb"}]], 
                    "[", 
                    RowBox[{"-", 
                    FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"Rx", "|", "Rz", "|", "Ph"}]}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`x_", "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    "QuEST`Private`x", "]"}], ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`numQb"}], 
                    "]"}]], "[", 
                    RowBox[{"-", "QuEST`Private`x"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", 
                    SubscriptBox["Y", "QuEST`Private`q_Integer"]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    SubscriptBox["Y", "QuEST`Private`q"]}], "]"}], ",", 
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    SubscriptBox["Y", 
                    
                    RowBox[{"QuEST`Private`q", "+", 
                    "QuEST`Private`numQb"}]]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`p", ":", 
                    RowBox[{"X", "|", "Z"}]}], "QuEST`Private`q_Integer"]}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    SubscriptBox["QuEST`Private`p", "QuEST`Private`q"]}], 
                    "]"}], ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"-", "QuEST`Private`x"}], ",", 
                    SubscriptBox["QuEST`Private`p", 
                    
                    RowBox[{"QuEST`Private`q", "+", 
                    "QuEST`Private`numQb"}]]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", 
                    RowBox[{
                    RowBox[{"Verbatim", "[", "Times", "]"}], "[", 
                    RowBox[{"QuEST`Private`p", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox["_Symbol", "_Integer"], ".."}], ")"}]}], 
                    "]"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`s", "=", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"Count", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`p", "}"}], ",", 
                    SubscriptBox["Y", "_"]}], "]"}]]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x", ",", 
                    RowBox[{"Times", "[", "QuEST`Private`p", "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`s", " ", "QuEST`Private`x"}], ",", 
                    
                    RowBox[{"Times", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["#1", "#2"], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`p", "}"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`p", "}"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "+",
                     "QuEST`Private`numQb"}]}], "}"}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    SubscriptBox["Y", "QuEST`Private`q_Integer"], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["Y", "QuEST`Private`q"], ",", 
                    RowBox[{
                    SubscriptBox["U", 
                    RowBox[{"QuEST`Private`q", "+", "QuEST`Private`numQb"}]], 
                    "[", 
                    RowBox[{"Conjugate", "[", 
                    RowBox[{"PauliMatrix", "[", "2", "]"}], "]"}], "]"}]}], 
                    "}"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{"U", "|", "Matr"}]}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`m_", "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    "QuEST`Private`m", "]"}], ",", 
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`numQb"}], 
                    "]"}]], "[", 
                    RowBox[{"Conjugate", "[", "QuEST`Private`m", "]"}], 
                    "]"}]}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`c__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`c__Integer", "}"}]}]], "[", 
                    "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", "QuEST`Private`c"], "[", 
                    "QuEST`Private`g", "]"}], ",", 
                    RowBox[{
                    SubscriptBox["C", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`c", ",", "QuEST`Private`numQb"}], 
                    "]"}]], "[", 
                    RowBox[{"Last", "[", 
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`g", "}"}], ",", 
                    "QuEST`Private`numQb"}], "]"}], "]"}], "]"}]}], "}"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"Kraus", "|", "KrausNonTP"}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`matrs_List", "]"}], "\[RuleDelayed]", 
                    
                    RowBox[{
                    SubscriptBox["Matr", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "QuEST`Private`q", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`shiftInds", "[", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`numQb"}], 
                    "]"}], "}"}]}], "]"}]}]], "[", 
                    RowBox[{"Total", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"KroneckerProduct", "[", 
                    RowBox[{
                    RowBox[{"Conjugate", "[", "#1", "]"}], ",", "#1"}], "]"}],
                     "&"}], ")"}], "/@", "QuEST`Private`matrs"}], "]"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`g", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    SubscriptBox[
                    RowBox[{"Damp", "|", "Depol", "|", "Deph"}], 
                    RowBox[{"QuEST`Private`q__Integer", "|", 
                    RowBox[{"{", "QuEST`Private`q__Integer", "}"}]}]], ")"}], 
                    "[", "QuEST`Private`x_", "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    RowBox[{
                    
                    RowBox[{"GetCircuitGeneralised", "[", "QuEST`Private`g", 
                    "]"}], ",", "QuEST`Private`numQb"}], "]"}]}], ",", 
                    RowBox[{"QuEST`Private`g_", "\[RuleDelayed]", 
                    
                    RowBox[{"QuEST`Private`unrecognisedGateInSuperopCirc", 
                    "[", "QuEST`Private`g", "]"}]}]}], "}"}], ",", "1"}], 
                    "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    
                    RowBox[{"QuEST`Private`superops", ",", 
                    "QuEST`Private`unrecognisedGateInSuperopCirc"}], "]"}], 
                    ",", "QuEST`Private`superops", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"GetCircuitSuperoperator", "::", "error"}], 
                    "MessageName"], ",", 
                    
                    RowBox[{
                    "\"Circuit contained an unrecognised or unsupported gate: \
\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"StandardForm", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"QuEST`Private`superops", ",", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`unrecognisedGateInSuperopCirc", 
                    "[", "QuEST`Private`g_", "]"}], "\[RuleDelayed]", 
                    "QuEST`Private`g"}], ",", "\[Infinity]"}], "]"}], "]"}], 
                    "]"}], "]"}]}]}], "]"}], ";", "$Failed"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    
                    RowBox[{
                    "GetCircuitSuperoperator", "[", "QuEST`Private`circ_List",
                     "]"}], ":=", 
                    RowBox[{"GetCircuitSuperoperator", "[", 
                    RowBox[{"QuEST`Private`circ", ",", 
                    
                    RowBox[{
                    "QuEST`Private`getNumQubitsInCircuit", "[", 
                    "QuEST`Private`circ", "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetCircuitSuperoperator", "[", "___", "]"}], 
                    ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "GetCircuitSuperoperator", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetCircuitSuperoperator\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetCircuitSuperoperator[circuit] returns the \
corresponding superoperator circuit upon doubly-many qubits as per the Choi\
\[Dash]Jamiolkowski isomorphism. Decoherence channels become Matr[] \
superoperators.\\nGetCircuitSuperoperator[circuit, numQubits] forces the \
circuit to be assumed size numQubits, so that the output superoperator \
circuit is of size 2*numQubits.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetCircuitSuperoperator[circuit] returns the corresponding superoperator \
circuit upon doubly-many qubits as per the Choi\[Dash]Jamiolkowski \
isomorphism. Decoherence channels become Matr[] superoperators.\n\
GetCircuitSuperoperator[circuit, numQubits] forces the circuit to be assumed \
size numQubits, so that the output superoperator circuit is of size \
2*numQubits.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetCircuitSuperoperator, {QuEST`GetCircuitSuperoperator[
         Pattern[QuEST`Private`circ, 
          Blank[List]], 
         Pattern[QuEST`Private`numQb, 
          Blank[]]] :> With[{QuEST`Private`superops = Flatten[
            Replace[QuEST`Private`circ, {QuEST`Gate`G[
                Pattern[QuEST`Private`x, 
                 Blank[]]] :> Nothing, Subscript[
                Pattern[QuEST`Private`g, 
                 Alternatives[QuEST`Gate`H, QuEST`Gate`X, QuEST`Gate`Z]], 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]] :> {
                Subscript[QuEST`Private`g, QuEST`Private`q], 
                Subscript[QuEST`Private`g, 
                 QuEST`Private`shiftInds[
                 QuEST`Private`q, QuEST`Private`numQb]]}, 
              Pattern[QuEST`Private`g, 
                Subscript[QuEST`Gate`P, 
                 Alternatives[
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]], {
                   Pattern[QuEST`Private`q, 
                    BlankSequence[Integer]]}]][
                 Pattern[QuEST`Private`v, 
                  Blank[]]]] :> {QuEST`Private`g, 
                Subscript[QuEST`Gate`P, 
                 QuEST`Private`shiftInds[
                 QuEST`Private`q, QuEST`Private`numQb]][QuEST`Private`v]}, 
              Pattern[QuEST`Private`g, 
                Subscript[QuEST`Gate`SWAP, 
                 Pattern[QuEST`Private`q1, 
                  Blank[]], 
                 Pattern[QuEST`Private`q2, 
                  Blank[]]]] :> {QuEST`Private`g, 
                Subscript[
                QuEST`Gate`SWAP, QuEST`Private`q1 + QuEST`Private`numQb, 
                 QuEST`Private`q2 + QuEST`Private`numQb]}, 
              Pattern[QuEST`Private`g, 
                Subscript[QuEST`Gate`Ry, 
                 Pattern[QuEST`Private`q, 
                  Blank[Integer]]][
                 Pattern[QuEST`Private`x, 
                  Blank[]]]] :> {QuEST`Private`g, 
                Subscript[
                QuEST`Gate`Ry, QuEST`Private`q + QuEST`Private`numQb][
                QuEST`Private`x]}, Subscript[QuEST`Gate`T, 
                Pattern[QuEST`Private`q, 
                 Blank[Integer]]] :> {
                Subscript[QuEST`Gate`T, QuEST`Private`q], 
                Subscript[
                QuEST`Gate`Ph, QuEST`Private`q + QuEST`Private`numQb][(-Pi)/
                 4]}, Subscript[QuEST`Gate`S, 
                Pattern[QuEST`Private`q, 
                 Blank[Integer]]] :> {
                Subscript[QuEST`Gate`S, QuEST`Private`q], 
                Subscript[
                QuEST`Gate`Ph, QuEST`Private`q + QuEST`Private`numQb][(-Pi)/
                 2]}, Subscript[
                Pattern[QuEST`Private`g, 
                 Alternatives[QuEST`Gate`Rx, QuEST`Gate`Rz, QuEST`Gate`Ph]], 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`x, 
                 Blank[]]] :> {
                Subscript[QuEST`Private`g, QuEST`Private`q][QuEST`Private`x], 
                
                Subscript[QuEST`Private`g, 
                 QuEST`Private`shiftInds[
                 QuEST`Private`q, QuEST`Private`numQb]][-QuEST`Private`x]}, 
              QuEST`Gate`R[
                Pattern[QuEST`Private`x, 
                 Blank[]], 
                Subscript[QuEST`Gate`Y, 
                 Pattern[QuEST`Private`q, 
                  Blank[Integer]]]] :> {
                QuEST`Gate`R[QuEST`Private`x, 
                 Subscript[QuEST`Gate`Y, QuEST`Private`q]], 
                QuEST`Gate`R[QuEST`Private`x, 
                 Subscript[
                 QuEST`Gate`Y, QuEST`Private`q + QuEST`Private`numQb]]}, 
              QuEST`Gate`R[
                Pattern[QuEST`Private`x, 
                 Blank[]], 
                Subscript[
                 Pattern[QuEST`Private`p, 
                  Alternatives[QuEST`Gate`X, QuEST`Gate`Z]], 
                 Pattern[QuEST`Private`q, 
                  Blank[Integer]]]] :> {
                QuEST`Gate`R[QuEST`Private`x, 
                 Subscript[QuEST`Private`p, QuEST`Private`q]], 
                QuEST`Gate`R[-QuEST`Private`x, 
                 Subscript[
                 QuEST`Private`p, QuEST`Private`q + QuEST`Private`numQb]]}, 
              QuEST`Gate`R[
                Pattern[QuEST`Private`x, 
                 Blank[]], 
                Verbatim[Times][
                 Pattern[QuEST`Private`p, 
                  Repeated[
                   Subscript[
                    Blank[Symbol], 
                    Blank[Integer]]]]]] :> 
              With[{QuEST`Private`s = -(-1)^Count[{QuEST`Private`p}, 
                    Subscript[QuEST`Gate`Y, 
                    Blank[]]]}, {
                 QuEST`Gate`R[QuEST`Private`x, 
                  Times[QuEST`Private`p]], 
                 QuEST`Gate`R[QuEST`Private`s QuEST`Private`x, 
                  Apply[Times, 
                   MapThread[Subscript[#, #2]& , {
                    Part[{QuEST`Private`p}, All, 1], 
                    Part[{QuEST`Private`p}, All, 2] + 
                    QuEST`Private`numQb}]]]}], Subscript[QuEST`Gate`Y, 
                Pattern[QuEST`Private`q, 
                 Blank[Integer]]] :> {
                Subscript[QuEST`Gate`Y, QuEST`Private`q], 
                Subscript[QuEST`Gate`U, QuEST`Private`q + QuEST`Private`numQb][
                 Conjugate[
                  PauliMatrix[2]]]}, Subscript[
                Pattern[QuEST`Private`g, 
                 Alternatives[QuEST`Gate`U, QuEST`Gate`Matr]], 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`m, 
                 Blank[]]] :> {
                Subscript[QuEST`Private`g, QuEST`Private`q][QuEST`Private`m], 
                
                Subscript[QuEST`Private`g, 
                 QuEST`Private`shiftInds[
                 QuEST`Private`q, QuEST`Private`numQb]][
                 Conjugate[QuEST`Private`m]]}, Subscript[C, 
                Alternatives[
                 Pattern[QuEST`Private`c, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`c, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`g, 
                 Blank[]]] :> {
                Subscript[C, QuEST`Private`c][QuEST`Private`g], 
                Subscript[C, 
                 QuEST`Private`shiftInds[
                 QuEST`Private`c, QuEST`Private`numQb]][
                 Last[
                  
                  QuEST`GetCircuitSuperoperator[{QuEST`Private`g}, 
                   QuEST`Private`numQb]]]}, Subscript[
                Alternatives[QuEST`Gate`Kraus, QuEST`Gate`KrausNonTP], 
                Alternatives[
                 Pattern[QuEST`Private`q, 
                  BlankSequence[Integer]], {
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]]}]][
                Pattern[QuEST`Private`matrs, 
                 Blank[List]]] :> Subscript[QuEST`Gate`Matr, 
                Apply[Sequence, 
                 Join[{QuEST`Private`q}, {
                   QuEST`Private`shiftInds[
                   QuEST`Private`q, QuEST`Private`numQb]}]]][
                Total[
                 Map[KroneckerProduct[
                   Conjugate[#], #]& , QuEST`Private`matrs]]], 
              Pattern[QuEST`Private`g, 
                Subscript[
                 Alternatives[
                 QuEST`Gate`Damp, QuEST`Gate`Depol, QuEST`Gate`Deph], 
                 Alternatives[
                  Pattern[QuEST`Private`q, 
                   BlankSequence[Integer]], {
                   Pattern[QuEST`Private`q, 
                    BlankSequence[Integer]]}]][
                 Pattern[QuEST`Private`x, 
                  Blank[]]]] :> QuEST`GetCircuitSuperoperator[
                QuEST`GetCircuitGeneralised[QuEST`Private`g], 
                QuEST`Private`numQb], Pattern[QuEST`Private`g, 
                Blank[]] :> 
              QuEST`Private`unrecognisedGateInSuperopCirc[QuEST`Private`g]}, 
             1]]}, 
         If[
          FreeQ[
          QuEST`Private`superops, 
           QuEST`Private`unrecognisedGateInSuperopCirc], 
          QuEST`Private`superops, Message[
            MessageName[QuEST`GetCircuitSuperoperator, "error"], 
            "Circuit contained an unrecognised or unsupported gate: " <> 
            ToString[
              StandardForm[
               First[
                Cases[
                QuEST`Private`superops, 
                 QuEST`Private`unrecognisedGateInSuperopCirc[
                   Pattern[QuEST`Private`g, 
                    Blank[]]] :> QuEST`Private`g, Infinity]]]]]; $Failed]], 
       QuEST`GetCircuitSuperoperator[
         Pattern[QuEST`Private`circ, 
          Blank[List]]] :> QuEST`GetCircuitSuperoperator[QuEST`Private`circ, 
         QuEST`Private`getNumQubitsInCircuit[QuEST`Private`circ]], 
       QuEST`GetCircuitSuperoperator[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`GetCircuitSuperoperator]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetCircuitSuperoperator"|>, False]]], "Output",
 CellChangeTimes->{3.865926515932228*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"2c4ba091-decd-48fc-ac36-1a6071fc5c09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitSuperoperator", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   SubscriptBox["X", "0"], "]"}]}]], "Input",
 CellChangeTimes->{
  3.865926521082089*^9, {3.865929762345739*^9, 3.8659297695682793`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"0a5099c9-c926-433a-bf06-5a1f4f6387bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["X", "0"], ",", 
   SubscriptBox["X", "1"]}], "}"}]], "Output",
 CellChangeTimes->{3.865929770110902*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"f4bbf92d-2869-4154-aeec-19578da11a4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitSuperoperator", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    SubscriptBox["Rx", "1"], "[", "a", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865929792531032*^9, 3.865929797921379*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"e5fa28b3-47a3-4862-a8ae-f4c0aeab81f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["Rx", "1"], "[", "a", "]"}], ",", 
   RowBox[{
    SubscriptBox["Rx", "3"], "[", 
    RowBox[{"-", "a"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.865929798184396*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"cf6c3aae-c121-47c0-949c-5f4decd1a5a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetCircuitSuperoperator", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    SubscriptBox["Depol", "1"], "[", "a", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865929804397135*^9, 3.865929805014598*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"d3d3e28a-0122-41fb-9518-27ff661e96dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["Matr", 
    RowBox[{"1", ",", "3"}]], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SqrtBox[
          RowBox[{"1", "-", "a"}]], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox[
           RowBox[{"1", "-", "a"}]], "]"}]}], "+", 
        RowBox[{
         FractionBox["1", "3"], " ", 
         SqrtBox["a"], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox["a"], "]"}]}]}], ",", "0", ",", "0", ",", 
       RowBox[{
        FractionBox["2", "3"], " ", 
        SqrtBox["a"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["a"], "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{
        RowBox[{
         SqrtBox[
          RowBox[{"1", "-", "a"}]], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox[
           RowBox[{"1", "-", "a"}]], "]"}]}], "-", 
        RowBox[{
         FractionBox["1", "3"], " ", 
         SqrtBox["a"], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox["a"], "]"}]}]}], ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       RowBox[{
        RowBox[{
         SqrtBox[
          RowBox[{"1", "-", "a"}]], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox[
           RowBox[{"1", "-", "a"}]], "]"}]}], "-", 
        RowBox[{
         FractionBox["1", "3"], " ", 
         SqrtBox["a"], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox["a"], "]"}]}]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        FractionBox["2", "3"], " ", 
        SqrtBox["a"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["a"], "]"}]}], ",", "0", ",", "0", ",", 
       RowBox[{
        RowBox[{
         SqrtBox[
          RowBox[{"1", "-", "a"}]], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox[
           RowBox[{"1", "-", "a"}]], "]"}]}], "+", 
        RowBox[{
         FractionBox["1", "3"], " ", 
         SqrtBox["a"], " ", 
         RowBox[{"Conjugate", "[", 
          SqrtBox["a"], "]"}]}]}]}], "}"}]}], "}"}], "]"}], "}"}]], "Output",
 CellChangeTimes->{3.865929805772335*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"0aae3bc7-6569-47f2-8c8f-70e69877a087"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changes", "Section",
 CellChangeTimes->{{3.865926632955805*^9, 3.865926640877442*^9}},
 CellTags->"Changes",ExpressionUUID->"0193cc8e-f7c3-459b-bf52-fe7744bde890"],

Cell[CellGroupData[{

Cell["Gate symbols are now protected", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}, {3.865929554788669*^9, 3.865929559279708*^9}, {
  3.8659297081908207`*^9, 3.865929709839326*^9}, {3.865931015016788*^9, 
  3.865931018723405*^9}},ExpressionUUID->"75ea72b3-297d-4dd7-9d6d-\
ea61180c8e31"],

Cell["You\[CloseCurlyQuote]ll never accidentally override them again!", "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.8659295676745043`*^9, 3.8659295987461452`*^9}, {
  3.865929633810301*^9, 3.865929787339891*^9}, {3.865930946230845*^9, 
  3.865930957502337*^9}, {3.8659310436562433`*^9, 3.865931052702162*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"1bdf190f-e592-4fac-8850-e77093ff3968"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "C"}]], "Input",
 CellChangeTimes->{{3.8659264704515343`*^9, 3.865926473511683*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"3cf07c34-4194-468a-85ef-513e8849fe69"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/C",
              ButtonNote->"paclet:ref/C"],
             "\"paclet:ref/C\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"C is a declaration of control qubits (subscript), \
which can wrap other gates to conditionally/controlled apply them.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/C", 
                    "paclet:ref/C", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL["http://reference.wolfram.com/language/ref/C.html"], 
                    None}, "http://reference.wolfram.com/language/ref/C.html",
                     "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "NHoldAll", ",", "Protected", ",", "ReadProtected"}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`C\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/C",
              ButtonNote->"paclet:ref/C"],
             "\"paclet:ref/C\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"C is a declaration of control qubits (subscript), \
which can wrap other gates to conditionally/controlled apply them.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "C is a declaration of control qubits (subscript), which can wrap other \
gates to conditionally/controlled apply them.", 
    "Documentation" -> <|
     "Local" -> "paclet:ref/C", "Web" -> 
      "http://reference.wolfram.com/language/ref/C.html"|>, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {NHoldAll, Protected, ReadProtected}, 
    "FullName" -> "System`C"|>, False]]], "Output",
 CellChangeTimes->{3.865926473727418*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"d2c39a56-8f97-40f0-9c7a-c31d005ebef6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"C", " ", "=", " ", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.865931033717752*^9, 3.865931034261203*^9}, 
   3.865931543531885*^9},
 CellLabel->
  "In[146]:=",ExpressionUUID->"ee26300b-c49d-42a6-830a-2b72db409367"],

Cell[BoxData[
 TemplateBox[{
  "Set", "wrsym", "\"Symbol \\!\\(\\*RowBox[{\\\"C\\\"}]\\) is Protected.\"", 
   2, 146, 8, 32099638796025839539, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.865931034545438*^9, 3.865931543914465*^9},
 CellLabel->
  "During evaluation of \
In[146]:=",ExpressionUUID->"85dd8a07-8fec-40ba-b6bd-9a6674d05838"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcCircuitMatrix will report unrecognised gates", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}, {3.865929554788669*^9, 3.865929559279708*^9}, {
  3.8659297081908207`*^9, 3.865929709839326*^9}, {3.865931015016788*^9, 
  3.865931018723405*^9}, {3.8659310868463717`*^9, 
  3.865931095777604*^9}},ExpressionUUID->"8e1c6c5d-f6ef-4c87-afab-\
3a7caf6564db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcCircuitMatrix", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    SubscriptBox["X", "0"], 
    SubscriptBox["Y", "1"], " ", 
    SubscriptBox["Shplee", "2"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.865931097505144*^9, 3.865931118989317*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"72e62d81-c550-4f80-8a8a-7b84322cd6f8"],

Cell[BoxData[
 TemplateBox[{
  "CalcCircuitMatrix", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Circuit contained an unrecognised or \
unsupported gate: \
\\\\\\\\!\\\\\\\\(\\\\\\\\*SubscriptBox[\\\\\\\\\\\\\\\"Shplee\\\\\\\\\\\\\\\"\
, \\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\"]\\\\\\\\)\\\\\\\"\\\"}]\\)\"", 2, 134, 5, 
   32099638796025839539, "Local", "QuEST`CalcCircuitMatrix"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.865931119254239*^9},
 CellLabel->
  "During evaluation of \
In[134]:=",ExpressionUUID->"8d1a4846-1e89-493b-8e5c-d744048b7c25"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.865931119265234*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"0719f42f-08bf-4588-939c-c9c2aa29204d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pauli Hamiltonians will ignore zero scalars", "Subsection",
 CellChangeTimes->{{3.865926649708068*^9, 3.865926650642035*^9}, {
  3.8659267853724337`*^9, 3.865926786443843*^9}, {3.8659271602256613`*^9, 
  3.865927163441848*^9}, {3.865927977852623*^9, 3.865927979776565*^9}, {
  3.865928395664648*^9, 3.865928397759004*^9}, {3.8659290107994537`*^9, 
  3.86592902085425*^9}, {3.865929554788669*^9, 3.865929559279708*^9}, {
  3.8659297081908207`*^9, 3.865929709839326*^9}, {3.865931015016788*^9, 
  3.865931018723405*^9}, {3.8659310868463717`*^9, 3.865931095777604*^9}, {
  3.865931381674603*^9, 
  3.865931391382653*^9}},ExpressionUUID->"aba137f8-bc1f-4c54-8e00-\
3f5eb922f5b3"],

Cell[TextData[{
 "Previously, functions like ",
 StyleBox["ApplyPauliSum",
  FontWeight->"Bold"],
 ", ",
 StyleBox["CalcExpecPauliSum",
  FontWeight->"Bold"],
 " and ",
 StyleBox["CalcPauliSumMatrix",
  FontWeight->"Bold"],
 " would report a \[OpenCurlyDoubleQuote]stand-alone scalar\
\[CloseCurlyDoubleQuote] error when they contained a numerical zero, ",
 StyleBox["0.`",
  FontWeight->"Bold"],
 ". Now, this innocuous term often resulting from ",
 StyleBox["SimplifyPaulis",
  FontWeight->"Bold"],
 " will be ignored"
}], "Text",
 CellChangeTimes->{{3.839625447744664*^9, 3.839625448659511*^9}, {
  3.8396258552053022`*^9, 3.839625856772881*^9}, {3.839629472363298*^9, 
  3.839629586959496*^9}, {3.8396310504226418`*^9, 3.8396310801004887`*^9}, {
  3.8659264219366293`*^9, 3.865926422800153*^9}, {3.865926536219606*^9, 
  3.865926551565393*^9}, {3.865927394816921*^9, 3.865927400540885*^9}, {
  3.865928720663226*^9, 3.865928744617077*^9}, {3.8659287942070827`*^9, 
  3.8659288243179283`*^9}, {3.865928951036592*^9, 3.865928983228979*^9}, {
  3.865929035310246*^9, 3.8659290507297153`*^9}, {3.865929381810892*^9, 
  3.8659293823235064`*^9}, {3.8659295676745043`*^9, 3.8659295987461452`*^9}, {
  3.865929633810301*^9, 3.865929787339891*^9}, {3.865930946230845*^9, 
  3.865930957502337*^9}, {3.8659310436562433`*^9, 3.865931052702162*^9}, {
  3.865931396912765*^9, 3.865931436236978*^9}, {3.8659315010955963`*^9, 
  3.865931530881075*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"c63cfe3a-6fb5-4105-bc5b-eb1557c8c13f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"h", " ", "=", " ", 
   RowBox[{
    RowBox[{
     SubscriptBox["X", "0"], 
     SubscriptBox["Y", "1"], 
     SubscriptBox["Z", "2"]}], " ", "+", " ", "0."}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Psi]", ",", "\[Phi]"}], "}"}], " ", "=", " ", 
   RowBox[{"InitPlusState", " ", "/@", " ", 
    RowBox[{"CreateQuregs", "[", 
     RowBox[{"3", ",", "2"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"CalcExpecPauliSum", "[", 
  RowBox[{"\[Psi]", ",", "h", ",", " ", "\[Phi]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.865931234554582*^9, 3.865931262621273*^9}, {
  3.865931355535982*^9, 3.8659313758047867`*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"92a92549-9d44-44ed-89c5-538484304de3"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{3.8659313762176123`*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"3e420ef0-3671-433c-84cf-3eb334ca5d66"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{720, 855},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"67fcfb84-57d8-4654-bf40-abb01bad2e43"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Matr"->{
  Cell[3339, 105, 166, 2, 54, "Subsection",ExpressionUUID->"0f2d32c7-ba41-498d-8faf-b48e3b4a207f",
   CellTags->"Matr"]},
 "GetCircuitInverse"->{
  Cell[25992, 678, 297, 5, 54, "Subsection",ExpressionUUID->"248b4d5a-65f5-43b6-88ee-273c8a8ec984",
   CellTags->"GetCircuitInverse"]},
 "SimplifyCircuit"->{
  Cell[57191, 1431, 339, 5, 54, "Subsection",ExpressionUUID->"603140cc-4dc0-4860-8e44-1862d0817e1f",
   CellTags->"SimplifyCircuit"]},
 "GetKnownCircuit"->{
  Cell[172042, 3920, 388, 6, 54, "Subsection",ExpressionUUID->"5f591cdc-a4f2-489f-8391-1ce3cfe1e206",
   CellTags->"GetKnownCircuit"]},
 "CalcCircuitMatrix"->{
  Cell[213297, 4832, 442, 7, 54, "Subsection",ExpressionUUID->"2673500d-91ed-439c-9ceb-45d5c8f97387",
   CellTags->"CalcCircuitMatrix"]},
 "GetCircuitGeneralised"->{
  Cell[251826, 5748, 498, 8, 54, "Subsection",ExpressionUUID->"6f14da4c-cb93-46a2-8c26-78a42c409703",
   CellTags->"GetCircuitGeneralised"]},
 "GetCircuitSuperoperator"->{
  Cell[290221, 6662, 553, 9, 54, "Subsection",ExpressionUUID->"f6f7b4ff-7f8b-4166-a7c6-7e0a7c8e648b",
   CellTags->"GetCircuitSuperoperator"]},
 "Changes"->{
  Cell[332652, 7650, 169, 2, 67, "Section",ExpressionUUID->"0193cc8e-f7c3-459b-bf52-fe7744bde890",
   CellTags->"Changes"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Matr", 352659, 8147},
 {"GetCircuitInverse", 352805, 8150},
 {"SimplifyCircuit", 352963, 8153},
 {"GetKnownCircuit", 353120, 8156},
 {"CalcCircuitMatrix", 353280, 8159},
 {"GetCircuitGeneralised", 353446, 8162},
 {"GetCircuitSuperoperator", 353618, 8165},
 {"Changes", 353776, 8168}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 98, "Title",ExpressionUUID->"bd254b28-6128-423f-9c33-decd95105024"],
Cell[CellGroupData[{
Cell[765, 29, 199, 4, 69, "Chapter",ExpressionUUID->"57e67318-85e7-402b-92fb-2d3bd573d1ae"],
Cell[967, 35, 462, 9, 72, "Code",ExpressionUUID->"69ab282b-425b-49bc-9a5a-f64db51eb648"],
Cell[1432, 46, 1700, 48, 258, "Text",ExpressionUUID->"7abe3c67-df0f-460e-883a-c9c9b5840f63"],
Cell[CellGroupData[{
Cell[3157, 98, 157, 3, 67, "Section",ExpressionUUID->"ab35dea3-c0c7-42b8-8dc3-4881241cacc8"],
Cell[CellGroupData[{
Cell[3339, 105, 166, 2, 54, "Subsection",ExpressionUUID->"0f2d32c7-ba41-498d-8faf-b48e3b4a207f",
 CellTags->"Matr"],
Cell[3508, 109, 800, 17, 97, "Text",ExpressionUUID->"0e222aec-ee98-4631-917c-1a408a4939ae"],
Cell[CellGroupData[{
Cell[4333, 130, 194, 3, 30, "Input",ExpressionUUID->"ba01a00d-b84a-43ac-b12b-992d9d4b42ab"],
Cell[4530, 135, 8942, 222, 119, "Output",ExpressionUUID->"e04a366a-07d6-4c49-a3cb-627dfcc0c9ad"]
}, Open  ]],
Cell[13487, 360, 982, 27, 81, "Input",ExpressionUUID->"4a76b223-1551-44b5-9f03-c5cf9c532298"],
Cell[CellGroupData[{
Cell[14494, 391, 212, 3, 30, "Input",ExpressionUUID->"b46d5ee8-449a-4e50-863c-b399bf899207"],
Cell[14709, 396, 853, 17, 186, "Output",ExpressionUUID->"536afcfc-bc26-4896-b237-e5c1a6cf65ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15599, 418, 434, 11, 30, "Input",ExpressionUUID->"3260e531-3759-4ed8-bae2-506ade5e894e"],
Cell[16036, 431, 6877, 154, 151, "Output",ExpressionUUID->"d796cc21-a999-4d28-99f7-0011cff4ea84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22950, 590, 559, 12, 73, "Input",ExpressionUUID->"3d461c06-3dc8-4f12-83a5-18784bab5b63"],
Cell[23512, 604, 2431, 68, 287, "Output",ExpressionUUID->"49d8ff87-8068-43ce-a41a-3ef455cd8caa"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25992, 678, 297, 5, 54, "Subsection",ExpressionUUID->"248b4d5a-65f5-43b6-88ee-273c8a8ec984",
 CellTags->"GetCircuitInverse"],
Cell[26292, 685, 710, 17, 74, "Text",ExpressionUUID->"f2e091a4-a99f-4f00-8d8d-492011b65c38"],
Cell[CellGroupData[{
Cell[27027, 706, 206, 3, 30, "Input",ExpressionUUID->"9bbb8bad-c6a4-449f-bbcf-fc13645bea1a"],
Cell[27236, 711, 12533, 304, 118, "Output",ExpressionUUID->"a0a24843-25ba-479b-afa6-f618a04f3713"]
}, Open  ]],
Cell[39784, 1018, 523, 7, 51, "Text",ExpressionUUID->"3693ac41-e1e2-41cb-bf21-795d7972963b"],
Cell[CellGroupData[{
Cell[40332, 1029, 1742, 50, 119, "Input",ExpressionUUID->"96d16e95-f60d-400a-96f9-97a72e39deae"],
Cell[42077, 1081, 3143, 60, 185, "Output",ExpressionUUID->"1c84e032-0478-466e-bb80-03c3edf6e8f5"]
}, Open  ]],
Cell[45235, 1144, 539, 8, 51, "Text",ExpressionUUID->"3fc1d6b9-e743-4a6e-b403-aff5273d61b3"],
Cell[CellGroupData[{
Cell[45799, 1156, 254, 4, 30, "Input",ExpressionUUID->"a570de6e-e6fc-4df3-b550-8cf15f3070f4"],
Cell[46056, 1162, 2575, 85, 137, "Output",ExpressionUUID->"3e0b8004-9a4b-4c90-8275-752bedcd70c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48668, 1252, 367, 7, 30, "Input",ExpressionUUID->"cf1f1a17-a7b8-46c0-a157-57aec5d4f7b3"],
Cell[49038, 1261, 6539, 127, 180, "Output",ExpressionUUID->"9e1ae156-c522-431b-b6c2-fbbc83b20f1c"]
}, Open  ]],
Cell[55592, 1391, 516, 7, 51, "Text",ExpressionUUID->"787d6ee1-549e-4a49-83a5-c2753caf3a8b"],
Cell[CellGroupData[{
Cell[56133, 1402, 277, 5, 30, "Input",ExpressionUUID->"7f0dd562-b437-4203-ab26-f4bfc2023a54"],
Cell[56413, 1409, 571, 12, 24, "Message",ExpressionUUID->"33c4480e-f7d4-40d6-b8b2-759b09486361"],
Cell[56987, 1423, 155, 2, 34, "Output",ExpressionUUID->"64b48e7b-36b8-420f-b878-76db785cabae"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57191, 1431, 339, 5, 54, "Subsection",ExpressionUUID->"603140cc-4dc0-4860-8e44-1862d0817e1f",
 CellTags->"SimplifyCircuit"],
Cell[57533, 1438, 1500, 27, 327, "Text",ExpressionUUID->"10ebd17f-d838-4dca-ae5c-1724bad5776b"],
Cell[CellGroupData[{
Cell[59058, 1469, 204, 3, 30, "Input",ExpressionUUID->"4f0c4c7c-5165-42bd-ad05-69ec907db3a7"],
Cell[59265, 1474, 83290, 1784, 95, "Output",ExpressionUUID->"aabc0f13-d2cd-4ce0-9bd9-85b19e2e16f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142592, 3263, 710, 19, 33, "Input",ExpressionUUID->"77a9db33-1ba2-4c1a-8bfd-369cd30daaa6"],
Cell[143305, 3284, 340, 10, 49, "Output",ExpressionUUID->"3eccdbf1-b4e0-4caf-8091-07f3c555c701"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143682, 3299, 1142, 33, 56, "Input",ExpressionUUID->"b3de9dd0-5ed3-4e05-aa72-fba66dd075a8"],
Cell[144827, 3334, 218, 4, 34, "Output",ExpressionUUID->"79a984ef-ad66-4181-b454-7352e162d5aa"]
}, Open  ]],
Cell[145060, 3341, 627, 11, 74, "Text",ExpressionUUID->"ad49ab6b-f2b0-46e4-bfe8-bc86df83f6c9"],
Cell[CellGroupData[{
Cell[145712, 3356, 6402, 193, 395, "Input",ExpressionUUID->"3ceb98d7-4ae4-45c1-a9fe-2e5b6466c2e6"],
Cell[152117, 3551, 13137, 237, 80, "Output",ExpressionUUID->"0a269124-9f44-46bf-aed6-eca86a91a642"],
Cell[165257, 3790, 6736, 124, 76, "Output",ExpressionUUID->"5bea890d-f754-4c90-ab35-b6826c5cc24b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[172042, 3920, 388, 6, 54, "Subsection",ExpressionUUID->"5f591cdc-a4f2-489f-8391-1ce3cfe1e206",
 CellTags->"GetKnownCircuit"],
Cell[172433, 3928, 698, 13, 51, "Text",ExpressionUUID->"3f9ef4f6-2dcb-4ba8-97a2-ea9da79c8c83"],
Cell[CellGroupData[{
Cell[173156, 3945, 202, 3, 30, "Input",ExpressionUUID->"c9d3d1f0-70bb-4629-8817-159aa012a825"],
Cell[173361, 3950, 16863, 396, 119, "Output",ExpressionUUID->"4dd12123-4e04-4f04-a633-65bf4f4f2bca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190261, 4351, 293, 5, 30, "Input",ExpressionUUID->"794a377e-470d-4fc3-9e3d-3d37302fb4db"],
Cell[190557, 4358, 5885, 106, 171, "Output",ExpressionUUID->"922eca1a-8224-4dda-b1f8-bae6dd1bcd14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196479, 4469, 392, 8, 30, "Input",ExpressionUUID->"98860a16-3dac-4527-b65f-ad71f86271da"],
Cell[196874, 4479, 8338, 150, 202, "Output",ExpressionUUID->"e0b1ae9e-0fff-4634-82e8-902a14c65189"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205249, 4634, 657, 16, 52, "Input",ExpressionUUID->"70d7f130-7613-4532-9db9-f3d0e0afff64"],
Cell[205909, 4652, 2445, 84, 126, "Output",ExpressionUUID->"2449e71d-0889-40ed-a741-491a497293d7"],
Cell[208357, 4738, 4163, 74, 110, "Output",ExpressionUUID->"740c6e8b-195b-4ac2-8f82-f3b3d5c67e5e"]
}, Open  ]],
Cell[212535, 4815, 725, 12, 51, "Text",ExpressionUUID->"2d39ae47-7752-469c-b40e-01a3b534227c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213297, 4832, 442, 7, 54, "Subsection",ExpressionUUID->"2673500d-91ed-439c-9ceb-45d5c8f97387",
 CellTags->"CalcCircuitMatrix"],
Cell[213742, 4841, 878, 18, 51, "Text",ExpressionUUID->"9ca81c5d-ad4b-413b-9f85-49f7d23dc914"],
Cell[CellGroupData[{
Cell[214645, 4863, 206, 3, 30, "Input",ExpressionUUID->"3078f96d-dfe1-480b-8faf-3b53794aae9b"],
Cell[214854, 4868, 23167, 519, 286, "Output",ExpressionUUID->"efe52d87-74c6-49f2-b28b-8450a67bfa7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238058, 5392, 330, 7, 32, "Input",ExpressionUUID->"39032c55-75a0-401d-875d-0540a01b6068"],
Cell[238391, 5401, 1811, 57, 110, "Output",ExpressionUUID->"e5726bd0-5f8b-49e0-809c-3b02a63d6f7b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240239, 5463, 1388, 42, 99, "Input",ExpressionUUID->"643a2ca8-ac31-4a17-a413-9ae6943d31a4"],
Cell[241630, 5507, 2215, 38, 119, "Output",ExpressionUUID->"ce497b15-c5c4-4b62-881f-c0a9a5a87786"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243882, 5550, 769, 19, 52, "Input",ExpressionUUID->"7d62e4fb-3a05-4587-adc9-af6e9927271d"],
Cell[244654, 5571, 351, 6, 34, "Output",ExpressionUUID->"6eb8bdc3-0935-4e17-bfda-5c724496b1e7"]
}, Open  ]],
Cell[245020, 5580, 1115, 23, 74, "Text",ExpressionUUID->"6ea243fa-0205-42e3-97e5-83be32de511e"],
Cell[CellGroupData[{
Cell[246160, 5607, 695, 18, 73, "Input",ExpressionUUID->"3e043417-ac14-4c0e-9ff4-2e671ecdf593"],
Cell[246858, 5627, 1629, 26, 161, "Output",ExpressionUUID->"6229ef35-202c-4f14-96ec-e3a98747f717"]
}, Open  ]],
Cell[248502, 5656, 995, 16, 74, "Text",ExpressionUUID->"881e6ccc-a7ec-410f-8ab9-9ac9f3edf48b"],
Cell[CellGroupData[{
Cell[249522, 5676, 936, 26, 75, "Input",ExpressionUUID->"b973435d-3d9d-411a-b866-98d9cf62d0aa"],
Cell[250461, 5704, 1316, 38, 77, "Output",ExpressionUUID->"6579b4b3-2d55-4c4b-a231-e5156b014eec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[251826, 5748, 498, 8, 54, "Subsection",ExpressionUUID->"6f14da4c-cb93-46a2-8c26-78a42c409703",
 CellTags->"GetCircuitGeneralised"],
Cell[252327, 5758, 1101, 21, 97, "Text",ExpressionUUID->"f82d0053-21f7-4e98-b7ea-a22d3af5d3b4"],
Cell[CellGroupData[{
Cell[253453, 5783, 208, 3, 30, "Input",ExpressionUUID->"feaf7c51-d187-4468-ba09-fac2e11782a8"],
Cell[253664, 5788, 32895, 745, 119, "Output",ExpressionUUID->"d1a1e556-b776-4bda-8695-a7a0230ef893"]
}, Open  ]],
Cell[CellGroupData[{
Cell[286596, 6538, 420, 10, 30, "Input",ExpressionUUID->"9ff7a4cd-2943-4ad5-9d34-d100c1a31859"],
Cell[287019, 6550, 1178, 35, 60, "Output",ExpressionUUID->"61d10362-7959-4f53-837d-b4d90a82a881"]
}, Open  ]],
Cell[CellGroupData[{
Cell[288234, 6590, 315, 6, 32, "Input",ExpressionUUID->"35acea83-77ad-41ff-a2df-eed7f0fe1a8b"],
Cell[288552, 6598, 1620, 58, 107, "Output",ExpressionUUID->"c9052fab-210c-4102-a351-bd19653c0a10"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[290221, 6662, 553, 9, 54, "Subsection",ExpressionUUID->"f6f7b4ff-7f8b-4166-a7c6-7e0a7c8e648b",
 CellTags->"GetCircuitSuperoperator"],
Cell[290777, 6673, 1116, 21, 74, "Text",ExpressionUUID->"0129016e-6f58-403b-bd2b-bf8f910f2670"],
Cell[CellGroupData[{
Cell[291918, 6698, 211, 3, 30, "Input",ExpressionUUID->"70c13630-224d-4445-a094-719ddd5228d8"],
Cell[292132, 6703, 36533, 812, 190, "Output",ExpressionUUID->"2c4ba091-decd-48fc-ac36-1a6071fc5c09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[328702, 7520, 310, 6, 30, "Input",ExpressionUUID->"0a5099c9-c926-433a-bf06-5a1f4f6387bc"],
Cell[329015, 7528, 240, 6, 34, "Output",ExpressionUUID->"f4bbf92d-2869-4154-aeec-19578da11a4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[329292, 7539, 314, 6, 30, "Input",ExpressionUUID->"e5fa28b3-47a3-4862-a8ae-f4c0aeab81f5"],
Cell[329609, 7547, 322, 9, 34, "Output",ExpressionUUID->"cf6c3aae-c121-47c0-949c-5f4decd1a5a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[329968, 7561, 317, 6, 32, "Input",ExpressionUUID->"d3d3e28a-0122-41fb-9518-27ff661e96dd"],
Cell[330288, 7569, 2303, 74, 245, "Output",ExpressionUUID->"0aae3bc7-6569-47f2-8c8f-70e69877a087"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[332652, 7650, 169, 2, 67, "Section",ExpressionUUID->"0193cc8e-f7c3-459b-bf52-fe7744bde890",
 CellTags->"Changes"],
Cell[CellGroupData[{
Cell[332846, 7656, 568, 8, 54, "Subsection",ExpressionUUID->"75ea72b3-297d-4dd7-9d6d-ea61180c8e31"],
Cell[333417, 7666, 983, 13, 51, "Text",ExpressionUUID->"1bdf190f-e592-4fac-8850-e77093ff3968"],
Cell[CellGroupData[{
Cell[334425, 7683, 190, 3, 30, "Input",ExpressionUUID->"3cf07c34-4194-468a-85ef-513e8849fe69"],
Cell[334618, 7688, 11934, 292, 119, "Output",ExpressionUUID->"d2c39a56-8f97-40f0-9c7a-c31d005ebef6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346589, 7985, 252, 6, 30, "Input",ExpressionUUID->"ee26300b-c49d-42a6-830a-2b72db409367"],
Cell[346844, 7993, 364, 8, 28, "Message",ExpressionUUID->"85dd8a07-8fec-40ba-b6bd-9a6674d05838"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[347257, 8007, 637, 9, 54, "Subsection",ExpressionUUID->"8e1c6c5d-f6ef-4c87-afab-3a7caf6564db"],
Cell[CellGroupData[{
Cell[347919, 8020, 364, 9, 32, "Input",ExpressionUUID->"72e62d81-c550-4f80-8a8a-7b84322cd6f8"],
Cell[348286, 8031, 566, 12, 28, "Message",ExpressionUUID->"8d1a4846-1e89-493b-8e5c-d744048b7c25"],
Cell[348855, 8045, 159, 3, 34, "Output",ExpressionUUID->"0719f42f-08bf-4588-939c-c9c2aa29204d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[349063, 8054, 681, 10, 54, "Subsection",ExpressionUUID->"aba137f8-bc1f-4c54-8e00-3f5eb922f5b3"],
Cell[349747, 8066, 1536, 33, 97, "Text",ExpressionUUID->"c63cfe3a-6fb5-4105-bc5b-eb1557c8c13f"],
Cell[CellGroupData[{
Cell[351308, 8103, 787, 21, 73, "Input",ExpressionUUID->"92a92549-9d44-44ed-89c5-538484304de3"],
Cell[352098, 8126, 157, 3, 34, "Output",ExpressionUUID->"3e420ef0-3671-433c-84cf-3eb334ca5d66"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

