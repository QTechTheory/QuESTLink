(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    443758,      10140]
NotebookOptionsPosition[    426751,       9843]
NotebookOutlinePosition[    427207,       9861]
CellTagsIndexPosition[    427164,       9858]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Release Summary", "Title",
 CellChangeTimes->{{3.8768156684045258`*^9, 
  3.876815670840822*^9}},ExpressionUUID->"bf919c1e-dd86-4e2c-867d-\
af2c9fdb1495"],

Cell[CellGroupData[{

Cell["V0.12", "Chapter",
 CellChangeTimes->{{3.876815687110483*^9, 
  3.876815702227635*^9}},ExpressionUUID->"c6101b35-fb3a-45d5-bc21-\
70742ad7e437"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Import", "[", "\"\<https://qtechtheory.org/questlink.m\>\"", "]"}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"CreateDownloadedQuESTEnv", "[", "]"}], ";"}]}], "Code",
 CellChangeTimes->{{3.876841430861274*^9, 
  3.876841445202071*^9}},ExpressionUUID->"2a74ce87-dc1e-4b54-9df0-\
8db2187430e8"],

Cell[TextData[{
 "This ",
 StyleBox["major",
  FontSlant->"Italic"],
 " release significantly extends QuESTlink\[CloseCurlyQuote]s capabilities \
for efficient and convenient simulation of quantum variational algorithms, as \
well as generally improving quality-of-life. It includes asymptotically \
improved functions to simulate quantum gradient descent and quantum natural \
gradient (even a noise aware version!), the relaxing of previous ansatz \
constraints, functions to generate Pauli strings and ansatz circuits, and \
improved error messages. This release involved a complete refactor of \
QuESTlink\[CloseCurlyQuote]s C++ backend which is now more modular, \
defensively-designed, and enables backend circuit-level optimisations and \
functions. It also adds native MacoS ARM (M1) support."
}], "Text",
 CellChangeTimes->{{3.876835009809428*^9, 3.876835268617816*^9}, {
  3.8768382101769657`*^9, 3.876838210497727*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"9d879705-0543-4df2-afab-7c8010c6396a"],

Cell[CellGroupData[{

Cell["New features", "Section",
 CellChangeTimes->{{3.876817617404207*^9, 
  3.876817618777925*^9}},ExpressionUUID->"389dc032-c1e0-415c-8e3e-\
534c589fe473"],

Cell[CellGroupData[{

Cell["GetKnownCircuit", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876822911707309*^9, 
  3.8768229181493187`*^9}, {3.8768281866221237`*^9, 3.876828190424327*^9}, {
  3.876828431785796*^9, 
  3.876828433422587*^9}},ExpressionUUID->"ed58bc22-3245-4c01-936b-\
a338b52ecfc1"],

Cell[TextData[{
 "Three new ansatz circuits have been added to ",
 StyleBox["GetKnownCircuit",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829070186861*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"275055e6-3043-4c0c-818d-dae8f1036a19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetKnownCircuit"}]], "Input",
 CellChangeTimes->{{3.876828426849791*^9, 3.876828434461892*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2825aa5e-7e77-439f-b34d-22624da69f84"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetKnownCircuit[\\\"QFT\\\", \
qubits]\\nGetKnownCircuit[\\\"Trotter\\\", hamil, order, reps, time]\\n    \
(https://arxiv.org/pdf/math-ph/0506007.pdf)\\nGetKnownCircuit[\\\"\
HardwareEfficientAnsatz\\\", reps, paramSymbol, qubits]\\n    \
(https://arxiv.org/pdf/1704.05018.pdf)\\nGetKnownCircuit[\\\"TrotterAnsatz\\\"\
, hamil, order, reps, paramSymbol]\\n    \
(https://arxiv.org/pdf/1507.08969.pdf)\\nGetKnownCircuit[\\\"LowDepthAnsatz\\\
\", reps, paramSymbol, qubits]\\n    (https://arxiv.org/pdf/1801.01053.pdf)\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    RowBox[{"\"QFT\"", ",", "QuEST`Private`qubits_List"}], 
                    "]"}], ":=", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    SubscriptBox["H", 
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`n", "\[RightDoubleBracket]"}]], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Ph", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`n", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    RowBox[{"QuEST`Private`n", "-", "QuEST`Private`m"}], 
                    "\[RightDoubleBracket]"}]}]], "[", 
                    FractionBox["\[Pi]", 
                    SuperscriptBox["2", "QuEST`Private`m"]], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`m", ",", "1", ",", 
                    RowBox[{"QuEST`Private`n", "-", "1"}]}], "}"}]}], "]"}]}],
                     "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`n", ",", 
                    RowBox[{"Length", "[", "QuEST`Private`qubits", "]"}], ",",
                     "1", ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    SubscriptBox["SWAP", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    "QuEST`Private`q", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`qubits", "\[LeftDoubleBracket]", 
                    RowBox[{"-", "QuEST`Private`q"}], 
                    "\[RightDoubleBracket]"}]}]], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`q", ",", "1", ",", 
                    RowBox[{"Floor", "[", 
                    FractionBox[
                    RowBox[{"Length", "[", "QuEST`Private`qubits", "]"}], 
                    "2"], "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}]}, {" "}, {
                   
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"QFT\"", ",", "QuEST`Private`numQubits_Integer"}], 
                    "]"}], ":=", 
                    RowBox[{"GetKnownCircuit", "[", 
                    RowBox[{"\"QFT\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"Trotter\"", ",", "QuEST`Private`hamil_", ",", 
                    "QuEST`Private`order_Integer", ",", 
                    "QuEST`Private`reps_Integer", ",", 
                    "QuEST`Private`time_"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"QuEST`Private`order", "\[GreaterEqual]", "1"}], 
                    "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"QuEST`Private`order", "===", "1"}], "||", 
                    RowBox[{"EvenQ", "[", "QuEST`Private`order", "]"}]}], 
                    ")"}], "&&", 
                    
                    RowBox[{
                    "QuEST`Private`reps", "\[GreaterEqual]", "1"}]}]}], ":=", 
                    
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`terms", "=", 
                    
                    RowBox[{"QuEST`Private`separateTermsOfPauliHamil", "[", 
                    "QuEST`Private`hamil", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`gates", "=", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"2", " ", "#1"}], ",", "#2"}], "]"}], "&"}], ",", 
                    
                    RowBox[{"QuEST`Private`getTrotterTerms", "[", 
                    
                    RowBox[{"QuEST`Private`terms", ",", "QuEST`Private`order",
                     ",", "QuEST`Private`reps", ",", "QuEST`Private`time"}], 
                    "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"QuEST`Private`gates", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"_", ",", 
                    SubscriptBox["Id", "_Integer"]}], "]"}], "\[RuleDelayed]",
                     "Nothing"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"HardwareEfficientAnsatz\"", ",", 
                    "QuEST`Private`reps_Integer", ",", 
                    "QuEST`Private`param_Symbol", ",", 
                    "QuEST`Private`qubits_List"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"QuEST`Private`i", "=", "1"}], ",", 
                    "QuEST`Private`ent"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`ent", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["C", 
                    
                    RowBox[{"#1", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]], "[", 
                    SubscriptBox["Z", 
                    
                    RowBox[{"#1", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}]], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"Partition", "[", 
                    RowBox[{"QuEST`Private`qubits", ",", "2", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "]"}]}]}], ";", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    RowBox[{"QuEST`Private`param", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`qubits"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`g", ",", 
                    RowBox[{"{", 
                    RowBox[{"Ry", ",", "Rz"}], "}"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"QuEST`Private`ent", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "All", ";;", "2"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`ent", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ";;", "All", ";;", "2"}], 
                    "\[RightDoubleBracket]"}]}], "}"}], ",", 
                    "QuEST`Private`reps"}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["QuEST`Private`g", "QuEST`Private`q"], "[", 
                    RowBox[{"QuEST`Private`param", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`qubits"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`g", ",", 
                    RowBox[{"{", 
                    RowBox[{"Ry", ",", "Rz"}], "}"}]}], "}"}]}], "]"}]}], 
                    "}"}], "]"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"HardwareEfficientAnsatz\"", ",", 
                    "QuEST`Private`reps_Integer", ",", 
                    "QuEST`Private`param_Symbol", ",", 
                    "QuEST`Private`numQubits_Integer"}], "]"}], ":=", 
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"HardwareEfficientAnsatz\"", ",", "QuEST`Private`reps", 
                    ",", "QuEST`Private`param", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"TrotterAnsatz\"", ",", "QuEST`Private`hamil_", ",", 
                    "QuEST`Private`order_Integer", ",", 
                    "QuEST`Private`reps_Integer", ",", 
                    "QuEST`Private`param_Symbol"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`i", "=", "1"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{"\"Trotter\"", ",", "QuEST`Private`hamil", ",", 
                    "QuEST`Private`order", ",", "QuEST`Private`reps", ",", 
                    "1"}], "]"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{"QuEST`Private`x_", ",", "QuEST`Private`p_"}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`param", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], ",", 
                    "QuEST`Private`p"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"QuEST`Private`g", ":", 
                    SubscriptBox[
                    RowBox[{"Rx", "|", "Ry", "|", "Rz"}], "_"]}], ")"}], "[", 
                    "QuEST`Private`x_", "]"}], "\[RuleDelayed]", 
                    RowBox[{"QuEST`Private`g", "[", 
                    RowBox[{"QuEST`Private`param", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], "]"}]}]}], 
                    "}"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"LowDepthAnsatz\"", ",", "QuEST`Private`reps_Integer", 
                    ",", "QuEST`Private`paramSymbol_Symbol", ",", 
                    "QuEST`Private`qubits_List"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"QuEST`Private`i", "=", "1"}], ",", 
                    RowBox[{"QuEST`Private`pairs", "=", 
                    RowBox[{"Most", "[", 
                    RowBox[{"Partition", "[", 
                    RowBox[{"QuEST`Private`qubits", ",", "2", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "]"}]}]}], "}"}],
                     ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["Rz", "QuEST`Private`q"], "[", 
                    RowBox[{"QuEST`Private`paramSymbol", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`q", ",", "QuEST`Private`qubits"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`paramSymbol", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["X", "#1"], " ", 
                    SubscriptBox["Y", "#2"]}]}], "]"}], ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`paramSymbol", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["Y", "#1"], " ", 
                    SubscriptBox["X", "#2"]}]}], "]"}], ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`paramSymbol", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["Y", "#1"], " ", 
                    SubscriptBox["Y", "#2"]}]}], "]"}], ",", 
                    RowBox[{"R", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`paramSymbol", "[", 
                    RowBox[{"QuEST`Private`i", "++"}], "]"}], ",", 
                    RowBox[{
                    SubscriptBox["X", "#1"], " ", 
                    SubscriptBox["X", "#2"]}]}], "]"}]}], "}"}], "&"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`pairs", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "All", ";;", "2"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"QuEST`Private`pairs", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ";;", "All", ";;", "2"}], 
                    "\[RightDoubleBracket]"}]}], "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    "QuEST`Private`reps"}], "]"}]}], "]"}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"LowDepthAnsatz\"", ",", "QuEST`Private`reps_Integer", 
                    ",", "QuEST`Private`paramSymbol_Symbol", ",", 
                    "QuEST`Private`numQubits_Integer"}], "]"}], ":=", 
                    RowBox[{"GetKnownCircuit", "[", 
                    
                    RowBox[{
                    "\"LowDepthAnsatz\"", ",", "QuEST`Private`reps", ",", 
                    "QuEST`Private`paramSymbol", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetKnownCircuit", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", "GetKnownCircuit", 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetKnownCircuit\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetKnownCircuit[\\\"QFT\\\", \
qubits]\\nGetKnownCircuit[\\\"Trotter\\\", hamil, order, reps, time]\\n    \
(https://arxiv.org/pdf/math-ph/0506007.pdf)\\nGetKnownCircuit[\\\"\
HardwareEfficientAnsatz\\\", reps, paramSymbol, qubits]\\n    \
(https://arxiv.org/pdf/1704.05018.pdf)\\nGetKnownCircuit[\\\"TrotterAnsatz\\\"\
, hamil, order, reps, paramSymbol]\\n    \
(https://arxiv.org/pdf/1507.08969.pdf)\\nGetKnownCircuit[\\\"LowDepthAnsatz\\\
\", reps, paramSymbol, qubits]\\n    (https://arxiv.org/pdf/1801.01053.pdf)\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetKnownCircuit[\"QFT\", qubits]\nGetKnownCircuit[\"Trotter\", hamil, \
order, reps, time]\n    (https://arxiv.org/pdf/math-ph/0506007.pdf)\n\
GetKnownCircuit[\"HardwareEfficientAnsatz\", reps, paramSymbol, qubits]\n    \
(https://arxiv.org/pdf/1704.05018.pdf)\nGetKnownCircuit[\"TrotterAnsatz\", \
hamil, order, reps, paramSymbol]\n    (https://arxiv.org/pdf/1507.08969.pdf)\n\
GetKnownCircuit[\"LowDepthAnsatz\", reps, paramSymbol, qubits]\n    \
(https://arxiv.org/pdf/1801.01053.pdf)", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetKnownCircuit, {QuEST`GetKnownCircuit["QFT", 
         Pattern[QuEST`Private`qubits, 
          Blank[List]]] :> Flatten[{
          Table[{
            Subscript[QuEST`Gate`H, 
             Part[QuEST`Private`qubits, QuEST`Private`n]], 
            Table[
             Subscript[QuEST`Gate`Ph, 
              Part[QuEST`Private`qubits, QuEST`Private`n], 
              Part[QuEST`Private`qubits, QuEST`Private`n - QuEST`Private`m]][
             Pi/2^QuEST`Private`m], {
             QuEST`Private`m, 1, QuEST`Private`n - 1}]}, {QuEST`Private`n, 
            Length[QuEST`Private`qubits], 1, -1}], 
          Table[
           Subscript[QuEST`Gate`SWAP, 
            Part[QuEST`Private`qubits, QuEST`Private`q], 
            Part[QuEST`Private`qubits, -QuEST`Private`q]], {
           QuEST`Private`q, 1, 
            Floor[Length[QuEST`Private`qubits]/2]}]}], 
       QuEST`GetKnownCircuit["QFT", 
         Pattern[QuEST`Private`numQubits, 
          Blank[Integer]]] :> QuEST`GetKnownCircuit["QFT", 
         Range[0, QuEST`Private`numQubits - 1]], Condition[
         QuEST`GetKnownCircuit["Trotter", 
          Pattern[QuEST`Private`hamil, 
           Blank[]], 
          Pattern[QuEST`Private`order, 
           Blank[Integer]], 
          Pattern[QuEST`Private`reps, 
           Blank[Integer]], 
          Pattern[QuEST`Private`time, 
           Blank[]]], 
         And[QuEST`Private`order >= 1, 
          Or[QuEST`Private`order === 1, 
           EvenQ[QuEST`Private`order]], QuEST`Private`reps >= 1]] :> 
       With[{QuEST`Private`terms = 
          QuEST`Private`separateTermsOfPauliHamil[QuEST`Private`hamil]}, {
         QuEST`Private`gates = Apply[QuEST`Gate`R[2 #, #2]& , 
            QuEST`Private`getTrotterTerms[
            QuEST`Private`terms, QuEST`Private`order, QuEST`Private`reps, 
             QuEST`Private`time], {1}]}, 
         ReplaceAll[QuEST`Private`gates, QuEST`Gate`R[
            Blank[], 
            Subscript[QuEST`Gate`Id, 
             Blank[Integer]]] :> Nothing]], 
       QuEST`GetKnownCircuit["HardwareEfficientAnsatz", 
         Pattern[QuEST`Private`reps, 
          Blank[Integer]], 
         Pattern[QuEST`Private`param, 
          Blank[Symbol]], 
         Pattern[QuEST`Private`qubits, 
          Blank[List]]] :> 
       Module[{QuEST`Private`i = 1, QuEST`Private`ent}, 
         QuEST`Private`ent = Map[Subscript[C, 
             Part[#, 1]][
             Subscript[QuEST`Gate`Z, 
              Part[#, 2]]]& , 
            Partition[QuEST`Private`qubits, 2, 1, {1, 1}]]; Flatten[{
            Table[{
              Table[
               Subscript[QuEST`Private`g, QuEST`Private`q][
                QuEST`Private`param[
                 Increment[QuEST`Private`i]]], {
               QuEST`Private`q, QuEST`Private`qubits}, {
               QuEST`Private`g, {QuEST`Gate`Ry, QuEST`Gate`Rz}}], 
              Part[QuEST`Private`ent, 
               Span[1, All, 2]], 
              Part[QuEST`Private`ent, 
               Span[2, All, 2]]}, QuEST`Private`reps], 
            Table[
             Subscript[QuEST`Private`g, QuEST`Private`q][
              QuEST`Private`param[
               Increment[QuEST`Private`i]]], {
             QuEST`Private`q, QuEST`Private`qubits}, {
             QuEST`Private`g, {QuEST`Gate`Ry, QuEST`Gate`Rz}}]}]], 
       QuEST`GetKnownCircuit["HardwareEfficientAnsatz", 
         Pattern[QuEST`Private`reps, 
          Blank[Integer]], 
         Pattern[QuEST`Private`param, 
          Blank[Symbol]], 
         Pattern[QuEST`Private`numQubits, 
          Blank[Integer]]] :> 
       QuEST`GetKnownCircuit[
        "HardwareEfficientAnsatz", QuEST`Private`reps, QuEST`Private`param, 
         Range[0, QuEST`Private`numQubits - 1]], 
       QuEST`GetKnownCircuit["TrotterAnsatz", 
         Pattern[QuEST`Private`hamil, 
          Blank[]], 
         Pattern[QuEST`Private`order, 
          Blank[Integer]], 
         Pattern[QuEST`Private`reps, 
          Blank[Integer]], 
         Pattern[QuEST`Private`param, 
          Blank[Symbol]]] :> Module[{QuEST`Private`i = 1}, 
         ReplaceAll[
          QuEST`GetKnownCircuit[
          "Trotter", QuEST`Private`hamil, QuEST`Private`order, 
           QuEST`Private`reps, 1], {QuEST`Gate`R[
             Pattern[QuEST`Private`x, 
              Blank[]], 
             Pattern[QuEST`Private`p, 
              Blank[]]] :> QuEST`Gate`R[
             QuEST`Private`param[
              Increment[QuEST`Private`i]], QuEST`Private`p], 
           Pattern[QuEST`Private`g, 
             Subscript[
              Alternatives[QuEST`Gate`Rx, QuEST`Gate`Ry, QuEST`Gate`Rz], 
              Blank[]]][
             Pattern[QuEST`Private`x, 
              Blank[]]] :> QuEST`Private`g[
             QuEST`Private`param[
              Increment[QuEST`Private`i]]]}]], 
       QuEST`GetKnownCircuit["LowDepthAnsatz", 
         Pattern[QuEST`Private`reps, 
          Blank[Integer]], 
         Pattern[QuEST`Private`paramSymbol, 
          Blank[Symbol]], 
         Pattern[QuEST`Private`qubits, 
          Blank[List]]] :> 
       Module[{QuEST`Private`i = 1, QuEST`Private`pairs = Most[
            Partition[QuEST`Private`qubits, 2, 1, {1, 1}]]}, 
         Flatten[
          Join[
           Table[
            Subscript[QuEST`Gate`Rz, QuEST`Private`q][
             QuEST`Private`paramSymbol[
              Increment[QuEST`Private`i]]], {
            QuEST`Private`q, QuEST`Private`qubits}], 
           Table[
            Apply[{
              QuEST`Gate`R[
               QuEST`Private`paramSymbol[
                Increment[QuEST`Private`i]], Subscript[QuEST`Gate`X, #] 
               Subscript[QuEST`Gate`Y, #2]], 
              QuEST`Gate`R[
               QuEST`Private`paramSymbol[
                Increment[QuEST`Private`i]], Subscript[QuEST`Gate`Y, #] 
               Subscript[QuEST`Gate`X, #2]], 
              QuEST`Gate`R[
               QuEST`Private`paramSymbol[
                Increment[QuEST`Private`i]], Subscript[QuEST`Gate`Y, #] 
               Subscript[QuEST`Gate`Y, #2]], 
              QuEST`Gate`R[
               QuEST`Private`paramSymbol[
                Increment[QuEST`Private`i]], Subscript[QuEST`Gate`X, #] 
               Subscript[QuEST`Gate`X, #2]]}& , 
             Join[
              Part[QuEST`Private`pairs, 
               Span[1, All, 2]], 
              Part[QuEST`Private`pairs, 
               Span[2, All, 2]]], {1}], QuEST`Private`reps]]]], 
       QuEST`GetKnownCircuit["LowDepthAnsatz", 
         Pattern[QuEST`Private`reps, 
          Blank[Integer]], 
         Pattern[QuEST`Private`paramSymbol, 
          Blank[Symbol]], 
         Pattern[QuEST`Private`numQubits, 
          Blank[Integer]]] :> 
       QuEST`GetKnownCircuit[
        "LowDepthAnsatz", QuEST`Private`reps, QuEST`Private`paramSymbol, 
         Range[0, QuEST`Private`numQubits - 1]], QuEST`GetKnownCircuit[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`GetKnownCircuit]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetKnownCircuit"|>, False]]], "Output",
 CellChangeTimes->{3.8768284347735767`*^9, 3.876832915696313*^9, 
  3.876841225463544*^9, 3.87684131711672*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"73912207-4d01-45a1-a855-6ed4bdd6a7ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GetKnownCircuit", "[", 
   RowBox[{"\"\<TrotterAnsatz\>\"", ",", " ", 
    RowBox[{"GetRandomPauliString", "[", 
     RowBox[{"4", ",", "10"}], "]"}], ",", " ", "1", ",", " ", "1", ",", " ", 
    "x"}], "]"}], " ", "//", " ", "DrawCircuit"}]], "Input",
 CellChangeTimes->{{3.876828437693956*^9, 3.8768284688175173`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fc92759a-2db9-4e6c-9689-38456501aa75"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}]}}, {{
     LineBox[{{0.5, 1.5}, {0.5, 3.5}}], {RectangleBox[{0.1, 2.1}, {0.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {0.5, 2.5}]}, {
      RectangleBox[{0.1, 3.1}, {0.9, 3.9}], 
      InsetBox["\<\"Rx\"\>", {0.5, 3.5}]}, {
      RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}}, {
     LineBox[{{1.5, 0.5}, {1.5, 3.5}}], {RectangleBox[{1.1, 0.1}, {1.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {1.5, 0.5}]}, {
      RectangleBox[{1.1, 2.1}, {1.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {1.5, 2.5}]}, {
      RectangleBox[{1.1, 3.1}, {1.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {1.5, 3.5}]}}, {
     LineBox[{{2.5, 0.5}, {2.5, 0.5}}], {RectangleBox[{2.1, 0.1}, {2.9, 0.9}],
       InsetBox["\<\"Rz\"\>", {2.5, 0.5}]}}, {
     LineBox[{{3.5, 0.5}, {3.5, 3.5}}], {RectangleBox[{3.1, 3.1}, {3.9, 3.9}],
       InsetBox["\<\"Rx\"\>", {3.5, 3.5}]}, {
      RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 1.5}]}, {
      RectangleBox[{3.1, 0.1}, {3.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {3.5, 0.5}]}}, {
     LineBox[{{4.5, 0.5}, {4.5, 3.5}}], {RectangleBox[{4.1, 0.1}, {4.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {4.5, 0.5}]}, {
      RectangleBox[{4.1, 2.1}, {4.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {4.5, 2.5}]}, {
      RectangleBox[{4.1, 3.1}, {4.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {4.5, 3.5}]}, {
      RectangleBox[{4.1, 1.1}, {4.9, 1.9}], 
      InsetBox["\<\"Rz\"\>", {4.5, 1.5}]}}, {
     LineBox[{{5.5, 0.5}, {5.5, 3.5}}], {RectangleBox[{5.1, 3.1}, {5.9, 3.9}],
       InsetBox["\<\"Rx\"\>", {5.5, 3.5}]}, {
      RectangleBox[{5.1, 2.1}, {5.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {5.5, 2.5}]}, {
      RectangleBox[{5.1, 0.1}, {5.9, 0.9}], 
      InsetBox["\<\"Rz\"\>", {5.5, 0.5}]}, {
      RectangleBox[{5.1, 1.1}, {5.9, 1.9}], 
      InsetBox["\<\"Rz\"\>", {5.5, 1.5}]}}, {
     LineBox[{{6.5, 0.5}, {6.5, 3.5}}], {RectangleBox[{6.1, 0.1}, {6.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {6.5, 0.5}]}, {
      RectangleBox[{6.1, 3.1}, {6.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {6.5, 3.5}]}, {
      RectangleBox[{6.1, 2.1}, {6.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {6.5, 2.5}]}}, {
     LineBox[{{7.5, 1.5}, {7.5, 2.5}}], {RectangleBox[{7.1, 1.1}, {7.9, 1.9}],
       InsetBox["\<\"Rz\"\>", {7.5, 1.5}]}, {
      RectangleBox[{7.1, 2.1}, {7.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {7.5, 2.5}]}}, {
     LineBox[{{8.5, 0.5}, {8.5, 3.5}}], {RectangleBox[{8.1, 0.1}, {8.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {8.5, 0.5}]}, {
      RectangleBox[{8.1, 1.1}, {8.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {8.5, 1.5}]}, {
      RectangleBox[{8.1, 2.1}, {8.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {8.5, 2.5}]}, {
      RectangleBox[{8.1, 3.1}, {8.9, 3.9}], 
      InsetBox["\<\"Rz\"\>", {8.5, 3.5}]}}, {
     LineBox[{{9.5, 0.5}, {9.5, 3.5}}], {RectangleBox[{9.1, 1.1}, {9.9, 1.9}],
       InsetBox["\<\"Rx\"\>", {9.5, 1.5}]}, {
      RectangleBox[{9.1, 2.1}, {9.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {9.5, 2.5}]}, {
      RectangleBox[{9.1, 0.1}, {9.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {9.5, 0.5}]}, {
      RectangleBox[{9.1, 3.1}, {9.9, 3.9}], 
      InsetBox["\<\"Rz\"\>", {9.5, 3.5}]}}}},
  ImageSize->330,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.876828457634371*^9, 3.876828469068572*^9}, 
   3.876832915758481*^9, 3.876841225521215*^9, 3.876841317182276*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"e98772cf-ef01-46b2-a33f-9ce9a1fd7b53"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GetKnownCircuit", "[", 
   RowBox[{
   "\"\<HardwareEfficientAnsatz\>\"", ",", " ", "2", ",", " ", "x", ",", " ", 
    "4"}], "]"}], " ", "//", " ", "DrawCircuit"}]], "Input",
 CellChangeTimes->{{3.876828475454076*^9, 3.876828490951921*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"e892a004-0b3d-4c26-8511-0a5839df3289"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}]}, {
     LineBox[{{11, 0.5}, {12, 0.5}}], LineBox[{{11, 1.5}, {12, 1.5}}], 
     LineBox[{{11, 2.5}, {12, 2.5}}], LineBox[{{11, 3.5}, {12, 3.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}, {
     RectangleBox[{0.1, 2.1}, {0.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 2.5}]}, {
     RectangleBox[{0.1, 3.1}, {0.9, 3.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 3.5}]}, {
     RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {1.5, 0.5}]}, {
     RectangleBox[{1.1, 1.1}, {1.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {1.5, 1.5}]}, {
     RectangleBox[{1.1, 2.1}, {1.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {1.5, 2.5}]}, {
     RectangleBox[{1.1, 3.1}, {1.9, 3.9}], 
     InsetBox["\<\"Rz\"\>", {1.5, 3.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{2.5, 0.5}, 0.1], DiskBox[{2.5, 1.5}, 0.1]}, 
      LineBox[{{2.5, 0.5}, {2.5, 1.5}}]}, LineBox[{{2.5, 0.5}, {2.5, 0.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{2.5, 2.5}, 0.1], DiskBox[{2.5, 3.5}, 0.1]}, 
      LineBox[{{2.5, 2.5}, {2.5, 3.5}}]}, LineBox[{{2.5, 2.5}, {2.5, 2.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{3.5, 1.5}, 0.1], DiskBox[{3.5, 2.5}, 0.1]}, 
      LineBox[{{3.5, 1.5}, {3.5, 2.5}}]}, LineBox[{{3.5, 1.5}, {3.5, 1.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 3.5}, 0.1], DiskBox[{4.5, 0.5}, 0.1]}, 
      LineBox[{{4.5, 0.5}, {4.5, 3.5}}]}, 
     LineBox[{{4.5, 3.5}, {4.5, 3.5}}]}, {
     RectangleBox[{5.1, 0.1}, {5.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {5.5, 0.5}]}, {
     RectangleBox[{5.1, 1.1}, {5.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {5.5, 1.5}]}, {
     RectangleBox[{5.1, 2.1}, {5.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {5.5, 2.5}]}, {
     RectangleBox[{5.1, 3.1}, {5.9, 3.9}], 
     InsetBox["\<\"Ry\"\>", {5.5, 3.5}]}, {
     RectangleBox[{6.1, 0.1}, {6.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {6.5, 0.5}]}, {
     RectangleBox[{6.1, 1.1}, {6.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {6.5, 1.5}]}, {
     RectangleBox[{6.1, 2.1}, {6.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {6.5, 2.5}]}, {
     RectangleBox[{6.1, 3.1}, {6.9, 3.9}], 
     InsetBox["\<\"Rz\"\>", {6.5, 3.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.5, 0.5}, 0.1], DiskBox[{7.5, 1.5}, 0.1]}, 
      LineBox[{{7.5, 0.5}, {7.5, 1.5}}]}, LineBox[{{7.5, 0.5}, {7.5, 0.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{7.5, 2.5}, 0.1], DiskBox[{7.5, 3.5}, 0.1]}, 
      LineBox[{{7.5, 2.5}, {7.5, 3.5}}]}, LineBox[{{7.5, 2.5}, {7.5, 2.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{8.5, 1.5}, 0.1], DiskBox[{8.5, 2.5}, 0.1]}, 
      LineBox[{{8.5, 1.5}, {8.5, 2.5}}]}, LineBox[{{8.5, 1.5}, {8.5, 1.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{9.5, 3.5}, 0.1], DiskBox[{9.5, 0.5}, 0.1]}, 
      LineBox[{{9.5, 0.5}, {9.5, 3.5}}]}, 
     LineBox[{{9.5, 3.5}, {9.5, 3.5}}]}, {
     RectangleBox[{10.1, 0.1}, {10.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {10.5, 0.5}]}, {
     RectangleBox[{10.1, 1.1}, {10.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {10.5, 1.5}]}, {
     RectangleBox[{10.1, 2.1}, {10.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {10.5, 2.5}]}, {
     RectangleBox[{10.1, 3.1}, {10.9, 3.9}], 
     InsetBox["\<\"Ry\"\>", {10.5, 3.5}]}, {
     RectangleBox[{11.1, 0.1}, {11.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {11.5, 0.5}]}, {
     RectangleBox[{11.1, 1.1}, {11.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {11.5, 1.5}]}, {
     RectangleBox[{11.1, 2.1}, {11.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {11.5, 2.5}]}, {
     RectangleBox[{11.1, 3.1}, {11.9, 3.9}], 
     InsetBox["\<\"Rz\"\>", {11.5, 3.5}]}}},
  ImageSize->390,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.8768284829211607`*^9, 3.876828491259355*^9}, 
   3.876832915818207*^9, 3.876841225578874*^9, 3.876841317212845*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"bac7676a-7c44-43f1-a60f-d6f3c9d394f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GetKnownCircuit", "[", 
   RowBox[{
   "\"\<LowDepthAnsatz\>\"", ",", " ", "2", ",", " ", "x", ",", " ", "4"}], 
   "]"}], " ", "//", " ", "DrawCircuit"}]], "Input",
 CellChangeTimes->{{3.8768284971294394`*^9, 3.87682849927837*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"049b88c9-d8e1-4f0f-b1a1-eebd21eddd46"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}], LineBox[{{0, 3.5}, {1, 3.5}}]}, {
     LineBox[{{1, 0.5}, {2, 0.5}}], LineBox[{{1, 1.5}, {2, 1.5}}], 
     LineBox[{{1, 2.5}, {2, 2.5}}], LineBox[{{1, 3.5}, {2, 3.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}], LineBox[{{2, 3.5}, {3, 3.5}}]}, {
     LineBox[{{3, 0.5}, {4, 0.5}}], LineBox[{{3, 1.5}, {4, 1.5}}], 
     LineBox[{{3, 2.5}, {4, 2.5}}], LineBox[{{3, 3.5}, {4, 3.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}], LineBox[{{4, 3.5}, {5, 3.5}}]}, {
     LineBox[{{5, 0.5}, {6, 0.5}}], LineBox[{{5, 1.5}, {6, 1.5}}], 
     LineBox[{{5, 2.5}, {6, 2.5}}], LineBox[{{5, 3.5}, {6, 3.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}], LineBox[{{6, 3.5}, {7, 3.5}}]}, {
     LineBox[{{7, 0.5}, {8, 0.5}}], LineBox[{{7, 1.5}, {8, 1.5}}], 
     LineBox[{{7, 2.5}, {8, 2.5}}], LineBox[{{7, 3.5}, {8, 3.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}], LineBox[{{8, 3.5}, {9, 3.5}}]}, {
     LineBox[{{9, 0.5}, {10, 0.5}}], LineBox[{{9, 1.5}, {10, 1.5}}], 
     LineBox[{{9, 2.5}, {10, 2.5}}], LineBox[{{9, 3.5}, {10, 3.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}], LineBox[{{10, 3.5}, {11, 3.5}}]}, {
     LineBox[{{11, 0.5}, {12, 0.5}}], LineBox[{{11, 1.5}, {12, 1.5}}], 
     LineBox[{{11, 2.5}, {12, 2.5}}], LineBox[{{11, 3.5}, {12, 3.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}], LineBox[{{12, 3.5}, {13, 3.5}}]}, {
     LineBox[{{13, 0.5}, {14, 0.5}}], LineBox[{{13, 1.5}, {14, 1.5}}], 
     LineBox[{{13, 2.5}, {14, 2.5}}], LineBox[{{13, 3.5}, {14, 3.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}], LineBox[{{14, 3.5}, {15, 3.5}}]}, {
     LineBox[{{15, 0.5}, {16, 0.5}}], LineBox[{{15, 1.5}, {16, 1.5}}], 
     LineBox[{{15, 2.5}, {16, 2.5}}], LineBox[{{15, 3.5}, {16, 3.5}}]}, {
     LineBox[{{16, 0.5}, {17, 0.5}}], LineBox[{{16, 1.5}, {17, 1.5}}], 
     LineBox[{{16, 2.5}, {17, 2.5}}], LineBox[{{16, 3.5}, {17, 3.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {0.5, 1.5}]}, {
     RectangleBox[{0.1, 2.1}, {0.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {0.5, 2.5}]}, {
     RectangleBox[{0.1, 3.1}, {0.9, 3.9}], 
     InsetBox["\<\"Rz\"\>", {0.5, 3.5}]}, {
     LineBox[{{1.5, 0.5}, {1.5, 1.5}}], {RectangleBox[{1.1, 0.1}, {1.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {1.5, 0.5}]}, {
      RectangleBox[{1.1, 1.1}, {1.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {1.5, 1.5}]}}, {
     LineBox[{{1.5, 2.5}, {1.5, 3.5}}], {RectangleBox[{1.1, 2.1}, {1.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {1.5, 2.5}]}, {
      RectangleBox[{1.1, 3.1}, {1.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {1.5, 3.5}]}}, {
     LineBox[{{2.5, 0.5}, {2.5, 1.5}}], {RectangleBox[{2.1, 1.1}, {2.9, 1.9}],
       InsetBox["\<\"Rx\"\>", {2.5, 1.5}]}, {
      RectangleBox[{2.1, 0.1}, {2.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {2.5, 0.5}]}}, {
     LineBox[{{2.5, 2.5}, {2.5, 3.5}}], {RectangleBox[{2.1, 3.1}, {2.9, 3.9}],
       InsetBox["\<\"Rx\"\>", {2.5, 3.5}]}, {
      RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {2.5, 2.5}]}}, {
     LineBox[{{3.5, 0.5}, {3.5, 1.5}}], {RectangleBox[{3.1, 0.1}, {3.9, 0.9}],
       InsetBox["\<\"Ry\"\>", {3.5, 0.5}]}, {
      RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 1.5}]}}, {
     LineBox[{{3.5, 2.5}, {3.5, 3.5}}], {RectangleBox[{3.1, 2.1}, {3.9, 2.9}],
       InsetBox["\<\"Ry\"\>", {3.5, 2.5}]}, {
      RectangleBox[{3.1, 3.1}, {3.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {3.5, 3.5}]}}, {
     LineBox[{{4.5, 0.5}, {4.5, 1.5}}], {RectangleBox[{4.1, 0.1}, {4.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {4.5, 0.5}]}, {
      RectangleBox[{4.1, 1.1}, {4.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {4.5, 1.5}]}}, {
     LineBox[{{4.5, 2.5}, {4.5, 3.5}}], {RectangleBox[{4.1, 2.1}, {4.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {4.5, 2.5}]}, {
      RectangleBox[{4.1, 3.1}, {4.9, 3.9}], 
      InsetBox["\<\"Rx\"\>", {4.5, 3.5}]}}, {
     LineBox[{{5.5, 1.5}, {5.5, 2.5}}], {RectangleBox[{5.1, 1.1}, {5.9, 1.9}],
       InsetBox["\<\"Rx\"\>", {5.5, 1.5}]}, {
      RectangleBox[{5.1, 2.1}, {5.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {5.5, 2.5}]}}, {
     LineBox[{{6.5, 1.5}, {6.5, 2.5}}], {RectangleBox[{6.1, 2.1}, {6.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {6.5, 2.5}]}, {
      RectangleBox[{6.1, 1.1}, {6.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {6.5, 1.5}]}}, {
     LineBox[{{7.5, 1.5}, {7.5, 2.5}}], {RectangleBox[{7.1, 1.1}, {7.9, 1.9}],
       InsetBox["\<\"Ry\"\>", {7.5, 1.5}]}, {
      RectangleBox[{7.1, 2.1}, {7.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {7.5, 2.5}]}}, {
     LineBox[{{8.5, 1.5}, {8.5, 2.5}}], {RectangleBox[{8.1, 1.1}, {8.9, 1.9}],
       InsetBox["\<\"Rx\"\>", {8.5, 1.5}]}, {
      RectangleBox[{8.1, 2.1}, {8.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {8.5, 2.5}]}}, {
     LineBox[{{9.5, 0.5}, {9.5, 1.5}}], {RectangleBox[{9.1, 0.1}, {9.9, 0.9}],
       InsetBox["\<\"Rx\"\>", {9.5, 0.5}]}, {
      RectangleBox[{9.1, 1.1}, {9.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {9.5, 1.5}]}}, {
     LineBox[{{9.5, 2.5}, {9.5, 3.5}}], {RectangleBox[{9.1, 2.1}, {9.9, 2.9}],
       InsetBox["\<\"Rx\"\>", {9.5, 2.5}]}, {
      RectangleBox[{9.1, 3.1}, {9.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {9.5, 3.5}]}}, {
     LineBox[{{10.5, 0.5}, {10.5, 1.5}}], {
      RectangleBox[{10.1, 1.1}, {10.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {10.5, 1.5}]}, {
      RectangleBox[{10.1, 0.1}, {10.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {10.5, 0.5}]}}, {
     LineBox[{{10.5, 2.5}, {10.5, 3.5}}], {
      RectangleBox[{10.1, 3.1}, {10.9, 3.9}], 
      InsetBox["\<\"Rx\"\>", {10.5, 3.5}]}, {
      RectangleBox[{10.1, 2.1}, {10.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {10.5, 2.5}]}}, {
     LineBox[{{11.5, 0.5}, {11.5, 1.5}}], {
      RectangleBox[{11.1, 0.1}, {11.9, 0.9}], 
      InsetBox["\<\"Ry\"\>", {11.5, 0.5}]}, {
      RectangleBox[{11.1, 1.1}, {11.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {11.5, 1.5}]}}, {
     LineBox[{{11.5, 2.5}, {11.5, 3.5}}], {
      RectangleBox[{11.1, 2.1}, {11.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {11.5, 2.5}]}, {
      RectangleBox[{11.1, 3.1}, {11.9, 3.9}], 
      InsetBox["\<\"Ry\"\>", {11.5, 3.5}]}}, {
     LineBox[{{12.5, 0.5}, {12.5, 1.5}}], {
      RectangleBox[{12.1, 0.1}, {12.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {12.5, 0.5}]}, {
      RectangleBox[{12.1, 1.1}, {12.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {12.5, 1.5}]}}, {
     LineBox[{{12.5, 2.5}, {12.5, 3.5}}], {
      RectangleBox[{12.1, 2.1}, {12.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {12.5, 2.5}]}, {
      RectangleBox[{12.1, 3.1}, {12.9, 3.9}], 
      InsetBox["\<\"Rx\"\>", {12.5, 3.5}]}}, {
     LineBox[{{13.5, 1.5}, {13.5, 2.5}}], {
      RectangleBox[{13.1, 1.1}, {13.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {13.5, 1.5}]}, {
      RectangleBox[{13.1, 2.1}, {13.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {13.5, 2.5}]}}, {
     LineBox[{{14.5, 1.5}, {14.5, 2.5}}], {
      RectangleBox[{14.1, 2.1}, {14.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {14.5, 2.5}]}, {
      RectangleBox[{14.1, 1.1}, {14.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {14.5, 1.5}]}}, {
     LineBox[{{15.5, 1.5}, {15.5, 2.5}}], {
      RectangleBox[{15.1, 1.1}, {15.9, 1.9}], 
      InsetBox["\<\"Ry\"\>", {15.5, 1.5}]}, {
      RectangleBox[{15.1, 2.1}, {15.9, 2.9}], 
      InsetBox["\<\"Ry\"\>", {15.5, 2.5}]}}, {
     LineBox[{{16.5, 1.5}, {16.5, 2.5}}], {
      RectangleBox[{16.1, 1.1}, {16.9, 1.9}], 
      InsetBox["\<\"Rx\"\>", {16.5, 1.5}]}, {
      RectangleBox[{16.1, 2.1}, {16.9, 2.9}], 
      InsetBox["\<\"Rx\"\>", {16.5, 2.5}]}}}},
  ImageSize->540,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.876828499555387*^9, 3.8768329158649673`*^9, 
  3.8768412256478043`*^9, 3.8768413172548923`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"2a540e69-e0a1-463f-8ff9-f3cd2eb1ea37"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ApplyCircuitDerivs", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 
  3.87681766087532*^9}},ExpressionUUID->"9c01af04-2d90-4e6c-8e46-\
ef35e7159d68"],

Cell[TextData[{
 StyleBox["ApplyCircuitDerivs",
  FontWeight->"Bold"],
 " (replacing the previously named ",
 StyleBox["CalcQuregDerivs",
  FontWeight->"Bold"],
 ") can now accept ",
 StyleBox["any",
  FontSlant->"Italic"],
 " continuously parametrized circuit ",
 StyleBox["or",
  FontSlant->"Italic"],
 " channel!"
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.87682910238634*^9, 3.876829145262968*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"29c63fd3-b3e1-45f9-bdab-563dab605fa9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ApplyCircuitDerivs"}]], "Input",
 CellChangeTimes->{{3.876817662735567*^9, 3.876817665260189*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"44638323-3dc8-46d1-aeaa-d263e9ce77c8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ApplyCircuitDerivs[inQureg, circuit, varVals, \
outQuregs] modifies outQuregs to be the result of applying the derivatives \
(with respect to variables in varVals) of the given symbolic circuit to \
inQureg (which remains unmodified).\\n    \[Bullet] varVals is a list {symbol \
-> value, ...} of all variables present in the circuit parameters.\\n    \
\[Bullet] outQuregs is a list of quregs to set to the respective derivative \
of circuit upon inQureg, according to the order of vars.\\n    \[Bullet] \
Variable repetition, multi-parameter gates, variable-dependent element-wise \
matrices, variable-dependent channels, and operators whose parameters are \
(numerically evaluable) functions of variables are all permitted within the \
circuit. In effect, every continuously-parameterised circuit or channel is \
permitted.\\nApplyCircuitDerivs[inQureg, circuit, varVals, outQuregs, \
workQuregs] use the given persistent workspace quregs to avoid tediously \
creating and destroying any internal quregs, for a speedup. For convenience, \
any number of workspaces can be passed, but only the first is needed and \
used.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"ApplyCircuitDerivs", "[", 
                    RowBox[{"QuEST`Private`inQureg_Integer", ",", 
                    
                    RowBox[{
                    "QuEST`Private`circuit_", "?", 
                    "QuEST`Private`isCircuitFormat"}], ",", 
                    RowBox[{"QuEST`Private`vars", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "Internal`RealValuedNumericQ"}]}], 
                    ")"}], ".."}], "}"}]}], ",", 
                    RowBox[{"QuEST`Private`outQuregs", ":", 
                    RowBox[{"{", "__Integer", "}"}]}], ",", 
                    RowBox[{"QuEST`Private`workQuregs", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", "__Integer", "}"}]}], ":", 
                    RowBox[{"-", "1"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`ret", ",", 
                    "QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "QuEST`Private`vars", "]"}], "=!=", 
                    RowBox[{"Length", "[", "QuEST`Private`outQuregs", "]"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ApplyCircuitDerivs", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"An equal number of variables and ouptut quregs must be \
passed.\""}], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{"QuEST`Private`ret", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"QuEST`Private`encodeDerivCirc", "[", 
                    
                    RowBox[{"QuEST`Private`circuit", ",", 
                    "QuEST`Private`vars"}], "]"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "QuEST`Private`ret", "]"}], "===", 
                    "String"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ApplyCircuitDerivs", "::", "error"}], 
                    "MessageName"], ",", "QuEST`Private`ret"}], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], "=", 
                    "QuEST`Private`ret"}], ";", 
                    RowBox[{"QuEST`Private`ApplyCircuitDerivsInternal", "[", 
                    RowBox[{"QuEST`Private`inQureg", ",", 
                    RowBox[{"First", "[", 
                    RowBox[{"{", 
                    RowBox[{"Sequence", "@@", "QuEST`Private`workQuregs"}], 
                    "}"}], "]"}], ",", "QuEST`Private`outQuregs", ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedCircuit", "[", 
                    "QuEST`Private`encodedCirc", "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedDerivCircTerms", "[", 
                    "QuEST`Private`encodedDerivTerms", "]"}]}], "]"}]}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"ApplyCircuitDerivs", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "ApplyCircuitDerivs", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`ApplyCircuitDerivs\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ApplyCircuitDerivs[inQureg, circuit, varVals, \
outQuregs] modifies outQuregs to be the result of applying the derivatives \
(with respect to variables in varVals) of the given symbolic circuit to \
inQureg (which remains unmodified).\\n    \[Bullet] varVals is a list {symbol \
-> value, ...} of all variables present in the circuit parameters.\\n    \
\[Bullet] outQuregs is a list of quregs to set to the respective derivative \
of circuit upon inQureg, according to the order of vars.\\n    \[Bullet] \
Variable repetition, multi-parameter gates, variable-dependent element-wise \
matrices, variable-dependent channels, and operators whose parameters are \
(numerically evaluable) functions of variables are all permitted within the \
circuit. In effect, every continuously-parameterised circuit or channel is \
permitted.\\nApplyCircuitDerivs[inQureg, circuit, varVals, outQuregs, \
workQuregs] use the given persistent workspace quregs to avoid tediously \
creating and destroying any internal quregs, for a speedup. For convenience, \
any number of workspaces can be passed, but only the first is needed and \
used.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "ApplyCircuitDerivs[inQureg, circuit, varVals, outQuregs] modifies \
outQuregs to be the result of applying the derivatives (with respect to \
variables in varVals) of the given symbolic circuit to inQureg (which remains \
unmodified).\n    \[Bullet] varVals is a list {symbol -> value, ...} of all \
variables present in the circuit parameters.\n    \[Bullet] outQuregs is a \
list of quregs to set to the respective derivative of circuit upon inQureg, \
according to the order of vars.\n    \[Bullet] Variable repetition, \
multi-parameter gates, variable-dependent element-wise matrices, \
variable-dependent channels, and operators whose parameters are (numerically \
evaluable) functions of variables are all permitted within the circuit. In \
effect, every continuously-parameterised circuit or channel is permitted.\n\
ApplyCircuitDerivs[inQureg, circuit, varVals, outQuregs, workQuregs] use the \
given persistent workspace quregs to avoid tediously creating and destroying \
any internal quregs, for a speedup. For convenience, any number of workspaces \
can be passed, but only the first is needed and used.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`ApplyCircuitDerivs, {QuEST`ApplyCircuitDerivs[
         Pattern[QuEST`Private`inQureg, 
          Blank[Integer]], 
         PatternTest[
          Pattern[QuEST`Private`circuit, 
           Blank[]], QuEST`Private`isCircuitFormat], 
         Pattern[QuEST`Private`vars, {
           Repeated[Blank[] -> PatternTest[
              Blank[], Internal`RealValuedNumericQ]]}], 
         Pattern[QuEST`Private`outQuregs, {
           BlankSequence[Integer]}], 
         Optional[
          Pattern[QuEST`Private`workQuregs, 
           Alternatives[
            Blank[Integer], {
             BlankSequence[Integer]}]], -1]] :> 
       Module[{QuEST`Private`ret, QuEST`Private`encodedCirc, 
          QuEST`Private`encodedDerivTerms}, 
         If[Length[QuEST`Private`vars] =!= Length[QuEST`Private`outQuregs], 
           Message[
             MessageName[QuEST`ApplyCircuitDerivs, "error"], 
             "An equal number of variables and ouptut quregs must be \
passed."]; Return[$Failed]]; QuEST`Private`ret = Catch[
            QuEST`Private`encodeDerivCirc[
            QuEST`Private`circuit, QuEST`Private`vars]]; 
         If[Head[QuEST`Private`ret] === String, Message[
             MessageName[QuEST`ApplyCircuitDerivs, "error"], 
             QuEST`Private`ret]; Return[$Failed]]; {
           QuEST`Private`encodedCirc, QuEST`Private`encodedDerivTerms} = 
          QuEST`Private`ret; 
         QuEST`Private`ApplyCircuitDerivsInternal[QuEST`Private`inQureg, 
           First[{
             Apply[Sequence, QuEST`Private`workQuregs]}], 
           QuEST`Private`outQuregs, 
           QuEST`Private`unpackEncodedCircuit[QuEST`Private`encodedCirc], 
           QuEST`Private`unpackEncodedDerivCircTerms[
           QuEST`Private`encodedDerivTerms]]], QuEST`ApplyCircuitDerivs[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`ApplyCircuitDerivs]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`ApplyCircuitDerivs"|>, False]]], "Output",
 CellChangeTimes->{3.8768176655323763`*^9, 3.876823476474577*^9, 
  3.876823789318253*^9, 3.876824087290298*^9, 3.876826916787868*^9, 
  3.8768273146158733`*^9, 3.8768281166178837`*^9, 3.876832914168603*^9, 
  3.876841225767104*^9, 3.8768413173362722`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"3ea2a546-0684-479e-8657-c679e22dcd82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"in\[Rho]", " ", "=", " ", 
   RowBox[{
    RowBox[{"CreateDensityQureg", "[", "3", "]"}], " ", "//", " ", 
    "InitPlusState"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"d\[Rho]", " ", "=", " ", 
   RowBox[{"CreateDensityQuregs", "[", 
    RowBox[{"3", ",", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"u", " ", "=", " ", 
    RowBox[{"Circuit", "[", " ", 
     RowBox[{
      RowBox[{
       SubscriptBox["Rx", "0"], "[", "a", "]"}], " ", 
      RowBox[{
       SubscriptBox["Ry", "1"], "[", 
       RowBox[{
        SuperscriptBox["b", "2"], "-", "a"}], "]"}], 
      RowBox[{
       SubscriptBox["Deph", 
        RowBox[{"0", ",", "1"}]], "[", 
       RowBox[{"c", " ", "a"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["C", "0"], "[", 
       RowBox[{"R", "[", 
        RowBox[{
         RowBox[{"c", "/", "a"}], ",", " ", 
         RowBox[{
          SubscriptBox["Z", "1"], 
          SubscriptBox["Y", "2"]}]}], "]"}], "]"}], " ", 
      RowBox[{
       SubscriptBox["Depol", 
        RowBox[{"1", ",", "2"}]], "[", 
       RowBox[{"a", "-", "b", "+", "c"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "u", "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.876817670179308*^9, 3.876817962114646*^9}, {
  3.8768180698108063`*^9, 3.876818069989628*^9}, {3.8768183319147873`*^9, 
  3.876818333800426*^9}, {3.876829155495948*^9, 3.876829155665492*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"13bf938b-d634-44a1-ae07-4908291734f0"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{1.1, 0.1}, {1.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {1.5, 1.}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{2.5, 0.5}, 0.1], 
      LineBox[{{2.5, 0.5}, {2.5, 2.5}}]}, {
      LineBox[{{2.5, 1.5}, {2.5, 2.5}}], {
       RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
       InsetBox["\<\"Ry\"\>", {2.5, 2.5}]}, {
       RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
       InsetBox["\<\"Rz\"\>", {2.5, 1.5}]}}}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 1.1}, {3.9, 2.9}], 
     InsetBox["\<\"\[CapitalDelta]\"\>", {3.5, 2.}]}}},
  ImageSize->150,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.87681776775489*^9, 3.87681779038098*^9}, {
   3.87681786855272*^9, 3.87681789242137*^9}, {3.87681793641433*^9, 
   3.876817962433531*^9}, 3.876818070277329*^9, 3.876818334027988*^9, 
   3.8768234765098257`*^9, 3.8768237893557787`*^9, 3.876824087343225*^9, 
   3.876826916823489*^9, 3.87682731468972*^9, 3.876828116660233*^9, 
   3.876828586269561*^9, 3.876829156004322*^9, 3.8768329141972523`*^9, 
   3.876833346943787*^9, 3.876841225805995*^9, 3.876841317378351*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"dd9bc34e-a4ca-41cf-b600-8009c568658d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ApplyCircuitDerivs", "[", 
   RowBox[{"in\[Rho]", ",", " ", "u", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "->", ".3"}], ",", " ", 
      RowBox[{"b", "->", ".4"}], ",", " ", 
      RowBox[{"c", "->", ".5"}]}], "}"}], ",", " ", "d\[Rho]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetQuregMatrix", " ", "@", " ", 
    RowBox[{"d\[Rho]", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], " ", "//", "Chop"}], " ", "//", " ", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.876829157574258*^9, 3.876829172597664*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"80e62cd7-f828-42cf-aef6-761cd1db250d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.05235973110934078`", "0.39998040842371024`", 
      RowBox[{"-", "0.16093383132133243`"}], 
      RowBox[{"-", "0.21664682440937388`"}], 
      RowBox[{"-", "0.08097360222399254`"}], 
      RowBox[{"-", "0.15611601578977732`"}], 
      RowBox[{"-", "0.16093383132133243`"}], "0.23367242472312622`"},
     {"0.39998040842371024`", "0.08953105716693585`", "0.23367242472312622`", 
      "0.3293589495407025`", "0.2644397625397551`", "0.4593746197066675`", 
      "0.23367242472312622`", 
      RowBox[{"-", "0.030930426091092107`"}]},
     {
      RowBox[{"-", "0.16093383132133243`"}], "0.23367242472312622`", 
      RowBox[{"-", "0.05235973110934081`"}], 
      RowBox[{"-", "0.1230921321387123`"}], 
      RowBox[{"-", "0.16093383132133243`"}], 
      RowBox[{"-", "0.21664682440937388`"}], 
      RowBox[{"-", "0.18569306444267408`"}], "0.20642775881589162`"},
     {
      RowBox[{"-", "0.21664682440937388`"}], "0.3293589495407025`", 
      RowBox[{"-", "0.1230921321387123`"}], 
      RowBox[{"-", "0.20440622036669484`"}], 
      RowBox[{"-", "0.21664682440937388`"}], 
      RowBox[{"-", "0.29093723655157266`"}], 
      RowBox[{"-", "0.25863277802266743`"}], "0.35879132982542294`"},
     {
      RowBox[{"-", "0.08097360222399254`"}], "0.2644397625397551`", 
      RowBox[{"-", "0.16093383132133243`"}], 
      RowBox[{"-", "0.21664682440937388`"}], "0.05235973110934078`", 
      RowBox[{"-", "0.020575369905822274`"}], 
      RowBox[{"-", "0.16093383132133243`"}], "0.23367242472312622`"},
     {
      RowBox[{"-", "0.15611601578977732`"}], "0.4593746197066675`", 
      RowBox[{"-", "0.21664682440937388`"}], 
      RowBox[{"-", "0.29093723655157266`"}], 
      RowBox[{"-", "0.020575369905822274`"}], "0.015188405051745707`", 
      RowBox[{"-", "0.21664682440937388`"}], "0.3293589495407025`"},
     {
      RowBox[{"-", "0.16093383132133243`"}], "0.23367242472312622`", 
      RowBox[{"-", "0.18569306444267408`"}], 
      RowBox[{"-", "0.25863277802266743`"}], 
      RowBox[{"-", "0.16093383132133243`"}], 
      RowBox[{"-", "0.21664682440937388`"}], 
      RowBox[{"-", "0.05235973110934081`"}], "0.34196840469984674`"},
     {"0.23367242472312622`", 
      RowBox[{"-", "0.030930426091092107`"}], "0.20642775881589162`", 
      "0.35879132982542294`", "0.23367242472312622`", "0.3293589495407025`", 
      "0.34196840469984674`", "0.09968675814801334`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.876829160868526*^9, 3.876829172851048*^9}, 
   3.876832914209524*^9, 3.876841225963818*^9, 3.876841317399191*^9},
 CellLabel->
  "Out[15]//MatrixForm=",ExpressionUUID->"907603f0-27be-4eb9-869e-\
29d2dbff78a1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcExpecPauliStringDerivs", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.876818092232505*^9, 
  3.876818095719637*^9}},ExpressionUUID->"6def6dd7-68d8-4439-afb9-\
d11bd97977f5"],

Cell[TextData[{
 StyleBox["CalcExpecPauliStringDerivs",
  FontWeight->"Bold"],
 " rapidly computes the gradient of a variational observable ",
 StyleBox["without",
  FontSlant->"Italic"],
 " having to create dedicated statevectors like above, using a novel \
algorithm (https://arxiv.org/abs/2009.02823). This returns the quantity:\n\n\
",
 Cell[BoxData[
  RowBox[{"\t", 
   RowBox[{
    RowBox[{
     SubscriptBox["\[Gradient]", 
      SubscriptBox["\[Theta]", "i"]], 
     TemplateBox[{"in\[Psi]"},
      "Bra"]}], 
    SuperscriptBox[
     RowBox[{
      OverscriptBox["u", "^"], "[", 
      OverscriptBox["\[Theta]", "\[RightVector]"], "]"}], "\[Dagger]"], "  ", 
    
    OverscriptBox["h", "^"], "  ", 
    RowBox[{
     OverscriptBox["u", "^"], "[", 
     OverscriptBox["\[Theta]", "\[RightVector]"], "]"}], " ", 
    TemplateBox[{"in\[Psi]"},
     "Ket"]}]}]],
  CellChangeTimes->{{3.876829606750823*^9, 3.87682970568157*^9}},
  ExpressionUUID->"d0ec61de-d8e1-4f73-ba94-f929bbc6bdc4"],
 "\n",
 "\nIt can furthermore compute the gradient of ",
 StyleBox["noisy channels",
  FontSlant->"Italic"],
 " upon ",
 StyleBox["density matrices",
  FontSlant->"Italic"],
 " (using another novel algorithm, see Ch5.7 of \
https://pdfhost.io/v/khdW2GJgP_Thesis_Tyson_Jones). In this instance, it \
returns:\n\n\t",
 Cell[BoxData[
  RowBox[{
   SubscriptBox["\[Gradient]", 
    SubscriptBox["\[Theta]", "i"]], 
   RowBox[{"Trace", "[", 
    RowBox[{
     OverscriptBox["h", "^"], "   ", 
     SubscriptBox["channel", 
      OverscriptBox["\[Theta]", "\[RightVector]"]], 
     RowBox[{"{", "in\[Rho]", "}"}]}], "]"}]}]],
  CellChangeTimes->{{3.876829606750823*^9, 3.87682970568157*^9}},
  ExpressionUUID->"89e59459-185c-4050-944c-02b92749e428"],
 "\n",
 "\nThese quantities appear in many quantum variational algorithms like ",
 ButtonBox["quantum gradient descent",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.nature.com/articles/ncomms5213"], None},
  ButtonNote->"https://www.nature.com/articles/ncomms5213"],
 ", ",
 ButtonBox["quantum natural gradient",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://quantum-journal.org/papers/q-2020-05-25-269/"], None},
  ButtonNote->"https://quantum-journal.org/papers/q-2020-05-25-269/"],
 " and ",
 ButtonBox["variational imaginary time evolution",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.nature.com/articles/s41534-019-0187-2"], None},
  ButtonNote->"https://www.nature.com/articles/s41534-019-0187-2"],
 ". ",
 "Parameters can be repeated between gates, gates can be multi-parameterised, \
and feature arbitrary (albeit continuous) functions of the variational \
parameters."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.87682910238634*^9, 3.876829145262968*^9}, {3.876829212141045*^9, 
  3.876829348260315*^9}, {3.8768293884364777`*^9, 3.876829502655077*^9}, {
  3.8768295946861553`*^9, 3.876829601389723*^9}, {3.876829709573344*^9, 
  3.876829721012596*^9}, {3.87682978394413*^9, 3.8768299472748528`*^9}, {
  3.8768320924993343`*^9, 3.876832094930287*^9}, {3.876832130532703*^9, 
  3.8768321969728003`*^9}, {3.876832363320032*^9, 3.87683238086683*^9}, {
  3.876832929583611*^9, 3.876832930935987*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"f2d3164f-ba4f-4e74-a3a3-e9b9c810982a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcExpecPauliStringDerivs"}]], "Input",
 CellChangeTimes->{{3.8768180964573812`*^9, 3.876818098126115*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"4b0310dc-71c7-4160-bb92-1b1ef8f7d97f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcExpecPauliStringDerivs[inQureg, circuit, \
varVals, pauliString] returns the gradient vector of the pauliString expected \
values, as produced by the derivatives of the circuit (with respect to \
varVals, {var -> value}) acting upon the given initial state \
(inQureg).\\nCalcExpecPauliStringDerivs[inQureg, circuit, varVals, \
pauliQureg] accepts a Qureg pre-initialised as a pauli string via \
SetQuregToPauliString[] to speedup density-matrix \
simulation.\\nCalcExpecPauliStringDerivs[inQureg, circuit, varVals, \
pauliStringOrQureg, workQuregs] uses the given persistent workspaces \
(workQuregs) in lieu of creating them internally, and should be used for \
optimum performance. At most four workQuregs are needed.\\n    \[Bullet] \
Variable repetition, multi-parameter gates, variable-dependent element-wise \
matrices, variable-dependent channels, and operators whose parameters are \
(numerically evaluable) functions of variables are all permitted. \\n    \
\[Bullet] All operators must be invertible, trace-preserving and \
deterministic, else an error is thrown. \\n    \[Bullet] This function runs \
asymptotically faster than ApplyCircuitDerivs[] and requires only a fixed \
memory overhead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"CalcExpecPauliStringDerivs", "[", 
                    RowBox[{"QuEST`Private`initQureg_Integer", ",", 
                    
                    RowBox[{
                    "QuEST`Private`circuit_", "?", 
                    "QuEST`Private`isCircuitFormat"}], ",", 
                    RowBox[{"QuEST`Private`varVals", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "Internal`RealValuedNumericQ"}]}], 
                    ")"}], ".."}], "}"}]}], ",", 
                    
                    RowBox[{
                    "QuEST`Private`paulis_", "?", 
                    "QuEST`Private`isValidPauliString"}], ",", 
                    RowBox[{"QuEST`Private`workQuregs", ":", 
                    RowBox[{"{", "___Integer", "}"}], ":", 
                    RowBox[{"{", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`ret", ",", 
                    "QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`ret", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"QuEST`Private`encodeDerivCirc", "[", 
                    
                    RowBox[{"QuEST`Private`circuit", ",", 
                    "QuEST`Private`varVals"}], "]"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "QuEST`Private`ret", "]"}], "===", 
                    "String"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcExpecPauliStringDerivs", "::", "error"}], 
                    "MessageName"], ",", "QuEST`Private`ret"}], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], "=", 
                    "QuEST`Private`ret"}], ";", 
                    
                    RowBox[{
                    "QuEST`Private`CalcExpecPauliStringDerivsInternal", "[", 
                    
                    RowBox[{"QuEST`Private`initQureg", ",", 
                    "QuEST`Private`workQuregs", ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedCircuit", "[", 
                    "QuEST`Private`encodedCirc", "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedDerivCircTerms", "[", 
                    "QuEST`Private`encodedDerivTerms", "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    
                    RowBox[{"QuEST`Private`getEncodedPauliString", "[", 
                    "QuEST`Private`paulis", "]"}]}]}], "]"}]}]}], "]"}]}]}, {
                   " "}, {
                    RowBox[{
                    RowBox[{"CalcExpecPauliStringDerivs", "[", 
                    RowBox[{"QuEST`Private`initQureg_Integer", ",", 
                    
                    RowBox[{
                    "QuEST`Private`circuit_", "?", 
                    "QuEST`Private`isCircuitFormat"}], ",", 
                    RowBox[{"QuEST`Private`varVals", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "Internal`RealValuedNumericQ"}]}], 
                    ")"}], ".."}], "}"}]}], ",", 
                    "QuEST`Private`hamilQureg_Integer", ",", 
                    RowBox[{"QuEST`Private`workQuregs", ":", 
                    RowBox[{"{", "___Integer", "}"}], ":", 
                    RowBox[{"{", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`ret", ",", 
                    "QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`ret", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"QuEST`Private`encodeDerivCirc", "[", 
                    
                    RowBox[{"QuEST`Private`circuit", ",", 
                    "QuEST`Private`varVals"}], "]"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "QuEST`Private`ret", "]"}], "===", 
                    "String"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcExpecPauliStringDerivs", "::", "error"}], 
                    "MessageName"], ",", "QuEST`Private`ret"}], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], "=", 
                    "QuEST`Private`ret"}], ";", 
                    
                    RowBox[{
                    "QuEST`Private`\
CalcExpecPauliStringDerivsDenseHamilInternal", "[", 
                    
                    RowBox[{"QuEST`Private`initQureg", ",", 
                    "QuEST`Private`hamilQureg", ",", 
                    "QuEST`Private`workQuregs", ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedCircuit", "[", 
                    "QuEST`Private`encodedCirc", "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedDerivCircTerms", "[", 
                    "QuEST`Private`encodedDerivTerms", "]"}]}], "]"}]}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcExpecPauliStringDerivs", "[", "___", "]"}], 
                    ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "CalcExpecPauliStringDerivs", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"QuEST`CalcExpecPauliStringDerivs\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcExpecPauliStringDerivs[inQureg, circuit, \
varVals, pauliString] returns the gradient vector of the pauliString expected \
values, as produced by the derivatives of the circuit (with respect to \
varVals, {var -> value}) acting upon the given initial state \
(inQureg).\\nCalcExpecPauliStringDerivs[inQureg, circuit, varVals, \
pauliQureg] accepts a Qureg pre-initialised as a pauli string via \
SetQuregToPauliString[] to speedup density-matrix \
simulation.\\nCalcExpecPauliStringDerivs[inQureg, circuit, varVals, \
pauliStringOrQureg, workQuregs] uses the given persistent workspaces \
(workQuregs) in lieu of creating them internally, and should be used for \
optimum performance. At most four workQuregs are needed.\\n    \[Bullet] \
Variable repetition, multi-parameter gates, variable-dependent element-wise \
matrices, variable-dependent channels, and operators whose parameters are \
(numerically evaluable) functions of variables are all permitted. \\n    \
\[Bullet] All operators must be invertible, trace-preserving and \
deterministic, else an error is thrown. \\n    \[Bullet] This function runs \
asymptotically faster than ApplyCircuitDerivs[] and requires only a fixed \
memory overhead.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "CalcExpecPauliStringDerivs[inQureg, circuit, varVals, pauliString] \
returns the gradient vector of the pauliString expected values, as produced \
by the derivatives of the circuit (with respect to varVals, {var -> value}) \
acting upon the given initial state (inQureg).\n\
CalcExpecPauliStringDerivs[inQureg, circuit, varVals, pauliQureg] accepts a \
Qureg pre-initialised as a pauli string via SetQuregToPauliString[] to \
speedup density-matrix simulation.\nCalcExpecPauliStringDerivs[inQureg, \
circuit, varVals, pauliStringOrQureg, workQuregs] uses the given persistent \
workspaces (workQuregs) in lieu of creating them internally, and should be \
used for optimum performance. At most four workQuregs are needed.\n    \
\[Bullet] Variable repetition, multi-parameter gates, variable-dependent \
element-wise matrices, variable-dependent channels, and operators whose \
parameters are (numerically evaluable) functions of variables are all \
permitted. \n    \[Bullet] All operators must be invertible, trace-preserving \
and deterministic, else an error is thrown. \n    \[Bullet] This function \
runs asymptotically faster than ApplyCircuitDerivs[] and requires only a \
fixed memory overhead.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`CalcExpecPauliStringDerivs, {
      QuEST`CalcExpecPauliStringDerivs[
         Pattern[QuEST`Private`initQureg, 
          Blank[Integer]], 
         PatternTest[
          Pattern[QuEST`Private`circuit, 
           Blank[]], QuEST`Private`isCircuitFormat], 
         Pattern[QuEST`Private`varVals, {
           Repeated[Blank[] -> PatternTest[
              Blank[], Internal`RealValuedNumericQ]]}], 
         PatternTest[
          Pattern[QuEST`Private`paulis, 
           Blank[]], QuEST`Private`isValidPauliString], 
         Optional[
          Pattern[QuEST`Private`workQuregs, {
            BlankNullSequence[Integer]}], {}]] :> 
       Module[{QuEST`Private`ret, QuEST`Private`encodedCirc, 
          QuEST`Private`encodedDerivTerms}, QuEST`Private`ret = Catch[
            QuEST`Private`encodeDerivCirc[
            QuEST`Private`circuit, QuEST`Private`varVals]]; 
         If[Head[QuEST`Private`ret] === String, Message[
             MessageName[QuEST`CalcExpecPauliStringDerivs, "error"], 
             QuEST`Private`ret]; Return[$Failed]]; {
           QuEST`Private`encodedCirc, QuEST`Private`encodedDerivTerms} = 
          QuEST`Private`ret; 
         QuEST`Private`CalcExpecPauliStringDerivsInternal[
          QuEST`Private`initQureg, QuEST`Private`workQuregs, 
           QuEST`Private`unpackEncodedCircuit[QuEST`Private`encodedCirc], 
           QuEST`Private`unpackEncodedDerivCircTerms[
           QuEST`Private`encodedDerivTerms], 
           Apply[Sequence, 
            QuEST`Private`getEncodedPauliString[QuEST`Private`paulis]]]], 
       QuEST`CalcExpecPauliStringDerivs[
         Pattern[QuEST`Private`initQureg, 
          Blank[Integer]], 
         PatternTest[
          Pattern[QuEST`Private`circuit, 
           Blank[]], QuEST`Private`isCircuitFormat], 
         Pattern[QuEST`Private`varVals, {
           Repeated[Blank[] -> PatternTest[
              Blank[], Internal`RealValuedNumericQ]]}], 
         Pattern[QuEST`Private`hamilQureg, 
          Blank[Integer]], 
         Optional[
          Pattern[QuEST`Private`workQuregs, {
            BlankNullSequence[Integer]}], {}]] :> 
       Module[{QuEST`Private`ret, QuEST`Private`encodedCirc, 
          QuEST`Private`encodedDerivTerms}, QuEST`Private`ret = Catch[
            QuEST`Private`encodeDerivCirc[
            QuEST`Private`circuit, QuEST`Private`varVals]]; 
         If[Head[QuEST`Private`ret] === String, Message[
             MessageName[QuEST`CalcExpecPauliStringDerivs, "error"], 
             QuEST`Private`ret]; Return[$Failed]]; {
           QuEST`Private`encodedCirc, QuEST`Private`encodedDerivTerms} = 
          QuEST`Private`ret; 
         QuEST`Private`CalcExpecPauliStringDerivsDenseHamilInternal[
          QuEST`Private`initQureg, QuEST`Private`hamilQureg, 
           QuEST`Private`workQuregs, 
           QuEST`Private`unpackEncodedCircuit[QuEST`Private`encodedCirc], 
           QuEST`Private`unpackEncodedDerivCircTerms[
           QuEST`Private`encodedDerivTerms]]], 
       QuEST`CalcExpecPauliStringDerivs[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`CalcExpecPauliStringDerivs]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`CalcExpecPauliStringDerivs"|>, False]]], "Output",
 CellChangeTimes->{3.8768180983736277`*^9, 3.876823476654971*^9, 
  3.8768237894500513`*^9, 3.87682408743566*^9, 3.87682691690482*^9, 
  3.876827314774478*^9, 3.876828116732737*^9, 3.876832914338792*^9, 
  3.8768412261198263`*^9, 3.876841317468967*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"ff7b36cb-699b-4eab-9aeb-f4680fa444ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", "[", "u", "]"}]], "Input",
 CellChangeTimes->{{3.8768228294016457`*^9, 3.87682283115868*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"23620abd-f015-49d0-ab93-f29cf0ee8bdc"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{1.1, 0.1}, {1.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {1.5, 1.}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{2.5, 0.5}, 0.1], 
      LineBox[{{2.5, 0.5}, {2.5, 2.5}}]}, {
      LineBox[{{2.5, 1.5}, {2.5, 2.5}}], {
       RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
       InsetBox["\<\"Ry\"\>", {2.5, 2.5}]}, {
       RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
       InsetBox["\<\"Rz\"\>", {2.5, 1.5}]}}}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 1.1}, {3.9, 2.9}], 
     InsetBox["\<\"\[CapitalDelta]\"\>", {3.5, 2.}]}}},
  ImageSize->150,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.876822831555277*^9, 3.87682347681586*^9, 
  3.876823789465518*^9, 3.876824087475576*^9, 3.8768269169359407`*^9, 
  3.876827314789544*^9, 3.87682811676469*^9, 3.876832914365691*^9, 
  3.876841226172888*^9, 3.876841317502758*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"54e9b458-7203-4a1a-b52d-a5ed5a6b0399"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"h", " ", "=", " ", 
    RowBox[{
     RowBox[{".5", " ", 
      SubscriptBox["X", "0"], 
      SubscriptBox["Y", "1"]}], " ", "+", 
     RowBox[{
      SubscriptBox["Z", "0"], 
      SubscriptBox["Z", "1"]}], "+", " ", 
     SubscriptBox["Z", "0"], "+", 
     RowBox[{"2", 
      SubscriptBox["Z", "2"]}], "-", 
     RowBox[{"4", 
      SubscriptBox["Z", "1"]}], "-", 
     RowBox[{".3", " ", 
      SubscriptBox["X", "1"], 
      SubscriptBox["Z", "2"]}], " ", "+", " ", 
     RowBox[{
      SubscriptBox["Y", "0"], 
      SubscriptBox["Y", "1"], 
      SubscriptBox["Y", "2"]}], " ", "+", " ", 
     RowBox[{".2", 
      SubscriptBox["X", "0"], 
      SubscriptBox["X", "2"], 
      SubscriptBox["X", "1"]}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"CalcExpecPauliStringDerivs", "[", 
  RowBox[{"in\[Rho]", ",", " ", "u", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "->", ".4"}], ",", " ", 
     RowBox[{"b", "->", ".2"}], ",", " ", 
     RowBox[{"c", "->", ".5"}]}], "}"}], ",", " ", "h"}], "]"}]}], "Input",
 CellChangeTimes->{{3.87681811860577*^9, 3.876818172943809*^9}, {
   3.876818324902844*^9, 3.876818358209716*^9}, {3.8768186364869623`*^9, 
   3.876818660956429*^9}, {3.876819817712672*^9, 3.87681989357792*^9}, {
   3.876819925269022*^9, 3.876819984490058*^9}, {3.8768201488020372`*^9, 
   3.876820171579108*^9}, {3.876820381405301*^9, 3.8768203821705933`*^9}, 
   3.876820435458673*^9, {3.876820555072735*^9, 3.876820565420165*^9}, {
   3.8768208251429243`*^9, 3.876820989713167*^9}, {3.876821036354195*^9, 
   3.876821092081374*^9}, {3.876821124754389*^9, 3.876821152124069*^9}, {
   3.876821192446671*^9, 3.876821223955771*^9}, {3.876821481158174*^9, 
   3.876821522458579*^9}, {3.8768215530839357`*^9, 3.876821556276619*^9}, {
   3.876821612171206*^9, 3.876821623011018*^9}, {3.876821661285581*^9, 
   3.876821729332847*^9}, {3.876821779087277*^9, 3.87682195035165*^9}, {
   3.876822295811653*^9, 3.876822401068528*^9}, {3.876822435649334*^9, 
   3.876822442838313*^9}, 3.876822696649592*^9, {3.8768228266982613`*^9, 
   3.876822848208748*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"a169320d-e15f-46b9-81f9-5690403c256c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.650992409649623`", ",", 
   RowBox[{"-", "1.2672931404595615`"}], ",", "1.624596108913283`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8768181731679487`*^9, {3.876818337357687*^9, 3.8768183585407743`*^9}, 
   3.8768184327685947`*^9, {3.876818650384225*^9, 3.876818661446823*^9}, {
   3.876819831840188*^9, 3.8768198741021233`*^9}, {3.8768199284852133`*^9, 
   3.876819942102705*^9}, 3.87681998479613*^9, {3.876820152074626*^9, 
   3.8768201723190517`*^9}, {3.8768203723708973`*^9, 3.876820382478857*^9}, {
   3.876820424127355*^9, 3.876820435678831*^9}, 3.876820565692348*^9, {
   3.876820831071885*^9, 3.876820883551886*^9}, {3.8768209192382812`*^9, 
   3.876820990066616*^9}, {3.876821039091353*^9, 3.876821152438106*^9}, {
   3.876821210119753*^9, 3.87682122420321*^9}, {3.876821506319056*^9, 
   3.876821523301981*^9}, 3.876821556482243*^9, 3.876821623269972*^9, 
   3.876821684227418*^9, {3.876821839198708*^9, 3.876821912016077*^9}, 
   3.8768219509083548`*^9, {3.876822296480535*^9, 3.8768223179484787`*^9}, {
   3.876822348636322*^9, 3.876822401837329*^9}, 3.876822443192062*^9, 
   3.87682269746003*^9, {3.876822827794668*^9, 3.876822848556115*^9}, 
   3.876823476831627*^9, 3.876823789491222*^9, 3.876824087488988*^9, 
   3.8768269169487123`*^9, 3.876827314835907*^9, 3.8768281167779417`*^9, 
   3.8768329143764257`*^9, 3.8768330548342876`*^9, 3.876841226207491*^9, 
   3.8768413175166187`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"1618dd06-713e-4ebf-a0be-24e6841d187b"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s compare the first element to its analytic \
form:", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.87682910238634*^9, 3.876829145262968*^9}, {3.876829212141045*^9, 
  3.876829348260315*^9}, {3.8768293884364777`*^9, 3.8768295461841993`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"59a05318-bb10-4107-a641-1ff49f9efa45"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[PartialD]", "a"], " ", 
   RowBox[{"Tr", "[", 
    RowBox[{
     RowBox[{"CalcPauliExpressionMatrix", "[", "h", "]"}], " ", ".", " ", 
     RowBox[{"Transpose", " ", "@", " ", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"CalcCircuitMatrix", "[", "u", "]"}], " ", ".", "  ", 
         RowBox[{"Flatten", " ", "@", " ", 
          RowBox[{"Transpose", " ", "@", " ", 
           RowBox[{"GetQuregMatrix", "[", "in\[Rho]", "]"}]}]}]}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          SuperscriptBox["2", "3"], ",", 
          SuperscriptBox["2", "3"]}], "}"}]}], "]"}]}]}], "]"}]}], " ", "/.", 
  "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "->", ".4"}], ",", " ", 
    RowBox[{"b", "->", ".2"}], ",", " ", 
    RowBox[{"c", "->", ".5"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.876822458133081*^9, 3.87682250602182*^9}, {
  3.876822575368579*^9, 3.876822586212736*^9}, {3.876822636950678*^9, 
  3.8768227147491827`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"14705ea6-b92a-46ad-b33c-3314c09b7193"],

Cell[BoxData[
 RowBox[{"0.6509924096496248`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{{3.8768226715498857`*^9, 3.876822716103868*^9}, 
   3.87682285667763*^9, 3.876823479732337*^9, 3.876823792715637*^9, 
   3.8768240905812597`*^9, 3.876826917950313*^9, 3.876827317831131*^9, 
   3.8768281186969833`*^9, 3.8768329153785257`*^9, 3.8768412297074423`*^9, 
   3.8768413198738832`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"eb115112-3c73-4ef9-b6dc-dd2a1f1c94e7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcMetricTensor", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 
  3.876822745180613*^9}},ExpressionUUID->"52607d2e-8ba3-433b-b3a3-\
3f928fca8066"],

Cell[TextData[{
 StyleBox["CalcMetricTensor",
  FontWeight->"Bold"],
 " rapidly computes the metric tensor of the given parameterised circuit or \
channel. If a pure circuit is given, this function returns the ",
 ButtonBox["quantum geometric tensor",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/abs/1012.1337"], None},
  ButtonNote->"https://arxiv.org/abs/1012.1337"],
 " like that appearing in ",
 ButtonBox["quantum natural gradient",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://quantum-journal.org/papers/q-2020-05-25-269/"], None},
  ButtonNote->"https://quantum-journal.org/papers/q-2020-05-25-269/"],
 " and ",
 ButtonBox["variational imaginary time evolution",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.nature.com/articles/s41534-019-0187-2"], None},
  ButtonNote->"https://www.nature.com/articles/s41534-019-0187-2"],
 ":\n",
 "\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["G", "ij"], " ", "=", 
    RowBox[{
     RowBox[{
      TemplateBox[{
        FractionBox[
         RowBox[{"\[PartialD]", 
           RowBox[{"\[Psi]", "[", 
             OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
         RowBox[{"\[PartialD]", 
           SubscriptBox["\[Theta]", "i"]}]]},
       "Bra"], 
      TemplateBox[{
        FractionBox[
         RowBox[{"\[PartialD]", 
           RowBox[{"\[Psi]", "[", 
             OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
         RowBox[{"\[PartialD]", 
           SubscriptBox["\[Theta]", "j"]}]]},
       "Ket"]}], " ", "-", " ", 
     RowBox[{
      TemplateBox[{
        FractionBox[
         RowBox[{"\[PartialD]", 
           RowBox[{"\[Psi]", "[", 
             OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
         RowBox[{"\[PartialD]", 
           SubscriptBox["\[Theta]", "i"]}]]},
       "Bra"], 
      TemplateBox[{
        RowBox[{"\[Psi]", "[", 
          OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]},
       "Ket"], 
      TemplateBox[{
        RowBox[{"\[Psi]", "[", 
          OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]},
       "Bra"], 
      TemplateBox[{
        FractionBox[
         RowBox[{"\[PartialD]", 
           RowBox[{"\[Psi]", "[", 
             OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
         RowBox[{"\[PartialD]", 
           SubscriptBox["\[Theta]", "j"]}]]},
       "Ket"], " ", " ", "  "}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6b494a42-e700-480b-9d15-2bdc15a5524f"],
 "      where\t ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    TemplateBox[{
      RowBox[{"\[Psi]", "[", 
        OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]},
     "Ket"], "=", 
    RowBox[{
     RowBox[{
      OverscriptBox["u", "^"], "[", 
      OverscriptBox["\[Theta]", "\[RightVector]"], "]"}], " ", 
     TemplateBox[{"in\[Psi]"},
      "Ket"], " "}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "fd6c2247-29e4-4eec-9a77-7aaf3f35df6b"],
 ".",
 "\n\nWhen a noisy channel is given, this function returns the \
Hilbert-Schmidt derivative metric\n\n\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["M", "ij"], " ", "=", " ", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{"Tr", "[", "  ", 
      RowBox[{
       FractionBox[
        RowBox[{"\[PartialD]", "\[ThinSpace]", 
         RowBox[{"\[Rho]", "[", 
          OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["\[Theta]", "i"]}]], "  ", 
       FractionBox[
        RowBox[{"\[PartialD]", "\[ThinSpace]", 
         RowBox[{"\[Rho]", "[", 
          OverscriptBox["\[Theta]", "\[RightVector]"], "]"}]}], 
        RowBox[{"\[PartialD]", 
         SubscriptBox["\[Theta]", "j"]}]]}], "  ", "]"}]}]}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "0700438e-6724-4af3-9267-aed3cbe1ab60"],
 "         where\t ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[Rho]", "[", 
      OverscriptBox["\[Theta]", "\[RightVector]"], "]"}], " ", "=", 
     RowBox[{
      SubscriptBox["channel", 
       OverscriptBox["\[Theta]", "\[RightVector]"]], 
      RowBox[{"{", " ", "in\[Rho]", " ", "}"}]}]}], "  ", ","}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "53826724-e832-4183-9c44-88b547aba323"],
 "\n\nwhich in many settings ",
 ButtonBox["well approximates",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/pdf/1912.08660.pdf"], None},
  ButtonNote->"https://arxiv.org/pdf/1912.08660.pdf"],
 " the ",
 ButtonBox["quantum Fisher information matrix",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://iopscience.iop.org/article/10.1088/1751-8121/ab5d4d"], None},
  
  ButtonNote->"https://iopscience.iop.org/article/10.1088/1751-8121/ab5d4d"],
 " and can replace it in quantum natural gradient for a superior noise-aware \
minimisation."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.87682910238634*^9, 3.876829145262968*^9}, {3.876829212141045*^9, 
  3.876829348260315*^9}, {3.8768293884364777`*^9, 3.876829502655077*^9}, {
  3.8768295573456593`*^9, 3.876829578120677*^9}, {3.876831823342853*^9, 
  3.876832117746372*^9}, {3.876832221408842*^9, 3.876832256767847*^9}, {
  3.876832333698083*^9, 3.876832337221506*^9}, {3.876832394075571*^9, 
  3.8768324567018538`*^9}, {3.876832505320484*^9, 3.876832636124268*^9}, {
  3.8768326805022697`*^9, 3.876832736591076*^9}, {3.8768329600601387`*^9, 
  3.876832971957844*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"cfa5de06-5bb2-4357-87fe-ff3b014be22c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcMetricTensor"}]], "Input",
 CellChangeTimes->{{3.8768227463646193`*^9, 3.876822747363241*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"52e323c8-d2fa-4cdc-9459-eb4f2f2e6e76"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcMetricTensor[inQureg, circuit, varVals] returns \
the natural gradient metric tensor, capturing the circuit derivatives \
(produced from initial state inQureg) with respect to varVals, specified with \
values {var -> value, ...}.\\n    CalcMetricTensor[inQureg, circuit, varVals, \
workQuregs] uses the given persistent workspace quregs (workQuregs) in lieu \
of creating them internally, and should be used for optimum performance. At \
most four workQuregs are needed.\\n    \[Bullet] For state-vectors and pure \
circuits, this returns the quantum geometric tensor, which relates to the \
Fubini-Study metric, the classical Fisher information matrix, and the \
variational imaginary-time Li tensor with Berry connections.\\n    \[Bullet] \
For density-matrices and noisy channels, this function returns the \
Hilbert-Schmidt derivative metric, which well approximates the quantum Fisher \
information matrix, though is a more experimentally relevant minimisation \
metric (https://arxiv.org/abs/1912.08660).\\n    \[Bullet] Variable \
repetition, multi-parameter gates, variable-dependent element-wise matrices, \
variable-dependent channels, and operators whose parameters are (numerically \
evaluable) functions of variables are all permitted. \\n    \[Bullet] All \
operators must be invertible, trace-preserving and deterministic, else an \
error is thrown. \\n    \[Bullet] This function runs asymptotically faster \
than ApplyCircuitDerivs[] and requires only a fixed memory overhead.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"CalcMetricTensor", "[", 
                    RowBox[{"QuEST`Private`initQureg_Integer", ",", 
                    
                    RowBox[{
                    "QuEST`Private`circuit_", "?", 
                    "QuEST`Private`isCircuitFormat"}], ",", 
                    RowBox[{"QuEST`Private`varVals", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"_", "?", "Internal`RealValuedNumericQ"}]}], 
                    ")"}], ".."}], "}"}]}], ",", 
                    RowBox[{"QuEST`Private`workQuregs", ":", 
                    RowBox[{"{", "___Integer", "}"}], ":", 
                    RowBox[{"{", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`ret", ",", 
                    "QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms", ",", 
                    "QuEST`Private`retArrs"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"QuEST`Private`ret", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"QuEST`Private`encodeDerivCirc", "[", 
                    
                    RowBox[{"QuEST`Private`circuit", ",", 
                    "QuEST`Private`varVals"}], "]"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "[", "QuEST`Private`ret", "]"}], "===", 
                    "String"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcMetricTensor", "::", "error"}], 
                    "MessageName"], ",", "QuEST`Private`ret"}], "]"}], ";", 
                    RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`encodedCirc", ",", 
                    "QuEST`Private`encodedDerivTerms"}], "}"}], "=", 
                    "QuEST`Private`ret"}], ";", 
                    RowBox[{"QuEST`Private`data", "=", 
                    RowBox[{"QuEST`Private`CalcMetricTensorInternal", "[", 
                    
                    RowBox[{"QuEST`Private`initQureg", ",", 
                    "QuEST`Private`workQuregs", ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedCircuit", "[", 
                    "QuEST`Private`encodedCirc", "]"}], ",", 
                    
                    RowBox[{"QuEST`Private`unpackEncodedDerivCircTerms", "[", 
                    "QuEST`Private`encodedDerivTerms", "]"}]}], "]"}]}], ";", 
                    
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`data", "===", "$Failed"}], ",", 
                    "QuEST`Private`data", ",", 
                    RowBox[{"ArrayReshape", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", "#2"}]}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "1",
                     "\[RightDoubleBracket]"}], ",", 
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "2",
                     "\[RightDoubleBracket]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "QuEST`Private`varVals", "]"}], 
                    " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}]}], "]"}]}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcMetricTensor", "[", "__", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", "CalcMetricTensor", 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`CalcMetricTensor\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcMetricTensor[inQureg, circuit, varVals] returns \
the natural gradient metric tensor, capturing the circuit derivatives \
(produced from initial state inQureg) with respect to varVals, specified with \
values {var -> value, ...}.\\n    CalcMetricTensor[inQureg, circuit, varVals, \
workQuregs] uses the given persistent workspace quregs (workQuregs) in lieu \
of creating them internally, and should be used for optimum performance. At \
most four workQuregs are needed.\\n    \[Bullet] For state-vectors and pure \
circuits, this returns the quantum geometric tensor, which relates to the \
Fubini-Study metric, the classical Fisher information matrix, and the \
variational imaginary-time Li tensor with Berry connections.\\n    \[Bullet] \
For density-matrices and noisy channels, this function returns the \
Hilbert-Schmidt derivative metric, which well approximates the quantum Fisher \
information matrix, though is a more experimentally relevant minimisation \
metric (https://arxiv.org/abs/1912.08660).\\n    \[Bullet] Variable \
repetition, multi-parameter gates, variable-dependent element-wise matrices, \
variable-dependent channels, and operators whose parameters are (numerically \
evaluable) functions of variables are all permitted. \\n    \[Bullet] All \
operators must be invertible, trace-preserving and deterministic, else an \
error is thrown. \\n    \[Bullet] This function runs asymptotically faster \
than ApplyCircuitDerivs[] and requires only a fixed memory overhead.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "CalcMetricTensor[inQureg, circuit, varVals] returns the natural gradient \
metric tensor, capturing the circuit derivatives (produced from initial state \
inQureg) with respect to varVals, specified with values {var -> value, ...}.\n\
    CalcMetricTensor[inQureg, circuit, varVals, workQuregs] uses the given \
persistent workspace quregs (workQuregs) in lieu of creating them internally, \
and should be used for optimum performance. At most four workQuregs are \
needed.\n    \[Bullet] For state-vectors and pure circuits, this returns the \
quantum geometric tensor, which relates to the Fubini-Study metric, the \
classical Fisher information matrix, and the variational imaginary-time Li \
tensor with Berry connections.\n    \[Bullet] For density-matrices and noisy \
channels, this function returns the Hilbert-Schmidt derivative metric, which \
well approximates the quantum Fisher information matrix, though is a more \
experimentally relevant minimisation metric \
(https://arxiv.org/abs/1912.08660).\n    \[Bullet] Variable repetition, \
multi-parameter gates, variable-dependent element-wise matrices, \
variable-dependent channels, and operators whose parameters are (numerically \
evaluable) functions of variables are all permitted. \n    \[Bullet] All \
operators must be invertible, trace-preserving and deterministic, else an \
error is thrown. \n    \[Bullet] This function runs asymptotically faster \
than ApplyCircuitDerivs[] and requires only a fixed memory overhead.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`CalcMetricTensor, {QuEST`CalcMetricTensor[
         Pattern[QuEST`Private`initQureg, 
          Blank[Integer]], 
         PatternTest[
          Pattern[QuEST`Private`circuit, 
           Blank[]], QuEST`Private`isCircuitFormat], 
         Pattern[QuEST`Private`varVals, {
           Repeated[Blank[] -> PatternTest[
              Blank[], Internal`RealValuedNumericQ]]}], 
         Optional[
          Pattern[QuEST`Private`workQuregs, {
            BlankNullSequence[Integer]}], {}]] :> 
       Module[{QuEST`Private`ret, QuEST`Private`encodedCirc, 
          QuEST`Private`encodedDerivTerms, QuEST`Private`retArrs}, 
         QuEST`Private`ret = Catch[
            QuEST`Private`encodeDerivCirc[
            QuEST`Private`circuit, QuEST`Private`varVals]]; 
         If[Head[QuEST`Private`ret] === String, Message[
             MessageName[QuEST`CalcMetricTensor, "error"], QuEST`Private`ret]; 
           Return[$Failed]]; {
           QuEST`Private`encodedCirc, QuEST`Private`encodedDerivTerms} = 
          QuEST`Private`ret; 
         QuEST`Private`data = 
          QuEST`Private`CalcMetricTensorInternal[
           QuEST`Private`initQureg, QuEST`Private`workQuregs, 
            QuEST`Private`unpackEncodedCircuit[QuEST`Private`encodedCirc], 
            QuEST`Private`unpackEncodedDerivCircTerms[
            QuEST`Private`encodedDerivTerms]]; 
         If[QuEST`Private`data === $Failed, QuEST`Private`data, 
           ArrayReshape[
            MapThread[# + I #2& , {
              Part[QuEST`Private`data, 1], 
              Part[QuEST`Private`data, 2]}], 
            Length[QuEST`Private`varVals] {1, 1}]]], QuEST`CalcMetricTensor[
         BlankSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`CalcMetricTensor]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`CalcMetricTensor"|>, False]]], "Output",
 CellChangeTimes->{3.876822747627776*^9, 3.876823479891444*^9, 
  3.8768237930959053`*^9, 3.8768240909652653`*^9, 3.8768269180435963`*^9, 
  3.876827318182044*^9, 3.8768281189537983`*^9, 3.87683291549109*^9, 
  3.876841229915612*^9, 3.876841320156386*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"4e49a96e-dca4-45f4-8d8f-bd0d6cf81576"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{"u", "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "u", "]"}]}], "Input",
 CellChangeTimes->{{3.876833338583145*^9, 3.876833339719562*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b4213d90-ff4e-430d-a2b0-cf472216558a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["Rx", "0"], "[", "a", "]"}], ",", 
   RowBox[{
    SubscriptBox["Ry", "1"], "[", 
    RowBox[{
     RowBox[{"-", "a"}], "+", 
     SuperscriptBox["b", "2"]}], "]"}], ",", 
   RowBox[{
    SubscriptBox["Deph", 
     RowBox[{"0", ",", "1"}]], "[", 
    RowBox[{"a", " ", "c"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["C", "0"], "[", 
    RowBox[{"R", "[", 
     RowBox[{
      FractionBox["c", "a"], ",", 
      RowBox[{
       SubscriptBox["Y", "2"], " ", 
       SubscriptBox["Z", "1"]}]}], "]"}], "]"}], ",", 
   RowBox[{
    SubscriptBox["Depol", 
     RowBox[{"1", ",", "2"}]], "[", 
    RowBox[{"a", "-", "b", "+", "c"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.876822865172039*^9, 3.876823479918995*^9, 3.8768237931397543`*^9, 
   3.876824091023512*^9, 3.876826918072381*^9, 3.87682731824441*^9, 
   3.876828119011508*^9, 3.8768329155199337`*^9, {3.876833340083024*^9, 
   3.876833350886601*^9}, 3.876841229931449*^9, 3.876841320176539*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"0773103f-9b46-410e-a1fc-38c2dda243aa"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Rx\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{1.1, 0.1}, {1.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {1.5, 1.}]}, {
     {FaceForm[GrayLevel[0]], DiskBox[{2.5, 0.5}, 0.1], 
      LineBox[{{2.5, 0.5}, {2.5, 2.5}}]}, {
      LineBox[{{2.5, 1.5}, {2.5, 2.5}}], {
       RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
       InsetBox["\<\"Ry\"\>", {2.5, 2.5}]}, {
       RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
       InsetBox["\<\"Rz\"\>", {2.5, 1.5}]}}}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 1.1}, {3.9, 2.9}], 
     InsetBox["\<\"\[CapitalDelta]\"\>", {3.5, 2.}]}}},
  ImageSize->150,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.876822865172039*^9, 3.876823479918995*^9, 3.8768237931397543`*^9, 
   3.876824091023512*^9, 3.876826918072381*^9, 3.87682731824441*^9, 
   3.876828119011508*^9, 3.8768329155199337`*^9, {3.876833340083024*^9, 
   3.876833350886601*^9}, 3.876841229931449*^9, 3.876841320219242*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"b0308a01-4ca7-4a19-8413-2d1ed654f286"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CalcMetricTensor", "[", 
    RowBox[{"in\[Rho]", ",", " ", "u", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a", "->", ".1"}], ",", 
       RowBox[{"b", "->", ".2"}], ",", 
       RowBox[{"c", "->", ".3"}]}], "}"}]}], "]"}], " ", "//", " ", "Chop"}], 
  " ", "//", " ", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.876817670179308*^9, 3.876817962114646*^9}, {
  3.8768180698108063`*^9, 3.876818069989628*^9}, {3.8768183319147873`*^9, 
  3.876818333800426*^9}, {3.876822763641171*^9, 3.876822788898559*^9}, {
  3.876822864388508*^9, 3.876822871255167*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"bdc58f52-b1dc-4061-9539-3ce55cadc276"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"142.84553911819563`", 
      RowBox[{"-", "1.3905061478644585`"}], 
      RowBox[{"-", "45.621418769745375`"}]},
     {
      RowBox[{"-", "1.3905061478644585`"}], "0.9748508945878105`", 
      RowBox[{"-", "0.9744462293859221`"}]},
     {
      RowBox[{"-", "45.621418769745375`"}], 
      RowBox[{"-", "0.9744462293859221`"}], "16.687937233594944`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.876822780237007*^9, 3.8768227890786467`*^9}, {
   3.8768228677290154`*^9, 3.87682287170804*^9}, 3.876823479941368*^9, 
   3.876823793159096*^9, 3.876824091043421*^9, 3.876826918084631*^9, 
   3.8768273183070087`*^9, 3.876828119029357*^9, 3.876832915530139*^9, 
   3.876841229974124*^9, 3.87684132023822*^9},
 CellLabel->
  "Out[24]//MatrixForm=",ExpressionUUID->"0601a102-8cf4-42cc-8fa8-\
0be0df0e220d"]
}, Open  ]],

Cell["\<\
These functions make variational simulation trivial. We here demonstrate \
noise-aware quantum natural gradient, whereby dephasing noise strength is \
correlated with the prior gate parameter.\
\>", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.876833033877795*^9, 3.876833046021997*^9}, {3.8768335481584806`*^9, 
  3.876833570487969*^9}, {3.8768342728552847`*^9, 3.876834290196018*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"b69fb4ea-4c74-4872-83f0-2fbd02a30cf5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"u", " ", "=", " ", 
   RowBox[{"GetKnownCircuit", "[", 
    RowBox[{
    "\"\<HardwareEfficientAnsatz\>\"", ",", " ", "2", ",", " ", "\[Theta]", 
     ",", " ", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"i", " ", "=", " ", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"u", " ", "=", " ", 
   RowBox[{
    RowBox[{"Riffle", "[", 
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"u", ",", "3"}], "]"}], ",", " ", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           SubscriptBox["Deph", "q"], "[", 
           RowBox[{".2", " ", "+", " ", 
            RowBox[{
             SuperscriptBox["10", 
              RowBox[{"-", "4"}]], " ", 
             RowBox[{"\[Theta]", "[", 
              RowBox[{"i", "++"}], "]"}]}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"q", ",", "0", ",", "2"}], "}"}]}], "]"}], ",", " ", 
        RowBox[{"Length", "[", "u", "]"}]}], "]"}]}], "]"}], " ", "//", " ", 
    "Flatten"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"DrawCircuit", "[", "u", "]"}]}], "Input",
 CellChangeTimes->{{3.876833048450787*^9, 3.8768331450333643`*^9}, {
  3.876833207542595*^9, 3.876833321566572*^9}, {3.876833523736114*^9, 
  3.8768335295747232`*^9}, {3.876833573393722*^9, 3.876833628795801*^9}, {
  3.876833671689249*^9, 3.876833671817781*^9}, {3.8768340535710583`*^9, 
  3.876834067827199*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f4e097c1-7186-481c-91e3-e9ff261de26b"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}, {
     LineBox[{{2, 0.5}, {3, 0.5}}], LineBox[{{2, 1.5}, {3, 1.5}}], 
     LineBox[{{2, 2.5}, {3, 2.5}}]}, {LineBox[{{3, 0.5}, {4, 0.5}}], 
     LineBox[{{3, 1.5}, {4, 1.5}}], LineBox[{{3, 2.5}, {4, 2.5}}]}, {
     LineBox[{{4, 0.5}, {5, 0.5}}], LineBox[{{4, 1.5}, {5, 1.5}}], 
     LineBox[{{4, 2.5}, {5, 2.5}}]}, {LineBox[{{5, 0.5}, {6, 0.5}}], 
     LineBox[{{5, 1.5}, {6, 1.5}}], LineBox[{{5, 2.5}, {6, 2.5}}]}, {
     LineBox[{{6, 0.5}, {7, 0.5}}], LineBox[{{6, 1.5}, {7, 1.5}}], 
     LineBox[{{6, 2.5}, {7, 2.5}}]}, {LineBox[{{7, 0.5}, {8, 0.5}}], 
     LineBox[{{7, 1.5}, {8, 1.5}}], LineBox[{{7, 2.5}, {8, 2.5}}]}, {
     LineBox[{{8, 0.5}, {9, 0.5}}], LineBox[{{8, 1.5}, {9, 1.5}}], 
     LineBox[{{8, 2.5}, {9, 2.5}}]}, {LineBox[{{9, 0.5}, {10, 0.5}}], 
     LineBox[{{9, 1.5}, {10, 1.5}}], LineBox[{{9, 2.5}, {10, 2.5}}]}, {
     LineBox[{{10, 0.5}, {11, 0.5}}], LineBox[{{10, 1.5}, {11, 1.5}}], 
     LineBox[{{10, 2.5}, {11, 2.5}}]}, {LineBox[{{11, 0.5}, {12, 0.5}}], 
     LineBox[{{11, 1.5}, {12, 1.5}}], LineBox[{{11, 2.5}, {12, 2.5}}]}, {
     LineBox[{{12, 0.5}, {13, 0.5}}], LineBox[{{12, 1.5}, {13, 1.5}}], 
     LineBox[{{12, 2.5}, {13, 2.5}}]}, {LineBox[{{13, 0.5}, {14, 0.5}}], 
     LineBox[{{13, 1.5}, {14, 1.5}}], LineBox[{{13, 2.5}, {14, 2.5}}]}, {
     LineBox[{{14, 0.5}, {15, 0.5}}], LineBox[{{14, 1.5}, {15, 1.5}}], 
     LineBox[{{14, 2.5}, {15, 2.5}}]}, {LineBox[{{15, 0.5}, {16, 0.5}}], 
     LineBox[{{15, 1.5}, {16, 1.5}}], LineBox[{{15, 2.5}, {16, 2.5}}]}, {
     LineBox[{{16, 0.5}, {17, 0.5}}], LineBox[{{16, 1.5}, {17, 1.5}}], 
     LineBox[{{16, 2.5}, {17, 2.5}}]}, {LineBox[{{17, 0.5}, {18, 0.5}}], 
     LineBox[{{17, 1.5}, {18, 1.5}}], LineBox[{{17, 2.5}, {18, 2.5}}]}, {
     LineBox[{{18, 0.5}, {19, 0.5}}], LineBox[{{18, 1.5}, {19, 1.5}}], 
     LineBox[{{18, 2.5}, {19, 2.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 0.5}]}, {
     RectangleBox[{0.1, 1.1}, {0.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {0.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{0.1, 2.1}, {0.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {0.5, 2.5}]}, {
     RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {1.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{1.1, 1.1}, {1.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {1.5, 1.5}]}, {
     RectangleBox[{1.1, 2.1}, {1.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {1.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{2.1, 0.1}, {2.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {2.5, 0.5}]}, {
     RectangleBox[{2.1, 1.1}, {2.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {2.5, 1.5}]}, {
     RectangleBox[{2.1, 2.1}, {2.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {2.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 0.1}, {3.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {3.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 1.1}, {3.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {3.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{3.1, 2.1}, {3.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {3.5, 2.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{4.5, 0.5}, 0.1], DiskBox[{4.5, 1.5}, 0.1]}, 
      LineBox[{{4.5, 0.5}, {4.5, 1.5}}]}, LineBox[{{4.5, 0.5}, {4.5, 0.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{5.5, 2.5}, 0.1], DiskBox[{5.5, 0.5}, 0.1]}, 
      LineBox[{{5.5, 0.5}, {5.5, 2.5}}]}, LineBox[{{5.5, 2.5}, {5.5, 2.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{6.5, 1.5}, 0.1], DiskBox[{6.5, 2.5}, 0.1]}, 
      LineBox[{{6.5, 1.5}, {6.5, 2.5}}]}, 
     LineBox[{{6.5, 1.5}, {6.5, 1.5}}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{6.1, 0.1}, {6.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {6.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{7.1, 1.1}, {7.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {7.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{7.1, 2.1}, {7.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {7.5, 2.5}]}, {
     RectangleBox[{7.1, 0.1}, {7.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {7.5, 0.5}]}, {
     RectangleBox[{8.1, 0.1}, {8.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {8.5, 0.5}]}, {
     RectangleBox[{8.1, 1.1}, {8.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {8.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{8.1, 2.1}, {8.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {8.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{9.1, 0.1}, {9.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {9.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], RectangleBox[{9.1, 1.1}, {9.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {9.5, 1.5}]}, {
     RectangleBox[{9.1, 2.1}, {9.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {9.5, 2.5}]}, {
     RectangleBox[{10.1, 1.1}, {10.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {10.5, 1.5}]}, {
     RectangleBox[{10.1, 2.1}, {10.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {10.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{10.1, 0.1}, {10.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {10.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{11.1, 1.1}, {11.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {11.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{11.1, 2.1}, {11.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {11.5, 2.5}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{12.5, 0.5}, 0.1], DiskBox[{12.5, 1.5}, 0.1]}, 
      LineBox[{{12.5, 0.5}, {12.5, 1.5}}]}, 
     LineBox[{{12.5, 0.5}, {12.5, 0.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{13.5, 2.5}, 0.1], DiskBox[{13.5, 0.5}, 0.1]}, 
      LineBox[{{13.5, 0.5}, {13.5, 2.5}}]}, 
     LineBox[{{13.5, 2.5}, {13.5, 2.5}}]}, {
     {FaceForm[GrayLevel[
      0]], {DiskBox[{14.5, 1.5}, 0.1], DiskBox[{14.5, 2.5}, 0.1]}, 
      LineBox[{{14.5, 1.5}, {14.5, 2.5}}]}, 
     LineBox[{{14.5, 1.5}, {14.5, 1.5}}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{14.1, 0.1}, {14.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {14.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{15.1, 1.1}, {15.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {15.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{15.1, 2.1}, {15.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {15.5, 2.5}]}, {
     RectangleBox[{15.1, 0.1}, {15.9, 0.9}], 
     InsetBox["\<\"Ry\"\>", {15.5, 0.5}]}, {
     RectangleBox[{16.1, 0.1}, {16.9, 0.9}], 
     InsetBox["\<\"Rz\"\>", {16.5, 0.5}]}, {
     RectangleBox[{16.1, 1.1}, {16.9, 1.9}], 
     InsetBox["\<\"Ry\"\>", {16.5, 1.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{16.1, 2.1}, {16.9, 2.9}], 
     InsetBox["\<\"\[Phi]\"\>", {16.5, 2.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{17.1, 0.1}, {17.9, 0.9}], 
     InsetBox["\<\"\[Phi]\"\>", {17.5, 0.5}]}, 
    {EdgeForm[Dashing[{Small, Small}]], 
     RectangleBox[{17.1, 1.1}, {17.9, 1.9}], 
     InsetBox["\<\"\[Phi]\"\>", {17.5, 1.5}]}, {
     RectangleBox[{17.1, 2.1}, {17.9, 2.9}], 
     InsetBox["\<\"Ry\"\>", {17.5, 2.5}]}, {
     RectangleBox[{18.1, 1.1}, {18.9, 1.9}], 
     InsetBox["\<\"Rz\"\>", {18.5, 1.5}]}, {
     RectangleBox[{18.1, 2.1}, {18.9, 2.9}], 
     InsetBox["\<\"Rz\"\>", {18.5, 2.5}]}}},
  ImageSize->600,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.876833145570032*^9, {3.876833232464611*^9, 3.876833321844783*^9}, 
   3.876833354368463*^9, 3.876833488411869*^9, 3.8768335298875628`*^9, {
   3.876833587327146*^9, 3.876833599120474*^9}, 3.876833633143469*^9, 
   3.876833672088243*^9, {3.876834054341681*^9, 3.876834068310052*^9}, 
   3.8768412300157213`*^9, 3.8768413203009043`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"04e160f0-e43a-475c-81b6-1247237eed9b"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\[Rho]", ",", " ", "in\[Rho]", ",", " ", "w\[Rho]"}], "}"}], " ",
    "=", " ", 
   RowBox[{"CreateDensityQuregs", "[", 
    RowBox[{"3", ",", " ", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InitPlusState", "[", "in\[Rho]", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.876833386087256*^9, 3.876833388057522*^9}, {
  3.876833812540663*^9, 3.87683382422608*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"31fdbf0d-e01e-43ee-ab41-e1f7357a7dd3"],

Cell[TextData[{
 "If one foregoes measuring the energy, then each iteration of minimisation \
requires only ",
 StyleBox["three",
  FontSlant->"Italic"],
 " function calls!",
 "  "
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.876833033877795*^9, 3.876833046021997*^9}, {3.8768335481584806`*^9, 
  3.876833570487969*^9}, {3.8768342728552847`*^9, 3.876834386295991*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"5636bc47-185e-44d9-9aea-de6bdf094418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[CapitalDelta]t", " ", "=", " ", ".01"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nt", " ", "=", " ", "50"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Theta]Vals", " ", "=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Theta]", "[", "i", "]"}], "->", 
       RowBox[{"RandomReal", "[", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"u", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1", ",", "1"}], "]"}], "]"}]}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eVals", " ", "=", " ", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"v", " ", "=", " ", 
       RowBox[{"CalcExpecPauliStringDerivs", "[", 
        RowBox[{
        "in\[Rho]", ",", " ", "u", ",", " ", "\[Theta]Vals", ",", " ", "h"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\t", 
      RowBox[{"m", " ", "=", " ", 
       RowBox[{
        RowBox[{"CalcMetricTensor", "[", 
         RowBox[{"in\[Rho]", ",", " ", "u", ",", " ", "\[Theta]Vals"}], "]"}],
         " ", "//", " ", "Chop"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"\[CapitalDelta]\[Theta]", " ", "=", " ", 
       RowBox[{"Fit", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", ",", "v"}], "}"}], ",", " ", 
         RowBox[{"FitRegularization", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<Tikhonov\>\"", ",", 
            SuperscriptBox["10", 
             RowBox[{"-", "4"}]]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"\[Theta]Vals", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], " ", "+=", " ", 
       RowBox[{
        RowBox[{"-", " ", "\[CapitalDelta]\[Theta]"}], " ", 
        "\[CapitalDelta]t"}]}], " ", ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"ApplyCircuit", "[", 
       RowBox[{
        RowBox[{"CloneQureg", "[", 
         RowBox[{"\[Rho]", ",", "in\[Rho]"}], "]"}], ",", " ", 
        RowBox[{"u", " ", "/.", " ", "\[Theta]Vals"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\t", 
      RowBox[{"CalcExpecPauliString", "[", 
       RowBox[{"\[Rho]", ",", "h", ",", " ", "w\[Rho]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\t", "nt"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.876833158733144*^9, 3.876833195745886*^9}, {
  3.876833361516423*^9, 3.876833499063077*^9}, {3.8768336397043858`*^9, 
  3.876833803856593*^9}, {3.876833891809461*^9, 3.876834034415255*^9}, {
  3.876834077731303*^9, 3.876834223460491*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"eaec4548-b14e-4e78-b2d3-df6886618eae"],

Cell["Here is how the energy evolved", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, {
  3.876833033877795*^9, 3.876833046021997*^9}, {3.8768335481584806`*^9, 
  3.876833570487969*^9}, {3.8768342728552847`*^9, 3.876834407603574*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"0faeb42a-a76a-4caa-a5bb-e14a616d051e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"eMin", " ", "=", " ", 
    RowBox[{"CalcPauliStringMinEigVal", "[", "h", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"eVals", ",", " ", "\[IndentingNewLine]", "\t", 
   RowBox[{"AxesLabel", "\[Rule]", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Iterations\>\"", ",", " ", "\"\<Energy\>\""}], "}"}]}], ",",
    "\[IndentingNewLine]", "\t", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"1.05", " ", "eMin"}]}], "}"}]}], ",", " ", 
   "\[IndentingNewLine]", "\t", 
   RowBox[{"PlotMarkers", "\[Rule]", "Automatic"}], ",", " ", 
   "\[IndentingNewLine]", "\t", 
   RowBox[{"GridLines", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"eMin", ",", 
         RowBox[{"Directive", "[", 
          RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}], "}"}]}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.876834226241292*^9, 3.876834250305787*^9}, {
  3.876834412723524*^9, 3.8768344250868607`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"c4260f19-d560-4070-b7de-8951f6f8f316"],

Cell[BoxData[
 GraphicsBox[{{}, {{{}, {}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       NCache[
        Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAmIQrbLvbZ1390d7BlTg4PbVV+y364f9EC6Hw5l0riee
Av+gfAGHhz7L+Ba7sR6A8EUcjPbGbvfdzgPlSzgc/Wb7ecd1QShfxsF21o0X
DLdEoHwFBwEvJo7efnEoX8lhip9V2YZ/klC+igPbr5z7XY+loXw1hwmikgYa
n2F8DYfZLeduhd2E8bUc5l6adWiltQyUr+NwIeNJbgBcXs+hTIGj2j4FJm/g
IHVHtNBBCMY3dDB4Jxka7wjjGzk0T7Q43PYept/YwW5jxZUrVTB5EwdTWVel
RgUY39Qh4Pr0E7cDYXwzB8Hbe+5o/4DpN3d4a9Pf9bADJm/hsN3jyr79hjC+
pcOM8I8XpXxhfCsH2ZiVWUu4YXxrBzMmvmzJRhjfxuFRzkutWLi8rcNtg4+2
P1pgfDsH4cNV+q8FYXx7h9lSVdEZDTC+g0PvxjTuUDYov8HBIXMlM6NaH0ze
0WFu4rYfDzRg8o4OX94uFvmWDpN3cqjMcu9w/wX1X4OTg0j01Tvms2Hyzg6r
CrXF90fB9Ds7CLvc01FSg8m7ODwrfnwzIAwm7+KQsZrp72EtmLyrg5LbkocV
sPBscHVYXjM/NAAeXm4ODXmnjod4wOTdHC7/nilWbQeTd3dY8Lfp8G1jmLy7
w9v5KuzfomHyHg62lRwbEjlg8h4OB6feP5k2ASbv6dDSW7e6E+h/AM5B27o=

       "]]}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[1, 60], 0.016666666666666666`]], AbsoluteThickness[1.6], 
     GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[
          {EdgeForm[None], DiskBox[{0, 0}]}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[
            Rational[1, 60]], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Offset[6.272]], CompressedData["
1:eJw90GtI01EYx/E5yUaGbDm1LYU1ZIwpNWdeUrf9prsZTVY0hZaEUbrMCglE
Z8SsESYsDYrKIQaKsXyjb1zQZdWISqLrwnQjW4oUsdKsMRSlgf9nB54Xn/Pl
eXHOzmNnD55IZrFYivgkxYfNorOoFv6pm1x4+0DNXED/z5S5qlv0bZCD101b
5qu564y5CO8fSRvSb3qyYT4Uj+q9Ju9WxtvxPKpcvj/FY5wNZf/n76wZPmMR
uPvYHFdvFmMxrteUtY2tCxjnImWlZbZnbgdjCfoyBHLpMlkKt/PNTO00WYaB
D/3PPOXZjPPxzjZ/2pzou9Am4nSqj1OXQxjKaMU2cgHkvwSWoxqyApeulfov
/6b9QqjG2wMBO/U9KMrRibtE5CKYp26+DB4gF4MXfBjKi9F+CSIVvT3hbuql
8BoDj30F5L24Vbf0XmgilyHniKd5OJVcjmJ22ilBF7kC31p+yOoTXYmgfEkZ
c5JVSPfbd//kkdVwC+1Wm4MMuMYbUy0pjB3ASU9ykuQqdQ0GGiZiX6XUNfgb
GeJHm6hXoqPZ0G1YYd7nqATf+ilU4qZehXuteVm+w7RfhXTtl3yxhLoWC+fm
ps211LWwjbLX/DLqOoj1w+F2+k+HDnfPD1rMif/Sw3Fm8sUhI3U9Pq7ezuxU
UTfgztpFf7CQugGRwdzNUSt1I5QdnLEGDnUjnt6YfdXYR70aTteF0Svx9/8H
CsrddA==
      "]]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Iterations\"", TraditionalForm], 
    FormBox["\"Energy\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{{}, {{-8.107733006741872, 
      Directive[
       RGBColor[1, 0, 0], 
       Dashing[{Small, Small}]]}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 50}, {-8.513119657078967, 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.876834233544649*^9, 3.87683425063276*^9}, {
   3.8768344253408747`*^9, 3.8768344336774178`*^9}, 3.876841230427844*^9, 
   3.8768413225333557`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"a48d1d41-0dd4-44e9-8a56-d86077f981ac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Error reporting", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682828718469*^9, 
  3.876828293155188*^9}},ExpressionUUID->"4afae7f6-d453-4639-a52b-\
6b8625944f6c"],

Cell["\<\
Functions which process circuits can now precisely report the erroneous \
operator.\
\>", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"6c6dc5c2-a694-4a34-b2aa-ce3527348f08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcCircuitMatrix", "[", 
  SubscriptBox["J", "0"], "]"}]], "Input",
 CellChangeTimes->{{3.876828295078762*^9, 3.8768282997501307`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"1a6a98cf-fd0c-4b10-9a59-8479a5caeb86"],

Cell[BoxData[
 TemplateBox[{
  "CalcCircuitMatrix", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Circuit contained an unrecognised or \
unsupported gate: \\\\\\\\!\\\\\\\\(\\\\\\\\*SubscriptBox[\\\\\\\\\\\\\\\"J\\\
\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"]\\\\\\\\)\\\\\\\"\\\"}]\\)\"", 2, 37, 1, 
   32171162573673922766, "Local", "QuEST`CalcCircuitMatrix"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.8768282999873857`*^9, 3.8768329155571747`*^9, 
  3.876841230444397*^9, 3.876841322555863*^9},
 CellLabel->
  "During evaluation of \
In[37]:=",ExpressionUUID->"60d2ab70-0002-43de-bd81-bb362f062c8b"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.8768282999972477`*^9, 3.8768329155665894`*^9, 
  3.876841230454794*^9, 3.876841322566462*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"adb4337b-8544-4806-aeb4-bfc966c7a0fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ApplyCircuit", "[", 
  RowBox[{
   RowBox[{"CreateQureg", "[", "2", "]"}], ",", " ", 
   RowBox[{"Circuit", "[", 
    SubscriptBox["X", "3"], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.876828304057152*^9, 3.8768283113640537`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"947f57e7-6a88-4a1b-b15d-0e113800f8ef"],

Cell[BoxData[
 TemplateBox[{
  "ApplyCircuit", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Cannot simulate \
\\\\\\\\!\\\\\\\\(\\\\\\\\*SubscriptBox[\\\\\\\\\\\\\\\"X\\\\\\\\\\\\\\\", \\\
\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\"]\\\\\\\\). Invalid target qubit. Must be >=0 \
and <numQubits. The qureg (id 7) has been restored to its prior \
state.\\\\\\\"\\\"}]\\)\"", 2, 38, 2, 32171162573673922766, "Local", 
   "QuEST`ApplyCircuit"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.8768283129481297`*^9, 3.876832915575947*^9, 
  3.8768412304822702`*^9, 3.876841322574622*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"72f9777b-fd0e-421f-8fd2-4d5d2359ddf3"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.876828312956164*^9, 3.8768329155847054`*^9, 
  3.876841230493424*^9, 3.876841322583046*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"a6358ddb-b1c2-451d-b35e-0e166b839987"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ApplyCircuit", "[", 
  RowBox[{
   RowBox[{"CreateQureg", "[", "2", "]"}], ",", " ", 
   RowBox[{
    SubscriptBox["U", "0"], "[", 
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", "1"},
       {"2", "3"}
      }], "\[NoBreak]", ")"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.876828345129568*^9, 3.876828405055326*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"d6705ebb-dda9-4a2a-af10-e4533a603e36"],

Cell[BoxData[
 TemplateBox[{
  "ApplyCircuit", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Cannot simulate \
\\\\\\\\!\\\\\\\\(\\\\\\\\*RowBox[{SubscriptBox[\\\\\\\\\\\\\\\"U\\\\\\\\\\\\\
\\\", \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"], \\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\", \
TagBox[RowBox[{\\\\\\\\\\\\\\\"(\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\"\[NoBreak]\\\\\\\\\\\\\\\", GridBox[{{\\\\\\\\\\\\\\\"0\\\\\\\
\\\\\\\\\", \\\\\\\\\\\\\\\"1\\\\\\\\\\\\\\\"}, \
{\\\\\\\\\\\\\\\"2\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"3\\\\\\\\\\\\\\\"}}, \
Rule[RowSpacings, 1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \\\\\\\\\\\\\\\"\[NoBreak]\\\\\\\\\\\\\\\", \
\\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\"}], Function[BoxForm`e$, \
MatrixForm[BoxForm`e$]]], \\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\"}]\\\\\\\\). \
Matrix is not unitary. The qureg (id 8) has been restored to its prior state.\
\\\\\\\"\\\"}]\\)\"", 2, 39, 3, 32171162573673922766, "Local", 
   "QuEST`ApplyCircuit"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.876828355486866*^9, 3.876828405258477*^9}, 
   3.876832915607052*^9, 3.8768412305029*^9, 3.87684132260716*^9},
 CellLabel->
  "During evaluation of \
In[39]:=",ExpressionUUID->"b87bb788-1c72-4838-aeb8-52ee3b52c94f"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.876828350797401*^9, 3.876828405272066*^9}, 
   3.876832915615987*^9, 3.876841230511899*^9, 3.876841322616509*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"d0b2ddf2-4e34-446b-a015-a7e4b7b2af63"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GetRandomPauliString", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876822911707309*^9, 
  3.876822928290596*^9}},ExpressionUUID->"31ee56bd-ecb2-43fb-836b-\
2bbc8ccd40a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GetRandomPauliString"}]], "Input",
 CellChangeTimes->{{3.87682292984053*^9, 3.876822931392333*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"db7ffd60-d046-4e04-87b3-40a3724aef87"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetRandomPauliString[numQubits, numTerms, \
{minCoeff, maxCoeff}] generates a random Pauli string with unique Pauli \
tensors.\\nGetRandomPauliString[numQubits, All, {minCoeff, maxCoeff}] will \
generate all 4^numQubits unique Pauli \
tensors.\\nGetRandomPauliString[numQubits, {minCoeff, maxCoeff}] will \
generate 4 numQubits^4 unique terms / Pauli tensors, unless this exceeds the \
maximum of 4^numQubits.\\nGetRandomPauliString[numQubits] will generate \
random coefficients in [-1, 1].\\nAll combinations of optional arguments are \
possible.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"GetRandomPauliString", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "QuEST`Private`numQubits_Integer", "?", "Positive"}], ",", 
                    RowBox[{"QuEST`Private`numTerms", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", "Automatic", 
                    "|", "All"}], ":", "Automatic"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`minCoeff_", "?", 
                    "Internal`RealValuedNumericQ"}], ",", 
                    
                    RowBox[{"QuEST`Private`maxCoeff_", "?", 
                    "Internal`RealValuedNumericQ"}]}], "}"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`numUniqueTensors", "=", 
                    SuperscriptBox["4", "QuEST`Private`numQubits"]}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"NumericQ", "[", "QuEST`Private`numTerms", "]"}], 
                    "&&", 
                    
                    RowBox[{"QuEST`Private`numTerms", ">", 
                    "QuEST`Private`numUniqueTensors"}]}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"GetRandomPauliString", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"More terms were requested than there are unique Pauli \
tensors. Hide this warning with Quiet[].\""}], "]"}]}], "]"}], ";", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`strings", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RandomReal", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"QuEST`Private`minCoeff", ",", 
                    "QuEST`Private`maxCoeff"}], "}"}], "]"}], " ", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["#1", "#2"], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerDigits", "[", 
                    
                    RowBox[{"QuEST`Private`tensorInd", ",", "4", ",", 
                    "QuEST`Private`numQubits"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "\[Rule]", "Id"}], ",", 
                    RowBox[{"1", "\[Rule]", "X"}], ",", 
                    RowBox[{"2", "\[Rule]", "Y"}], ",", 
                    RowBox[{"3", "\[Rule]", "Z"}]}], "}"}]}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]}], "]"}]}], 
                    "}"}]}], "]"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    SubscriptBox["Id", "_"], "\[Rule]", "Nothing"}]}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    SubscriptBox["Id", "0"], "}"}]}]}], ")"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`tensorInd", ",", 
                    RowBox[{"RandomSample", "[", 
                    RowBox[{
                    RowBox[{"0", ";;", 
                    RowBox[{"QuEST`Private`numUniqueTensors", "-", "1"}]}], 
                    ",", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`numTerms", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Automatic", "\[Rule]", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["QuEST`Private`numQubits", "4"]}]}], ",", 
                    
                    RowBox[{"All", "\[Rule]", 
                    "QuEST`Private`numUniqueTensors"}]}], "}"}]}], ",", 
                    "QuEST`Private`numUniqueTensors"}], "]"}]}], "]"}]}], 
                    "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"Plus", "@@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"Last", "[", "QuEST`Private`strings", "]"}], ",", 
                    
                    SubscriptBox["_Symbol", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]]}], "]"}], 
                    ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Most", "[", "QuEST`Private`strings", "]"}], ",", 
                    
                    RowBox[{
                    RowBox[{"Last", "[", "QuEST`Private`strings", "]"}], " ", 
                    
                    SubscriptBox["Id", 
                    RowBox[{"QuEST`Private`numQubits", "-", "1"}]]}]}], "]"}],
                     ",", "QuEST`Private`strings"}], "]"}]}]}], "]"}]}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetRandomPauliString", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "QuEST`Private`numQubits_Integer", "?", "Positive"}], ",", 
                    RowBox[{"QuEST`Private`numTerms", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", "Automatic", 
                    "|", "All"}], ":", "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"GetRandomPauliString", "[", 
                    
                    RowBox[{
                    "QuEST`Private`numQubits", ",", "QuEST`Private`numTerms", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"GetRandomPauliString", "[", "___", "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "GetRandomPauliString", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`GetRandomPauliString\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"GetRandomPauliString[numQubits, numTerms, \
{minCoeff, maxCoeff}] generates a random Pauli string with unique Pauli \
tensors.\\nGetRandomPauliString[numQubits, All, {minCoeff, maxCoeff}] will \
generate all 4^numQubits unique Pauli \
tensors.\\nGetRandomPauliString[numQubits, {minCoeff, maxCoeff}] will \
generate 4 numQubits^4 unique terms / Pauli tensors, unless this exceeds the \
maximum of 4^numQubits.\\nGetRandomPauliString[numQubits] will generate \
random coefficients in [-1, 1].\\nAll combinations of optional arguments are \
possible.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "GetRandomPauliString[numQubits, numTerms, {minCoeff, maxCoeff}] \
generates a random Pauli string with unique Pauli tensors.\n\
GetRandomPauliString[numQubits, All, {minCoeff, maxCoeff}] will generate all \
4^numQubits unique Pauli tensors.\nGetRandomPauliString[numQubits, {minCoeff, \
maxCoeff}] will generate 4 numQubits^4 unique terms / Pauli tensors, unless \
this exceeds the maximum of 4^numQubits.\nGetRandomPauliString[numQubits] \
will generate random coefficients in [-1, 1].\nAll combinations of optional \
arguments are possible.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`GetRandomPauliString, {QuEST`GetRandomPauliString[
         PatternTest[
          Pattern[QuEST`Private`numQubits, 
           Blank[Integer]], Positive], 
         Optional[
          Pattern[QuEST`Private`numTerms, 
           Alternatives[
            PatternTest[
             Blank[Integer], Positive], Automatic, All]], Automatic], {
          PatternTest[
           Pattern[QuEST`Private`minCoeff, 
            Blank[]], Internal`RealValuedNumericQ], 
          PatternTest[
           Pattern[QuEST`Private`maxCoeff, 
            Blank[]], Internal`RealValuedNumericQ]}] :> 
       With[{QuEST`Private`numUniqueTensors = 4^QuEST`Private`numQubits}, If[
           And[
            NumericQ[QuEST`Private`numTerms], QuEST`Private`numTerms > 
            QuEST`Private`numUniqueTensors], 
           Message[
            MessageName[QuEST`GetRandomPauliString, "error"], 
            "More terms were requested than there are unique Pauli tensors. \
Hide this warning with Quiet[]."]]; 
         With[{QuEST`Private`strings = 
            Table[RandomReal[{QuEST`Private`minCoeff, QuEST`Private`maxCoeff}]
                Apply[Times, 
                ReplaceAll[
                 ReplaceAll[
                  MapThread[Subscript[#, #2]& , {
                    ReplaceAll[
                    IntegerDigits[
                    QuEST`Private`tensorInd, 4, QuEST`Private`numQubits], {
                    0 -> QuEST`Gate`Id, 1 -> QuEST`Gate`X, 2 -> QuEST`Gate`Y, 
                    3 -> QuEST`Gate`Z}], 
                    Range[0, QuEST`Private`numQubits - 1]}], 
                  Subscript[QuEST`Gate`Id, 
                    Blank[]] -> Nothing], {} -> {
                   Subscript[QuEST`Gate`Id, 0]}]], {QuEST`Private`tensorInd, 
               RandomSample[
                Span[0, QuEST`Private`numUniqueTensors - 1], 
                Min[
                 ReplaceAll[
                 QuEST`Private`numTerms, {
                  Automatic -> 4 QuEST`Private`numQubits^4, All -> 
                   QuEST`Private`numUniqueTensors}], 
                 QuEST`Private`numUniqueTensors]]}]}, 
           Apply[Plus, 
            If[
             FreeQ[
              Last[QuEST`Private`strings], 
              Subscript[
               Blank[Symbol], QuEST`Private`numQubits - 1]], 
             Append[
              Most[QuEST`Private`strings], Last[QuEST`Private`strings] 
              Subscript[QuEST`Gate`Id, QuEST`Private`numQubits - 1]], 
             QuEST`Private`strings]]]], QuEST`GetRandomPauliString[
         PatternTest[
          Pattern[QuEST`Private`numQubits, 
           Blank[Integer]], Positive], 
         Optional[
          Pattern[QuEST`Private`numTerms, 
           Alternatives[
            PatternTest[
             Blank[Integer], Positive], Automatic, All]], Automatic]] :> 
       QuEST`GetRandomPauliString[
        QuEST`Private`numQubits, QuEST`Private`numTerms, {-1, 1}], 
       QuEST`GetRandomPauliString[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`GetRandomPauliString]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`GetRandomPauliString"|>, False]]], "Output",
 CellChangeTimes->{3.8768229316712303`*^9, 3.876823480050069*^9, 
  3.876823793347982*^9, 3.8768240912112217`*^9, 3.8768269181563463`*^9, 
  3.876827318435233*^9, 3.876828119126659*^9, 3.876832915955516*^9, 
  3.876841230589517*^9, 3.876841322690906*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"bb6204b3-1dc0-46af-8425-00171c04dff9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetRandomPauliString", "[", 
  RowBox[{"3", ",", " ", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.8768229360864563`*^9, 3.876822954582857*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"4aacb01a-d13b-4694-bf5b-11af2481b58e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.9405672555090665`", " ", 
   SubscriptBox["Y", "0"]}], "+", 
  RowBox[{"0.013366280470497927`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Y", "2"]}], "+", 
  RowBox[{"0.40703154534165265`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Y", "2"]}], "-", 
  RowBox[{"0.24096637391742348`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Y", "0"], " ", 
   SubscriptBox["Y", "2"]}], "-", 
  RowBox[{"0.4585555724087196`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Y", "2"], " ", 
   SubscriptBox["Z", "1"]}], "+", 
  RowBox[{"0.6004428003244686`", " ", 
   SubscriptBox["Z", "0"], " ", 
   SubscriptBox["Z", "1"]}], "+", 
  RowBox[{"0.5025579837104757`", " ", 
   SubscriptBox["Z", "2"]}], "-", 
  RowBox[{"0.7562158057860779`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Z", "2"]}], "-", 
  RowBox[{"0.07756898552183511`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Y", "0"], " ", 
   SubscriptBox["Z", "2"]}], "-", 
  RowBox[{"0.34149413218001`", " ", 
   SubscriptBox["Z", "0"], " ", 
   SubscriptBox["Z", "1"], " ", 
   SubscriptBox["Z", "2"]}]}]], "Output",
 CellChangeTimes->{3.87682295492165*^9, 3.876823480066017*^9, 
  3.8768237933665123`*^9, 3.8768240912302837`*^9, 3.876826918167697*^9, 
  3.876827318454214*^9, 3.8768281191441174`*^9, 3.8768329159662247`*^9, 
  3.8768412306022797`*^9, 3.876841322702173*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"e0ee97e2-582b-43f5-8676-5e8d63e8e22e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GetRandomPauliString", "[", 
  RowBox[{"2", ",", " ", 
   SuperscriptBox["10", "5"], ",", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.876822963417842*^9, 3.876823011000585*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"8c964495-da8d-4b2e-8111-60f10c552b2a"],

Cell[BoxData[
 TemplateBox[{
  "GetRandomPauliString", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"More terms were requested than there are \
unique Pauli tensors. Hide this warning with Quiet[].\\\\\\\"\\\"}]\\)\"", 2, 
   42, 4, 32171162573673922766, "Local", "QuEST`GetRandomPauliString"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.876822965177506*^9, 3.876823011408227*^9}, 
   3.8768234800857353`*^9, 3.8768237934044647`*^9, 3.876824091284193*^9, 
   3.876826918193878*^9, 3.8768273185133553`*^9, 3.8768281191936274`*^9, 
   3.876832915990569*^9, 3.876841230628694*^9, 3.87684132272753*^9},
 CellLabel->
  "During evaluation of \
In[42]:=",ExpressionUUID->"27c40034-8fe5-4a92-9d45-bdd6912392bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.5086246958008225`", " ", 
   SubscriptBox["Id", "0"], " ", 
   SubscriptBox["Id", "1"]}], "+", 
  RowBox[{"0.3343800532239791`", " ", 
   SubscriptBox["X", "0"]}], "+", 
  RowBox[{"0.48828536671107203`", " ", 
   SubscriptBox["X", "1"]}], "+", 
  RowBox[{"0.5540759955174535`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["X", "1"]}], "+", 
  RowBox[{"0.663799187010939`", " ", 
   SubscriptBox["Y", "0"]}], "+", 
  RowBox[{"0.8460163246354668`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Y", "0"]}], "+", 
  RowBox[{"0.669191709775899`", " ", 
   SubscriptBox["Y", "1"]}], "+", 
  RowBox[{"0.8681376326643244`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Y", "1"]}], "+", 
  RowBox[{"0.0866328660983764`", " ", 
   SubscriptBox["Y", "0"], " ", 
   SubscriptBox["Y", "1"]}], "+", 
  RowBox[{"0.731168526375999`", " ", 
   SubscriptBox["Z", "0"]}], "+", 
  RowBox[{"0.19996385669889638`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Z", "0"]}], "+", 
  RowBox[{"0.06956536061495044`", " ", 
   SubscriptBox["Y", "1"], " ", 
   SubscriptBox["Z", "0"]}], "+", 
  RowBox[{"0.36594339034223244`", " ", 
   SubscriptBox["Z", "1"]}], "+", 
  RowBox[{"0.7628924934043988`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Z", "1"]}], "+", 
  RowBox[{"0.6866909816185076`", " ", 
   SubscriptBox["Y", "0"], " ", 
   SubscriptBox["Z", "1"]}], "+", 
  RowBox[{"0.1453361210547326`", " ", 
   SubscriptBox["Z", "0"], " ", 
   SubscriptBox["Z", "1"]}]}]], "Output",
 CellChangeTimes->{{3.8768229651903877`*^9, 3.876823011415992*^9}, 
   3.876823480099485*^9, 3.876823793424165*^9, 3.876824091305249*^9, 
   3.876826918204977*^9, 3.876827318532236*^9, 3.8768281192119226`*^9, 
   3.8768329159985113`*^9, 3.876841230641944*^9, 3.876841322735969*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"bef8bb5d-e498-4417-bfcb-728257cfab10"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcPauliStringMinEigVal", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876822911707309*^9, 
  3.8768229181493187`*^9}},ExpressionUUID->"e8e52950-7178-4bf0-a8b6-\
5d3cbe5c177d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcPauliStringMinEigVal"}]], "Input",
 CellChangeTimes->{{3.876822905284931*^9, 3.876822905475134*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"5628d739-af43-46b5-93a8-5dddb407d664"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcPauliStringMinEigVal[pauliString] returns the \
ground-state energy of the given real-weighted sum of Pauli \
tensors.\\nCalcPauliStringMinEigVal[pauliString, MaxIterations -> n] \
specifies to use at most n iterations in the invoked Arnaldi/Lanczos's method\
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"CalcPauliStringMinEigVal", "[", 
                    RowBox[{
                    
                    RowBox[{
                    "QuEST`Private`paulis_", "?", 
                    "QuEST`Private`isValidPauliString"}], ",", 
                    
                    RowBox[{
                    "MaxIterations", "\[Rule]", 
                    "QuEST`Private`its_Integer"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`matr", "=", 
                    
                    RowBox[{"CalcPauliExpressionMatrix", "[", 
                    "QuEST`Private`paulis", "]"}]}], "}"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"First", "[", 
                    RowBox[{"Eigenvalues", "[", 
                    RowBox[{
                    RowBox[{"-", "QuEST`Private`matr"}], ",", "1", ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Arnoldi\"", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "QuEST`Private`its"}],
                     ",", 
                    RowBox[{"\"Criteria\"", "\[Rule]", "\"RealPart\""}]}], 
                    "}"}]}]}], "]"}], "]"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcPauliStringMinEigVal", "[", 
                    
                    RowBox[{
                    "QuEST`Private`paulis_", "?", 
                    "QuEST`Private`isValidPauliString"}], "]"}], ":=", 
                    RowBox[{"CalcPauliStringMinEigVal", "[", 
                    RowBox[{"QuEST`Private`paulis", ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    SuperscriptBox["10", "5"]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcPauliStringMinEigVal", "[", "___", "]"}], 
                    ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "CalcPauliStringMinEigVal", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`CalcPauliStringMinEigVal\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcPauliStringMinEigVal[pauliString] returns the \
ground-state energy of the given real-weighted sum of Pauli \
tensors.\\nCalcPauliStringMinEigVal[pauliString, MaxIterations -> n] \
specifies to use at most n iterations in the invoked Arnaldi/Lanczos's method\
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "CalcPauliStringMinEigVal[pauliString] returns the ground-state energy of \
the given real-weighted sum of Pauli tensors.\n\
CalcPauliStringMinEigVal[pauliString, MaxIterations -> n] specifies to use at \
most n iterations in the invoked Arnaldi/Lanczos's method", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`CalcPauliStringMinEigVal, {
      QuEST`CalcPauliStringMinEigVal[
         PatternTest[
          Pattern[QuEST`Private`paulis, 
           Blank[]], QuEST`Private`isValidPauliString], MaxIterations -> 
         Pattern[QuEST`Private`its, 
           Blank[Integer]]] :> 
       With[{QuEST`Private`matr = 
          QuEST`CalcPauliExpressionMatrix[QuEST`Private`paulis]}, -First[
           
           Eigenvalues[-QuEST`Private`matr, 1, 
            Method -> {
             "Arnoldi", MaxIterations -> QuEST`Private`its, "Criteria" -> 
              "RealPart"}]]], QuEST`CalcPauliStringMinEigVal[
         PatternTest[
          Pattern[QuEST`Private`paulis, 
           Blank[]], QuEST`Private`isValidPauliString]] :> 
       QuEST`CalcPauliStringMinEigVal[
        QuEST`Private`paulis, MaxIterations -> 10^5], 
       QuEST`CalcPauliStringMinEigVal[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`CalcPauliStringMinEigVal]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`CalcPauliStringMinEigVal"|>, False]]], "Output",
 CellChangeTimes->{3.8768229057938137`*^9, 3.8768234801841383`*^9, 
  3.8768237935783463`*^9, 3.876824091460229*^9, 3.876826918287737*^9, 
  3.876827318699222*^9, 3.8768281192999573`*^9, 3.876832916066967*^9, 
  3.87684123071736*^9, 3.876841322805993*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"869bf5eb-949a-4089-94e6-8a9a71fc18cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcPauliStringMinEigVal", " ", "@", " ", 
  RowBox[{"GetRandomPauliString", "[", 
   RowBox[{"15", ",", " ", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.876823301150549*^9, 3.8768233216011972`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"4e618f15-8cd7-401a-9d42-2e7536dc171e"],

Cell[BoxData[
 RowBox[{"-", "2.9192969260673585`"}]], "Output",
 CellChangeTimes->{{3.876823304590427*^9, 3.876823323243443*^9}, 
   3.8768234830403757`*^9, 3.876823797008789*^9, 3.876824095292638*^9, 
   3.876826921108501*^9, 3.8768273216272383`*^9, 3.876828122866692*^9, 
   3.8768329181479187`*^9, 3.876841232500444*^9, 3.8768413243824368`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"c6ac4d12-743b-4384-9dc1-eadaf308ac62"]
}, Open  ]],

Cell[TextData[{
 "By using sparse matrices, this function will require exponentially less \
memory and be be significantly faster than alternative methods (like ",
 StyleBox["Min @ Eigenvalues @ CalcPauliStringMatrix[h]",
  FontWeight->"Bold"],
 ") when run on large systems (e.g. 15 qubits) with few terms."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"e6d0e103-cbf8-431e-b52f-bc7fc9b1fd23"]
}, Open  ]],

Cell[CellGroupData[{

Cell["SetQuregToPauliString", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876822911707309*^9, 
  3.8768229181493187`*^9}, {3.8768281866221237`*^9, 
  3.876828190424327*^9}},ExpressionUUID->"0b655695-5fc7-4178-a71f-\
ac21425fac02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SetQuregToPauliString"}]], "Input",
 CellChangeTimes->{{3.8768281759142647`*^9, 3.876828191944112*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"01bcb90b-cfcf-4ff5-b8c5-b0816abc7c3d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SetQuregToPauliString[qureg, pauliString] \
overwrites the given density matrix to become a dense matrix representation \
of the given pauli string.\\nThe state is likely no longer a valid density \
matrix but is useful as a persistent Z-basis representation of the pauli \
string, to be used in functions like CalcDensityInnerProduct[] and \
CalcExpecPauliStringDerivs[].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"SetQuregToPauliString", "[", 
                    RowBox[{"QuEST`Private`qureg_Integer", ",", 
                    
                    RowBox[{
                    "QuEST`Private`hamil_", "?", 
                    "QuEST`Private`isValidPauliString"}]}], "]"}], ":=", 
                    
                    RowBox[{
                    "QuEST`Private`SetQuregToPauliStringInternal", "[", 
                    RowBox[{"QuEST`Private`qureg", ",", 
                    RowBox[{"Sequence", "@@", 
                    
                    RowBox[{"QuEST`Private`getEncodedPauliString", "[", 
                    "QuEST`Private`hamil", "]"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"SetQuregToPauliString", "[", "___", "]"}], ":=", 
                    
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "SetQuregToPauliString", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`SetQuregToPauliString\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SetQuregToPauliString[qureg, pauliString] \
overwrites the given density matrix to become a dense matrix representation \
of the given pauli string.\\nThe state is likely no longer a valid density \
matrix but is useful as a persistent Z-basis representation of the pauli \
string, to be used in functions like CalcDensityInnerProduct[] and \
CalcExpecPauliStringDerivs[].\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "SetQuregToPauliString[qureg, pauliString] overwrites the given density \
matrix to become a dense matrix representation of the given pauli string.\n\
The state is likely no longer a valid density matrix but is useful as a \
persistent Z-basis representation of the pauli string, to be used in \
functions like CalcDensityInnerProduct[] and CalcExpecPauliStringDerivs[].", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`SetQuregToPauliString, {QuEST`SetQuregToPauliString[
         Pattern[QuEST`Private`qureg, 
          Blank[Integer]], 
         PatternTest[
          Pattern[QuEST`Private`hamil, 
           Blank[]], QuEST`Private`isValidPauliString]] :> 
       QuEST`Private`SetQuregToPauliStringInternal[QuEST`Private`qureg, 
         Apply[Sequence, 
          QuEST`Private`getEncodedPauliString[QuEST`Private`hamil]]], 
       QuEST`SetQuregToPauliString[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`SetQuregToPauliString]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`SetQuregToPauliString"|>, False]]], "Output",
 CellChangeTimes->{3.876828192272767*^9, 3.876832918266*^9, 
  3.8768412326857643`*^9, 3.876841324562537*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"5706ce0e-e4d1-48d3-be5f-50aa6bbcd2bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"h", " ", "=", " ", 
  RowBox[{"GetRandomPauliString", "[", 
   RowBox[{"3", ",", " ", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"CalcPauliExpressionMatrix", "[", "h", "]"}], " ", "//", "Chop"}], 
  "//", " ", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.876828197951696*^9, 3.876828271452897*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"1e0b0648-1725-41bc-841c-e54961aa87a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "0.33214394802233294`"}], " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["X", "2"]}], "+", 
  RowBox[{"0.7325108683586485`", " ", 
   SubscriptBox["X", "0"], " ", 
   SubscriptBox["Y", "1"], " ", 
   SubscriptBox["Z", "2"]}], "+", 
  RowBox[{"0.13626433303445218`", " ", 
   SubscriptBox["X", "1"], " ", 
   SubscriptBox["Z", "0"], " ", 
   SubscriptBox["Z", "2"]}]}]], "Output",
 CellChangeTimes->{{3.87682820615309*^9, 3.876828271721117*^9}, 
   3.876832918279996*^9, 3.8768412326981*^9, 3.876841324574862*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"7344acbd-dccd-4f94-a575-c81da76ea41f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0.13626433303445218`", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0"},
     {"0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"-", "0.13626433303445218`"}], "0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}]},
     {"0.13626433303445218`", 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0"},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"-", "0.13626433303445218`"}], "0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0"},
     {"0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0", 
      RowBox[{"-", "0.13626433303445218`"}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}]},
     {"0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      "0.13626433303445218`"},
     {
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0", 
      RowBox[{"-", "0.13626433303445218`"}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0"},
     {"0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      "0.13626433303445218`", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {8, 8}, 0, {
     1, {{0, 3, 6, 9, 12, 15, 18, 21, 24}, {{3}, {4}, {7}, {4}, {3}, {8}, {
       1}, {2}, {5}, {2}, {1}, {6}, {7}, {8}, {3}, {8}, {7}, {4}, {5}, {6}, {
       1}, {6}, {5}, {2}}}, {
      0.13626433303445218`, Complex[
       0., -0.7325108683586485], -0.33214394802233294`, -0.13626433303445218`,
        Complex[0., -0.7325108683586485], -0.33214394802233294`, 
       0.13626433303445218`, Complex[
       0., 0.7325108683586485], -0.33214394802233294`, -0.13626433303445218`, 
       Complex[0., 
        0.7325108683586485], -0.33214394802233294`, -0.13626433303445218`, 
       Complex[0., 0.7325108683586485], -0.33214394802233294`, 
       0.13626433303445218`, Complex[
       0., 0.7325108683586485], -0.33214394802233294`, -0.13626433303445218`, 
       Complex[0., -0.7325108683586485], -0.33214394802233294`, 
       0.13626433303445218`, Complex[
       0., -0.7325108683586485], -0.33214394802233294`}}]]]]], "Output",
 CellChangeTimes->{{3.87682820615309*^9, 3.876828271721117*^9}, 
   3.876832918279996*^9, 3.8768412326981*^9, 3.876841324577791*^9},
 CellLabel->
  "Out[47]//MatrixForm=",ExpressionUUID->"3741640a-007e-474c-a80a-\
8d11144283b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Rho]", " ", "=", " ", 
     RowBox[{"CreateDensityQureg", "[", "3", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetQuregToPauliString", "[", 
     RowBox[{"\[Rho]", ",", " ", "h"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"GetQuregMatrix", "[", "\[Rho]", "]"}], " ", "//", " ", "Chop"}],
     " ", "//", " ", "MatrixForm"}]}]}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"be3cee95-9571-4ab5-a227-be57b35af866"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0.13626433303445218`", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0"},
     {"0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"-", "0.13626433303445218`"}], "0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}]},
     {"0.13626433303445218`", 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0"},
     {
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      RowBox[{"-", "0.13626433303445218`"}], "0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0"},
     {"0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0", 
      RowBox[{"-", "0.13626433303445218`"}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}]},
     {"0", "0", "0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "+", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      "0.13626433303445218`"},
     {
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", "0", 
      RowBox[{"-", "0.13626433303445218`"}], 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], "0", "0"},
     {"0", 
      RowBox[{"-", "0.33214394802233294`"}], "0", "0", 
      RowBox[{"0.`", "\[VeryThinSpace]", "-", 
       RowBox[{"0.7325108683586485`", " ", "\[ImaginaryI]"}]}], 
      "0.13626433303445218`", "0", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.876828272595323*^9, 3.876832918307618*^9, 
  3.876841232744532*^9, 3.876841324601803*^9},
 CellLabel->
  "Out[50]//MatrixForm=",ExpressionUUID->"80216f9c-3862-4baa-b938-\
501412c9d6ba"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SampleClassicalShadow", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876822911707309*^9, 
  3.8768229181493187`*^9}, {3.8768281866221237`*^9, 3.876828190424327*^9}, {
  3.876828552681447*^9, 
  3.8768285547714167`*^9}},ExpressionUUID->"e39772de-f934-4146-8eaf-\
6f318d37109c"],

Cell[TextData[{
 StyleBox["SampleClassicalShadow",
  FontWeight->"Bold"],
 " encodes a density matrix into a number of sampled Pauli product outcomes, \
as per ",
 ButtonBox["this paper",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.nature.com/articles/s41567-020-0932-7"], None},
  ButtonNote->"https://www.nature.com/articles/s41567-020-0932-7"],
 "."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876840600016045*^9, 3.876840643990052*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"779bcef3-a151-4ff6-948e-d8cff03fc336"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SampleClassicalShadow"}]], "Input",
 CellChangeTimes->{{3.876828546027025*^9, 3.876828546314701*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"b05d7217-b4bf-406a-9e99-a5e27a52579d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SampleClassicalShadow[qureg, numSamples] returns a \
sequence of pseudorandom measurement bases (X, Y and Z) and their outcomes \
(as bits) when performed on all qubits of the given input state.\\n\[Bullet] \
The output has structure { {bases, outcomes}, ...} where bases is a list of \
Pauli bases (encoded as 1=X, 2=Y, 3=Z) specified per-qubit, and outcomes are \
the corresponding classical qubit outcomes (0 or 1).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{
                    RowBox[{"SampleClassicalShadow", "[", 
                    
                    RowBox[{
                    "QuEST`Private`qureg_Integer", ",", 
                    "QuEST`Private`numSamples_Integer"}], "]"}], "/;", 
                    RowBox[{"QuEST`Private`numSamples", "\[GreaterEqual]", 
                    SuperscriptBox["2", "63"]}]}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"SampleClassicalShadow", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"The requested number of samples is too large, and \
exceeds the maximum C long integer (2^63).\""}], "]"}], ";", "$Failed"}], 
                    ")"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"SampleClassicalShadow", "[", 
                    
                    RowBox[{
                    "QuEST`Private`qureg_Integer", ",", 
                    "QuEST`Private`numSamples_Integer"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"QuEST`Private`data", "=", 
                    
                    RowBox[{
                    "QuEST`Private`SampleClassicalShadowStateInternal", "[", 
                    
                    RowBox[{"QuEST`Private`qureg", ",", 
                    "QuEST`Private`numSamples"}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"QuEST`Private`data", "===", "$Failed"}], ",", 
                    "QuEST`Private`data", ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "2",
                     "\[RightDoubleBracket]"}], ",", 
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "1",
                     "\[RightDoubleBracket]"}]}], "]"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "3",
                     "\[RightDoubleBracket]"}], ",", 
                    
                    RowBox[{"QuEST`Private`data", "\[LeftDoubleBracket]", "1",
                     "\[RightDoubleBracket]"}]}], "]"}]}], "}"}], "]"}]}], 
                    "]"}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"SampleClassicalShadow", "[", "___", "]"}], ":=", 
                    
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "SampleClassicalShadow", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`SampleClassicalShadow\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"SampleClassicalShadow[qureg, numSamples] returns a \
sequence of pseudorandom measurement bases (X, Y and Z) and their outcomes \
(as bits) when performed on all qubits of the given input state.\\n\[Bullet] \
The output has structure { {bases, outcomes}, ...} where bases is a list of \
Pauli bases (encoded as 1=X, 2=Y, 3=Z) specified per-qubit, and outcomes are \
the corresponding classical qubit outcomes (0 or 1).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "SampleClassicalShadow[qureg, numSamples] returns a sequence of \
pseudorandom measurement bases (X, Y and Z) and their outcomes (as bits) when \
performed on all qubits of the given input state.\n\[Bullet] The output has \
structure { {bases, outcomes}, ...} where bases is a list of Pauli bases \
(encoded as 1=X, 2=Y, 3=Z) specified per-qubit, and outcomes are the \
corresponding classical qubit outcomes (0 or 1).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`SampleClassicalShadow, {Condition[
         QuEST`SampleClassicalShadow[
          Pattern[QuEST`Private`qureg, 
           Blank[Integer]], 
          Pattern[QuEST`Private`numSamples, 
           Blank[Integer]]], QuEST`Private`numSamples >= 2^63] :> (Message[
          MessageName[QuEST`SampleClassicalShadow, "error"], 
          "The requested number of samples is too large, and exceeds the \
maximum C long integer (2^63)."]; $Failed), QuEST`SampleClassicalShadow[
         Pattern[QuEST`Private`qureg, 
          Blank[Integer]], 
         Pattern[QuEST`Private`numSamples, 
          Blank[Integer]]] :> 
       With[{QuEST`Private`data = 
          QuEST`Private`SampleClassicalShadowStateInternal[
           QuEST`Private`qureg, QuEST`Private`numSamples]}, 
         If[QuEST`Private`data === $Failed, QuEST`Private`data, 
          Transpose[{
            Partition[
             Part[QuEST`Private`data, 2], 
             Part[QuEST`Private`data, 1]], 
            Partition[
             Part[QuEST`Private`data, 3], 
             Part[QuEST`Private`data, 1]]}]]], QuEST`SampleClassicalShadow[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`SampleClassicalShadow]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`SampleClassicalShadow"|>, False]]], "Output",
 CellChangeTimes->{3.876828546787813*^9, 3.876832918388096*^9, 
  3.876841232860845*^9, 3.876841324668468*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"983b9427-a421-42a7-a5b3-3f9e6ee0bdd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Rho]", " ", "=", " ", 
   RowBox[{"InitPlusState", " ", "@", " ", 
    RowBox[{"CreateDensityQureg", "[", "3", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ApplyCircuit", "[", 
    RowBox[{"\[Rho]", ",", " ", 
     RowBox[{"u", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"a", "->", ".4"}], ",", " ", 
        RowBox[{"b", "->", ".2"}], ",", " ", 
        RowBox[{"c", "->", ".5"}]}], "}"}]}]}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SampleClassicalShadow", "[", 
   RowBox[{"\[Rho]", ",", " ", "5"}], "]"}], " ", "//", " ", 
  "Column"}]}], "Input",
 CellChangeTimes->{{3.876828563552766*^9, 3.8768285663155117`*^9}, {
  3.8768286110358067`*^9, 3.876828623620029*^9}, {3.8768286625995417`*^9, 
  3.876828677914472*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"ceb4bb9c-1cba-4dae-9e65-3d5694d08f5a"],

Cell[BoxData[
 TemplateBox[{
  "ApplyCircuit", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"Circuit contains non-numerical or non-real \
parameters!\\\\\\\"\\\"}]\\)\"", 2, 53, 5, 32171162573673922766, "Local", 
   "QuEST`ApplyCircuit"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.876841232879908*^9, 3.876841324680181*^9},
 CellLabel->
  "During evaluation of \
In[52]:=",ExpressionUUID->"70e7ca41-7359-4ccd-932e-d21bbec57745"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "2", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]},
    {
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"3", ",", "3", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], "}"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.876828668538273*^9, 3.876828678166567*^9}, 
   3.8768329183990173`*^9, 3.876841232902891*^9, 3.876841324690158*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"5eb85acf-6f03-46c1-b6d7-9a5245480ae7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["New gates", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876828689478299*^9, 3.876828690875711*^9}, {
  3.8768289681122828`*^9, 
  3.8768289690007887`*^9}},ExpressionUUID->"ff8a01bb-eebb-4347-b445-\
1fc99ece1d7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Fac"}]], "Input",
 CellChangeTimes->{{3.876828969561336*^9, 3.8768289700909*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"82053fff-d6bb-45ad-9f59-fe2bfc4f1a3d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Fac[scalar] is a non-physical operator which \
multiplies the given complex scalar onto every amplitude of the quantum \
state. This is directly multiplied onto state-vectors and density-matrices, \
and may break state normalisation.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`Fac\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Fac[scalar] is a non-physical operator which \
multiplies the given complex scalar onto every amplitude of the quantum \
state. This is directly multiplied onto state-vectors and density-matrices, \
and may break state normalisation.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "Fac[scalar] is a non-physical operator which multiplies the given \
complex scalar onto every amplitude of the quantum state. This is directly \
multiplied onto state-vectors and density-matrices, and may break state \
normalisation.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "QuEST`Gate`Fac"|>, False]]], "Output",
 CellChangeTimes->{3.876828970337535*^9, 3.8768329184699907`*^9, 
  3.876841232995669*^9, 3.876841324768775*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"e52aeb49-f9c5-489e-8c95-09e26e584ff3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "UNonNorm"}]], "Input",
 CellChangeTimes->{{3.876828971317047*^9, 3.876828973806448*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"fe2e4356-fbc3-4c42-9dca-c9618465f9b0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"UNonNorm[matr] is treated like a general unitary \
gate U, but with relaxed normalisation conditions on the matrix. This is \
distinct to gate Matr, which will be internally assumed non-unitary.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`UNonNorm\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"UNonNorm[matr] is treated like a general unitary \
gate U, but with relaxed normalisation conditions on the matrix. This is \
distinct to gate Matr, which will be internally assumed non-unitary.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "UNonNorm[matr] is treated like a general unitary gate U, but with \
relaxed normalisation conditions on the matrix. This is distinct to gate \
Matr, which will be internally assumed non-unitary.", "Documentation" -> None,
     "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "QuEST`Gate`UNonNorm"|>, False]]], "Output",
 CellChangeTimes->{3.876828974132001*^9, 3.8768329185566683`*^9, 
  3.876841233094067*^9, 3.87684132484369*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"dfffb075-59bf-4310-850a-6b536cade138"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Matr"}]], "Input",
 CellChangeTimes->{{3.87682897507332*^9, 3.8768289757158546`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"13c42c79-ebc8-410c-aa5b-93524b104211"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix. Unlike UNonNorm, the given matrix is not internally \
assumed unitary. It is hence only left-multiplied onto density matrices.\"\>",
              "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`Matr\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix. Unlike UNonNorm, the given matrix is not internally \
assumed unitary. It is hence only left-multiplied onto density matrices.\"\>",
              "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "Matr[matrix] is an arbitrary operator with any number of target qubits, \
specified as a completely general (even non-unitary) square complex matrix. \
Unlike UNonNorm, the given matrix is not internally assumed unitary. It is \
hence only left-multiplied onto density matrices.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "QuEST`Gate`Matr"|>, False]]], "Output",
 CellChangeTimes->{3.876828975998569*^9, 3.876832918647315*^9, 
  3.8768412332033463`*^9, 3.876841324921088*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"59aed604-03dd-4ec0-842e-cdadf3241274"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changes", "Section",
 CellChangeTimes->{{3.876817617404207*^9, 3.876817618777925*^9}, {
  3.876823499848771*^9, 
  3.876823501118546*^9}},ExpressionUUID->"2da8172a-9237-4a9c-bd02-\
23446282a59f"],

Cell[CellGroupData[{

Cell["CalcDensityInnerProduct(s)", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876837349035513*^9, 
  3.876837362544569*^9}},ExpressionUUID->"6b08a688-a9c6-4830-a211-\
7743687ced8b"],

Cell[TextData[{
 StyleBox["CalcDensityInnerProduct",
  FontWeight->"Bold"],
 "(",
 StyleBox["s",
  FontWeight->"Bold"],
 ") now return ",
 StyleBox["complex",
  FontSlant->"Italic"],
 " scalars, capturing the full Hilbert-Schmidt scalar product when the input \
density matrices are not normalised."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"2a2f846b-109d-44aa-a014-7c527a1cf7c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcDensityInnerProduct"}]], "Input",
 CellChangeTimes->{{3.876837353625597*^9, 3.876837355136496*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"0238c22a-82a2-4182-9b4a-49e673958153"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcDensityInnerProduct[qureg1, qureg2] returns the \
the Hilbert schmidt scalar product between two given density matrices. If \
both quregs are valid/normalised, the result will be a real scalar, though \
may have a tiny non-zero imaginary component due to numerical imprecision. If \
either qureg is not a valid density matrix, the result may be a complex \
scalar.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"CalcDensityInnerProduct", "[", 
                    RowBox[{"qureg1_Integer", ",", "qureg2_Integer"}], "]"}], 
                    ":=", 
                    RowBox[{"ExternalCall", "[", 
                    RowBox[{
                    RowBox[{"LinkObject", "[", 
                    
                    RowBox[{
                    "\"'/Users/tysonjones/Desktop/GithubRepos/QuESTlink/quest_\
link'\"", ",", "166", ",", "7"}], "]"}], ",", 
                    RowBox[{"CallPacket", "[", 
                    RowBox[{"26", ",", 
                    RowBox[{"{", 
                    RowBox[{"qureg1", ",", "qureg2"}], "}"}]}], "]"}]}], 
                    "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"CalcDensityInnerProduct", "[", "___", "]"}], 
                    ":=", 
                    
                    RowBox[{
                    "QuEST`Private`invalidArgError", "[", 
                    "CalcDensityInnerProduct", "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`CalcDensityInnerProduct\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CalcDensityInnerProduct[qureg1, qureg2] returns the \
the Hilbert schmidt scalar product between two given density matrices. If \
both quregs are valid/normalised, the result will be a real scalar, though \
may have a tiny non-zero imaginary component due to numerical imprecision. If \
either qureg is not a valid density matrix, the result may be a complex \
scalar.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "CalcDensityInnerProduct[qureg1, qureg2] returns the the Hilbert schmidt \
scalar product between two given density matrices. If both quregs are \
valid/normalised, the result will be a real scalar, though may have a tiny \
non-zero imaginary component due to numerical imprecision. If either qureg is \
not a valid density matrix, the result may be a complex scalar.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`CalcDensityInnerProduct, {QuEST`CalcDensityInnerProduct[
         Pattern[$CellContext`qureg1, 
          Blank[Integer]], 
         Pattern[$CellContext`qureg2, 
          Blank[Integer]]] :> ExternalCall[
         LinkObject[
         "'/Users/tysonjones/Desktop/GithubRepos/QuESTlink/quest_link'", 166, 
          7], 
         CallPacket[26, {$CellContext`qureg1, $CellContext`qureg2}]], 
       QuEST`CalcDensityInnerProduct[
         BlankNullSequence[]] :> 
       QuEST`Private`invalidArgError[QuEST`CalcDensityInnerProduct]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`CalcDensityInnerProduct"|>, False]]], "Output",
 CellChangeTimes->{3.876837355650434*^9, 3.876841233235331*^9, 
  3.8768413250125837`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"38f49b58-1299-445b-8cca-6df6b99a9c02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], " ", "=", " ", 
   RowBox[{"CreateDensityQuregs", "[", 
    RowBox[{"3", ",", "2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetQuregMatrix", "[", 
    RowBox[{"a", ",", " ", 
     RowBox[{"RandomVariate", " ", "@", " ", 
      RowBox[{
      "CircularSymplecticMatrixDistribution", " ", "@", " ", "4"}]}]}], "]"}],
    ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"CalcDensityInnerProduct", "[", 
  RowBox[{"a", ",", "b"}], "]"}]}], "Input",
 CellChangeTimes->{{3.876837441639163*^9, 3.876837599392131*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"6858d687-d7dd-43ad-983d-cad11615f2de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.19023059809515885`"}], "+", 
  RowBox[{"0.39395601957158827`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{{3.876837478280961*^9, 3.87683752042284*^9}, {
   3.876837576874048*^9, 3.876837601737033*^9}, 3.876837833862009*^9, 
   3.8768412332653303`*^9, 3.8768413250465517`*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"01d5a0ae-e612-4a8d-83a1-954bf5ab1a9a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Mix* deprecated", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876837349035513*^9, 3.876837362544569*^9}, {
  3.876837616104279*^9, 3.8768376194374027`*^9}, {3.876837741833929*^9, 
  3.8768377438949137`*^9}},ExpressionUUID->"c540a8e0-ca2e-4d40-a0c4-\
9b76e68cde2d"],

Cell[TextData[{
 "All explicit mixing functions like ",
 StyleBox["MixDamping",
  FontWeight->"Bold"],
 " have been deprecated, since they are more concisely invoked with ",
 StyleBox["ApplyCircuit",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.8768377520146017`*^9, 
   3.876837777510214*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"85236c7b-674a-4264-957e-133aca764a55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MixTwoQubitDephasing"}]], "Input",
 CellChangeTimes->{{3.876837779702477*^9, 3.8768377844173193`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"2243fe87-d300-4ecc-8272-f5c537bd0563"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
ApplyCircuit with gate Deph.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"MixTwoQubitDephasing", "[", 
                    
                    RowBox[{
                    "QuEST`Private`qureg_Integer", ",", 
                    "QuEST`Private`qb1_Integer", ",", 
                    "QuEST`Private`qb2_Integer", ",", 
                    "QuEST`Private`prob_Real"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ApplyCircuit", "::", "error"}], "MessageName"], 
                    ",", "\"The function MixTwoQubitDephasing[] is \
deprecated, though has still been performed. In future, please use \
ApplyCircuit[] with the Deph[] gate instead, or temporarily hide this message \
using Quiet[].\""}], "]"}], ";", 
                    RowBox[{"ApplyCircuit", "[", 
                    RowBox[{"QuEST`Private`qureg", ",", 
                    RowBox[{
                    SubscriptBox["Deph", 
                    RowBox[{"QuEST`Private`qb1", ",", "QuEST`Private`qb2"}]], 
                    "[", "QuEST`Private`prob", "]"}]}], "]"}], ";", 
                    "QuEST`Private`qureg"}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Deprecated`MixTwoQubitDephasing\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
ApplyCircuit with gate Deph.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "This function is deprecated. Please instead use ApplyCircuit with gate \
Deph.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`Deprecated`MixTwoQubitDephasing, {
      QuEST`Deprecated`MixTwoQubitDephasing[
         Pattern[QuEST`Private`qureg, 
          Blank[Integer]], 
         Pattern[QuEST`Private`qb1, 
          Blank[Integer]], 
         Pattern[QuEST`Private`qb2, 
          Blank[Integer]], 
         Pattern[QuEST`Private`prob, 
          Blank[Real]]] :> (Message[
          MessageName[QuEST`ApplyCircuit, "error"], 
          "The function MixTwoQubitDephasing[] is deprecated, though has \
still been performed. In future, please use ApplyCircuit[] with the Deph[] \
gate instead, or temporarily hide this message using Quiet[]."]; 
        QuEST`ApplyCircuit[QuEST`Private`qureg, 
          Subscript[QuEST`Gate`Deph, QuEST`Private`qb1, QuEST`Private`qb2][
          QuEST`Private`prob]]; QuEST`Private`qureg)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`Deprecated`MixTwoQubitDephasing"|>, False]]], "Output",
 CellChangeTimes->{3.876837784987378*^9, 3.876841233355877*^9, 
  3.8768413251204844`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"07e989c6-9245-4478-91d5-5212d11b7b78"]
}, Open  ]],

Cell["\<\
These deprecated functions are still callable for backwards compatibility\
\>", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.8768376695335484`*^9, 
   3.876837680379217*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"6d6cd907-683f-4c57-8497-01beccda88c6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"MixTwoQubitDepolarising", "[", 
   RowBox[{"b", ",", " ", "0", ",", "1", ",", ".5"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"CalcPurity", "[", "b", "]"}]}], "Input",
 CellChangeTimes->{{3.876837804458349*^9, 3.876837850491375*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"c58c5b11-4fde-4a4e-a7df-dda31f76bfe4"],

Cell[BoxData[
 TemplateBox[{
  "ApplyCircuit", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"The function MixTwoQubitDepolarising[] is \
deprecated, though has still been performed. In future, please use \
ApplyCircuit[] with the Depol[] gate instead, or temporarily hide this \
message using Quiet[].\\\\\\\"\\\"}]\\)\"", 2, 63, 6, 32171162573673922766, 
   "Local", "QuEST`ApplyCircuit"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.876841325137332*^9},
 CellLabel->
  "During evaluation of \
In[63]:=",ExpressionUUID->"f1e37333-f67c-4d99-885f-9e6d72698457"],

Cell[BoxData["0.41333333333333316`"], "Output",
 CellChangeTimes->{{3.876837827605916*^9, 3.8768378519958563`*^9}, 
   3.8768412333681183`*^9, 3.876841325151046*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"350e8e71-9e39-4b00-9cd0-7a0d7c215d49"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PauliSum -> PauliString", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876837349035513*^9, 3.876837362544569*^9}, {
  3.876837616104279*^9, 
  3.8768376194374027`*^9}},ExpressionUUID->"49e7677e-d793-44f6-8bca-\
2fdc02b67d15"],

Cell[TextData[{
 "Any reference to ",
 StyleBox["PauliSum",
  FontWeight->"Bold"],
 " in the QuESTlink API has been renamed to ",
 StyleBox["PauliString",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"44293c53-dc30-422a-9bd8-2138dc69b615"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcExpecPauliSum"}]], "Input",
 CellChangeTimes->{{3.876837644958393*^9, 3.87683764889569*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"e37636ce-6d7c-4e55-a498-aa83fc1111c0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
CalcExpecPauliString.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "CalcExpecPauliSum", "[", "QuEST`Private`args___", "]"}], 
                    ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"CalcExpecPauliString", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"The function CalcExpecPauliSum[] is deprecated. Use \
CalcExpecPauliString[] or temporarily hide this message using Quiet[].\""}], 
                    "]"}], ";", 
                    
                    RowBox[{
                    "CalcExpecPauliString", "[", "QuEST`Private`args", 
                    "]"}]}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"QuEST`Deprecated`CalcExpecPauliSum\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
CalcExpecPauliString.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "This function is deprecated. Please instead use CalcExpecPauliString.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`Deprecated`CalcExpecPauliSum, {
      QuEST`Deprecated`CalcExpecPauliSum[
         Pattern[QuEST`Private`args, 
          BlankNullSequence[]]] :> (Message[
          MessageName[QuEST`CalcExpecPauliString, "error"], 
          "The function CalcExpecPauliSum[] is deprecated. Use \
CalcExpecPauliString[] or temporarily hide this message using Quiet[]."]; 
        QuEST`CalcExpecPauliString[QuEST`Private`args])}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "QuEST`Deprecated`CalcExpecPauliSum"|>, False]]], "Output",
 CellChangeTimes->{3.876837649166485*^9, 3.876841233499506*^9, 
  3.876841325249609*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"f079931e-221d-44e6-8804-5e4940a7d1ea"]
}, Open  ]],

Cell["\<\
These deprecated functions are still callable for backwards compatibility\
\>", "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.8768376695335484`*^9, 
   3.876837680379217*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"7d577674-b9df-4913-9245-f356308d49ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcExpecPauliSum", "[", 
  RowBox[{"a", ",", 
   RowBox[{"GetRandomPauliString", "[", "3", "]"}], ",", "b"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8768376837841883`*^9, 3.8768377299592447`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"1e73d4c3-5a81-4769-9ccd-96a75b5a682e"],

Cell[BoxData[
 TemplateBox[{
  "CalcExpecPauliString", "error", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"The function CalcExpecPauliSum[] is \
deprecated. Use CalcExpecPauliString[] or temporarily hide this message using \
Quiet[].\\\\\\\"\\\"}]\\)\"", 2, 66, 7, 32171162573673922766, "Local", 
   "QuEST`CalcExpecPauliString"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{{3.876837689727248*^9, 3.876837731227152*^9}, 
   3.876841233546507*^9, 3.87684132528183*^9},
 CellLabel->
  "During evaluation of \
In[66]:=",ExpressionUUID->"b71a078a-582d-4a61-af88-2f0123c4af67"],

Cell[BoxData[
 RowBox[{"-", "2.6138938649819243`"}]], "Output",
 CellChangeTimes->{{3.8768376897464437`*^9, 3.8768377312352123`*^9}, 
   3.876841233576652*^9, 3.8768413252902718`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"261ffb98-28c6-497b-83b2-81bdd4376d33"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcPauliExpressionMatrix", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876837349035513*^9, 3.876837362544569*^9}, {
  3.876837616104279*^9, 3.8768376194374027`*^9}, {3.8768378895106583`*^9, 
  3.876837918040539*^9}},ExpressionUUID->"a948c262-3d70-41b7-a53e-\
8d7fa9d152e2"],

Cell[TextData[{
 StyleBox["CalcPauliExpressionMatrix",
  FontWeight->"Bold"],
 " now returns a ",
 StyleBox["sparse",
  FontSlant->"Italic"],
 " matrix for more efficient handling of large operators, especially symbolic \
ones with few terms."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.8768376695335484`*^9, 
   3.876837680379217*^9}, {3.876837957283903*^9, 3.876838019534636*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"7f2c8591-e6b1-4977-ac75-03c5d228ba0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CalcPauliExpressionMatrix", " ", "@", " ", 
  RowBox[{"GetRandomPauliString", "[", 
   RowBox[{"10", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8768379942497463`*^9, 3.876838022671946*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"ac037597-dc89-429c-98f7-9d2c4b7c5a23"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {11., {0., 11.}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], FrameTicks -> None, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10240", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1024", ",", "1024"}], "}"}], "SummaryItem"]}]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[
             SparseArray[
              Automatic, {10, 10}, 0.93, {
               1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                 10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 0., 
                0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 0}, {10, 
              10}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> False, 
             FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], FrameTicks -> None, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10240", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"1024", ",", "1024"}], "}"}], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.009765625`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "87"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"0.`", "\[VeryThinSpace]"}], "-", 
                    RowBox[{"0.18742950071647835`", " ", "\[ImaginaryI]"}]}], 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, ImageSize -> {{1, 300}, Automatic}, 
                    StripOnInput -> True], LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "114"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
                    RowBox[{"0.5248670039373495`", " ", "\[ImaginaryI]"}]}], 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, ImageSize -> {{1, 300}, Automatic}, 
                    StripOnInput -> True], LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "232"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"-", "0.300217308588961`"}], "+", 
                    RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    ImageSize -> {{1, 300}, Automatic}, StripOnInput -> True],
                     LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "435"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{
                    RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
                    RowBox[{"0.9142206494688283`", " ", "\[ImaginaryI]"}]}], 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, ImageSize -> {{1, 300}, Automatic}, 
                    StripOnInput -> True], LineBreakWithin -> False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, DefaultBaseStyle -> "Column", 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[Automatic, {1024, 1024}, 0., {1, {CompressedData["
1:eJwl13EoOOgZwHFnZu632+12Z2bmzJk5SZIkSZIkSZIkSZIkSSZJkiRJkiRJ
kiRJkiRJkiRJkiRJvyRJkiRJkiTts91bn7/fP769Pc/7S81/Spq+CQgI+CYo
4P/nC6FEEU8KmeRRTAW1NNFOD4OMMc0Cq2yxzwkX3PLEO0Eu/J5wYkgkjWwK
KKWKelropI9hJphliXV2OOSMK+554ZOQwICAH4kkjmQyyKWIcmpopI1uBhhl
inlW2GSPY8654ZE3An8XEPAdYUSTQCpZ5FNCJXU000EvQ4wzwyJrbHPAKZfc
8cwHwfr8QASxJJFODoWUUU0DrXTRzwiTzLHMBrsc8ZVrHnj9X//f608oUcST
QiZ5FFNBLU2008MgY0yzwCpb7HPCBbc88U5QsP6EE0MiaWRTQClV1NNCJ30M
M8EsS6yzwyFnXHHPC5+E/EF/IokjmQxyKaKcGhppo5sBRplinhU22eOYc254
5I3AEP0JI5oEUskinxIqqaOZDnoZYpwZFlljmwNOueSOZz4I/lZ/IogliXRy
KKSMahpopYt+RphkjmU22OWIr1zzwOu3vz3+L4QSRTwpZJJHMRXU0kQ7PQwy
xjQLrLLFPidccMsT7wT9UX/CiSGRNLIpoJQq6mmhkz6GmWCWJdbZ4ZAzrrjn
hU9CvtOfSOJIJoNciiinhkba6GaAUaaYZ4VN9jjmnBseeSPwT/oTRjQJpJJF
PiVUUkczHfQyxDgzLLLGNgeccskdz3wQ/L3+RBBLEunkUEgZ1TTQShf9jDDJ
HMtssMsRX7nmgVcC/qw/oUQRTwqZ5FFMBbU00U4Pg4wxzQKrbLHPCRfc8sQ7
QT/oTzgxJJJGNgWUUkU9LXTSxzATzLLEOjsccsYV97zwSchf9CeSOJLJIJci
yqmhkTa6GWCUKeZZYZM9jjnnhkfeCPxRf8KIJoFUssinhErqaKaDXoYYZ4ZF
1tjmgFMuueOZD4J/0p8IYkkinRwKKaOaBlrpop8RJpljmQ12OeIr1zzw+tNv
g/8LoUQRTwqZ5FFMBbU00U4Pg4wxzQKrbLHPCRfc8sQ7QX/Vn3BiSCSNbAoo
pYp6Wuikj2EmmGWJdXY45Iwr7nnhk5Aw/YkkjmQyyKWIcmpopI1uBhhlinlW
2GSPY8654ZE3Av+mP2FEk0AqWeRTQiV1NNNBL0OMM8Mia2xzwCmX3PHMB8Hh
+hNBLEmkk0MhZVTTQCtd9DPCJHMss8EuR3zlmgdeCfi7/oQSRTwpZJJHMRXU
0kQ7PQwyxjQLrLLFPidccMsT7wRF6E84MSSSRjYFlFJFPS100scwE8yyxDo7
HHLGFfe88EnIP/QnkjiSySCXIsqpoZE2uhlglCnmWWGTPY4554ZH3giM1J8w
okkglSzyKaGSOprpoJchxplhkTW2OeCUS+545oPgn/UngliSSCeHQsqopoFW
uuhnhEnmWGaDXY74yjUPvP7829L/hVCiiCeFTPIopoJamminh0HGmGaBVbbY
54QLbnninaB/6k84MSSSRjYFlFJFPS100scwE8yyxDo7HHLGFfe88ElItP5E
EkcyGeRSRDk1NNJGNwOMMsU8K2yyxzHn3PDIG4G/6E8Y0SSQShb5lFBJHc10
0MsQ48ywyBrbHHDKJXc880FwjP5EEEsS6eRQSBnVNNBKF/2MMMkcy2ywyxFf
ueaBVwL+pT+hRBFPCpnkUUwFtTTRTg+DjDHNAqtssc8JF9zyxDtBsfoTTgyJ
pJFNAaVUUU8LnfQxzASzLLHODoecccU9L3wS8m/9iSSOZDLIpYhyamikjW4G
GGWKeVbYZI9jzrnhkTcC4/QnjGgSSCWLfEqopI5mOuhliHFmWGSNbQ445ZI7
nvkg+Ff9iSCWJNLJoZAyqmmglS76GWGSOZbZYJcjvnLNA6+//vbh/y9Cy0vv

     "], CompressedData["
1:eJwt3GX4XtWxBfCT7va2uLsmwb1ePEANd/fgGurFA1XcXUNwrxcPUMPdNbhD
vfidH3vd585D4Zwv884+a81aM/s/cuy4Dfb+1FD/t8gwjKh/bFrx3YpXKn5T
/+HWitsq/lXx+3rxgYpd2jBsVs+/U/FyxW/r2Z8qbq/4Z8Xv6p0HK3at9zau
59+veKniV/Xs5oo7Kv5R8cd6576Kneq9Ter59yperPh1Pbul4s6Kv1f8od65
v2Lnem/Dev7Dihcq/lDP/lpxV8X/Kn5d7zxSsUO9t1E9/0HF8xV/rGd/q7i7
4r8Vv6p3Hq3Ysd5bv57/uOK5it/Vsz9X3FPxn4rf1jsPVWxf721Qz39UMbni
9/XsLxX3Vvy74jf1zsMVY+u9bev5fhXvVFyXXOX8QcWN9c4TFePqve3q+b4V
b1dcn1zl/H7FDfXOkxX71Htb1/MDKt6quCa1UJP3KibVO49V7FXvbVPP9694
s+La1EJN3q24qd55vGLvem/Len5QxRsVNyVXOQ/1/NqKZyr2qPe2qv90YMXr
FZOSq5w/rrim3nm2Ys96b/N6Pr7itYobUgs1+aji+nrnqYrd6r0t6vnBFa9W
3JhaqMmHFdfVO09X7F7vfauej634X8XEevZAxWMVL1RcWO/cWvGjeu/b9Xz7
iv9WnF/PHqx4vOL5igvqnT9V/Lje+0Y937HiPxUT6tl9FU9UPFdxcb1zc8UP
6r1v1vMdKv5dcV49u7/iyYrJFRfVO7dU/LDeW62e71zxr4qL6tkjFU9VvFJx
Xr3z14rv1Xtfr+c7Vfyz4uJ69mjF0xUvV0yod/5W8f16b5V6vmvFPyouqGcP
VTxT8VLF+fXOnyu+U++tWs93qfh7xYX17OGKZyterJhY7/yl4rv13rr1fHff
c/33y5KrnN+ouLLeuaPi4HpvvXplt4qPKy5PrnJ+veKKeufOivH13tr1fM+K
jyouSS3U5LWKq+ud2yoOrPfWqed7VHxYcWlqoSavVlxV79xecVC9t2Y937vi
g4qrkquc36m4tN65p2L/em+ter5XxfsVVydXOb9dcUm9c2/FAfXe6vV8n4r3
Kq5ILdTkrYrL6527Kvat99ao5+Mq3q24MrVQkzf9TvXO3RX7tf6N+9b/VnFC
ztOryeXkeuefFd9qHTNgx18rTsz5fC2/zUn1zr8qvt06BsGiv1Qcl/P0en7r
U+udv1d8o3VMg21/rjg+5/ON1O6UeucfFd9sHSNh5Z8qTsl5ejO5HF/v/Ldi
tdYxF/beWnFqzudb+W2Oq3f+V/H11jEclt9ScVLO09v5rU+sd/5dsUrrnIAb
bq44OefzndTuhHrnPxWrtv6N+9bvrTgjuU7O+Tq73nm/Yt3WMQN23FNxZnJ9
Luf1rHrng4r1WscgWHR3xWmpxfM5X+fWO+9WrN06psG2uypOTy1eyHk9p955
r2Kd1jESVt5ZcU5yfTHn6/R65+OKNVvHXNh7R8W5yfWlnNfTEKYz2jqGw/Lb
K85KLV7O+Tqz3vuwYvXWOQE33FZxdmrxSs7rGfXORxVrtP6N+9YfrfjJiM6n
MByW/7zeeb5i09YxA3Y8UvHTEZ2fcQJu+Fm980LFZq1jECx6uOKQEZ1PcQyu
+WW9M7li49YxDbY9VHHoiM7POAt3/aLeea5ik9YxElY+WPGLEZ1PYTgsP7Te
ebliw9YxF/Y+UPHLEZ2fcQJuOKTeeaVio9YxHJbfX/GzEZ1PcQyu+Wm982LF
+q1zAm64r+LnIzo/4yzc9ZP650sVG7T+jfvWn604IrnKGb8eXe+8XrFt65gB
O56pODK5yhlfH1XvvFGxXesYBIuerjgstVAT/HpsvfNqxdatYxpse6ri8NRC
TfD1MfXOaxXbtI6RsPLJimOSq5zx6+H1ztsVW7aOubD3iYpjk6uc8fVh9b/f
qdiqdQyH5Y9XHJVaqAl+PbLeebNi89Y5ATc8VnF0aqEm+PqIeuetii3qvdnq
+RcqLh56ns6gvPV4vnHf+sL13uz1/PMVFw09T2dQ3npGmAE7Fqn3ZqnnX6q4
cOh1cAbVRY8Hg2DRgvXerPX8ixUXDL0OzqC66BlhGmxbqN6bqZ5/peL8oefp
DMpbjwcjYeXoem/mev7liolDz9MZlLeeEebC3gXqvRnq+dcqzht6HZxBddHj
wXBYPrLem7Gef7ViwtDr4Ayqi54RJ+CGUfXefPV8uYqrh372jkjOejzfuG99
6Xpv/nq+bMVVQz97RyZnPSPMgB3L1Hvz1PMVKq4c+tk7LDXR48EgWLRk/XPe
+tflK64Y+tk7PDXRM8I02LZUvTdXPV+p4vKhn71jkrMeD0bCysXrvbnr+YoV
lw397B2bnPWMMBf2LlHvzVGPx1RcOvSzd1RqoseD4bB80Xpvznq+csUlQz97
R6cmekacgBsWq/c+W89HVfxx6DiPg+G+Hs837lv/ar33uXo+suIPQ8d5HAz3
9YwwA3Z8rd77TD1foOL3Q+chHIyX9HgwCBZ9ud77v3o+uuJ3Q+chHIyX9Iww
DbZ9pX3ykw8LVfx26DiPg+G+Hg9Gwsov1kufrucLVvxm6DiPg+G+nhHmwt4v
ta65SnoNvx46D+FgvKTHg+Gw/PPtkxIMC1f8aug8hIPxkp4RJ+CGL9R709Xz
xSomDZ17z0jOejzfuG995Xpv+nq+aMVNQ+feM5OznhFmwI4x9d409XyJihuH
zr2npSZ6PBgEi1as96at54tX3DB07j09NdEzwjTYtlK9N1U9X6ri+qFz7znJ
WY8HI2Hl8vXe1PV8yYrrhs695yZnPSPMhb0r1HtT1PNlKq4dOveelZro8WA4
LF+23puyni9dcc3Quffs1ETPiBNww3Ktf+O+9V8OvZebmBzkQuPRep9tHTNg
xy+G3huen9/Eb0Mz0o6fax2DYNHPh97LTchv7LemQWnRz7SOabDtZ0PvDc9L
zdSOpqVt/691jISVPx16L3dRcpALjUwrt9YxF/b+ZOi94cX5Tfw2NDft/enW
MRyWHzr0Xu6C/MZ+axqelh/ROifghkOG3htemJqpHU+AN/Cp1r9x3/qxQ+/l
LkvOzheNR+tN1zpmwI5jht4bXp6cnVeakXacvnUMgkVHD72XuyQ1cb5oUFp0
mtYxDbYdNfTe8NLUxHmlaWnbaVvHSFh55NB7uauSs/NFI9PKU7WOubD3iKH3
hlcnZ+eV5qa9p24dw2H54UPv5a5ITZwvGp6Wn6J1TsANhw29N7wyNXFeeQK8
gSlb/8Z966cOvZfDpzAcltN4tN5srWMG7Dhl6L0hfsYJuIFmpB1nbx2DYNHJ
Q+/l8CmOwTU0KC06S+uYBttOGnpviJ9xFu6iaWnbWVvHSFh54tB7OXwKw2E5
jUwrz9Q65sLeE4beG+JnnIAbaG7ae+bWMRyWHz/0Xg6f4hhcQ8PT8jO0zgm4
4bih94b4GWfhLp4Ab2DG1r9x3/q5Q+/lrkvO+JXGo/Xmax0zYMc5Q+8Nr0/O
+JpmpB3nbx2DYNHZQ+/lrklN8CsNSovO0zqmwbazht4bXpua4Gualradt3WM
hJVnDr2Xuyk541camVaeq3XMhb1nDL03nJSc8TXNTXvP3TqGw/LTh97L3ZCa
4Fcanpafo3VOwA2nDb03vDE1wdc8Ad7AnK3rCV4EffHFerZaxeoV36/4Sr2z
YcXLresTXgS98qV69vWKNSq+V/Hlemejilda1xO8Evri8/VslYo1K75b8bV6
Z/2KF1vXJ7wSeuUL9WzVirUqvlPx1Xpng4qXWtcTvBz64qv17FsVa1f8uOIL
9c6mFc+3rk94OfTK1+rZtyvWqfhRxefrnc0qXmhdT/CaxlZ8uZ59o2Ldih9W
fKne2bhicuv6hNe0fcVX6tk3K9ar+EHFF+udTSqea11P8CLoi+WTq5wPqFip
3tmy4u3W9Qkvgl5ZIbnKef+KFeudrSreaV1P8Eroi2VTCzXZr2JMvbN5xZut
6xNeCb2yXGqhJvtWrFzvbFHxVut6gpdDX6ycXOU8vmK5emfbitdb1ye8HHpl
THKV88EVy9Y721W80bqeAET0xYqphZocVLFCvbN1xaut6xNeE72yUmqhJgdW
LF/vbFPxWut+ynND91dG17MNKzav2LFioXpntYr/tu7PTB66X7NAPduoYouK
HSoWrHe+XvG/1v0UXjF/ZWQ9W79iy4qxFYvUO6tU/Lt1f+b5ofs1o+rZBhVb
VWxfsXC9s2rFf1r3U3jZ/JWF69mmFVtX7Foxqt75VsU/W/dneNn8mkXq2WYV
21TsUjGy3vl2xb9a91N47fyVBevZxhXbVuxcsUC9842Kv7fuz/Da+TUL1bNN
Krar2KlidL3zzYp/tO6n8GLHVyyeXOW8Z8VS9c6aFR+37s/wYvk1SyRXOe9R
sWS9s9anOnHwU3jF/JVFUws12b1imXpn9YoPW/dneMX8msVSCzXZrWLpemeN
io9a91N42fyVpZOrnPepWKzeWbfi/db9GV42v2aZ5CrncRWL1jvrVXzQup/C
a+evLJlaqMneFUvUO2tXvNu6P8Nr59cslVqoyV4Vi9c761S81/o37lvnScyU
87Rbcpm13vlexV9bxwzYwZOYOedz9/w2s9Q736/4W+sYBIt4JjPkPO2R33r2
euc7FX9uHdNgG89kxpzPPVO72eqd71b8pXWMhJU8ndlynvZKLjPWOz+quLV1
zIW9PJ3Zcz73zm8zQ73z44o/tY7hsHzVillynsblt5653vlBxc2tcwJuWKVi
1pzPfVK7meqdH1bc0vo37lvnScyVXLfP+Zq33tm/4p7WMQN28CTmTq5jc17n
qXcOqLi3dQyCRTyTOVKLHXK+5q939q24q3VMg208kzlTix1zXuerd/aruLt1
jISVPJ35kutOOV9z1jsHV9zROubCXp7O/Ml155zXOeqd8RV3to7hsJznNE9q
sUvO19z1zoEVt7XOCbiB5zRvarFrzutc9c5BFbe3/o371nmybUTnUxgOy/+v
3tmh4pHWMQN28GQ/PaLzM07ADZ+pd3aseLR1DIJFPOMRIzqf4hhc87l6Z/uK
h1rHNNjGM/7UiM7POAt3fbbeGVvxcOsYCSt52p8d0fkUhsPyT9U7u1Q80Drm
wl6e9udGdH7GCbhhRL2za8WDrWM4LOe5f2ZE51Mcg2s+Xe/sVHFf65yAG3ju
/zei8zPOwl2t3tm54v7Wv3Hf+nYVUyVXOePXaeudPSqeaR0zYAdPdurkKmd8
PU29s2fFs61jECziGU+RWqgJfp2+3tmt4qnWMQ228YynTC3UBF9PV+/sXvF0
6xgJK3na0yVXOePXKeudcRVPtI65sJenPX1ylTO+nqLe2afiydYxHJbz3KdJ
LdQEv05d7+xV8VjrnIAbeO7TphZqgq+nqncMgR9vXU/wIugLeTqD8tbj+cZ9
6xe1rk94EfSKPJ1BeesZYQbsuLh1PcEroS/UwRlUFz0eDIJFF7SuT3gl9Io6
OIPqomeEabDtwtb1BC+HvpCnMyhvPR6MhJUTW9cnvBx6RZ7OoLz1jDAX9p7f
up7gNY0aeh2cQXXR48FwWD6hdX3Caxo59Do4g+qiZ8QJuOG81vUEL4K+2D+5
ylmP5xv3rV/Vuj7hRdArByRXOesZYQbsuLp1PcEroS/2TS3URI8Hg2DRFa3r
E14JvbJfaqEmekaYBtuubF1P8HLoi4OTq5z1eDASVl7Wuj7h5dAr45OrnPWM
MBf2Xt66npg0dH1xYGqhJno8GA7LL2ldn/Ca6JWDUgs10TPiBNxwaet+ynlD
91fgPA6G+3o837hv/Q+t+zMThu7XwHkcDPf1jDADdvyxdT+FV8xfwUM4GC/p
8WAQLPpd6/7MxKH7NXgIB+MlPSNMg22/b91P4WXzV+A8Dob7ejwYCSt/07o/
w8vm18B5HAz39YwwF/b+tnU/hdfOX8FDOBgv6fFgOCz/Vev+DK+dX4OHcDBe
0jPiBNzw69b9FF7smKFz71zJWY/nG/et39S6P8OL5dfsmVzlrGeEGbBjUut+
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
+Bkn4Aaam/Y2I4ThsNw+rF4On+IYXEPD0/JmhDgBN9iH1Rvi50lD5y6eAG/A
jNA37lu3z3lHcpUzfqXxaD0zLpgBO+xz3plc5YyvaUba0YwLBsEi+5y3pRZq
gl9pUFrUjAumwTb7nLenFmqCr2la2taMC0bCSvuw9yRXOeNXGplWNiOEubDX
Puy9yVXO+Jrmpr3NCGE4LLcPe1dqoSb4lYan5c0IcQJusA97d2qhJviaJ8Ab
MCOkJ3gR9IXZ1WpD31mw72T/3d0e+/D0CS+CXjELs49iB8K+k316d3vs19MT
vBL6wuxqlaHvVNh3sp/vbo99ffqEV0KvmIWtOvQdDftO9v3d7bH/T0/wcugL
sz/7N3Y+7IvZf3c3yj48fcLLoVfMEu3z2CGxL2af3t0o+/X0BK+JvjD7s39j
J8W+mP18d6Ps69MnvCZ6xSzRPo8dF/ti9v3djbL/T0/wIuiL5ZOrnO072X93
t8c+PH3Ci6BXVkiucrbvZJ/e3R779fQEr4S+WDa1UBP7Tvbz3e2xr0+f8Ero
leVSCzWx72Tf390e+//0BC+Hvlg5ucp5/ND3392Nsg9Pn/By6JUxyVXO9sXs
07sbZb+enhiiL1ZMLdTEvpj9fHej7OvTJ7wmemWl1EJN7IvZ93c3yv4/P4UX
y18ZPfT9ETsL9j3d/3G30X0g/gwvll9jF8A+ih2IHYZ+n8jdRveL+Cm8Yv7K
yKHvj9ipGDv0+0nuNrqvxJ/hFfNrRg19H8WOxvZDv+/kbqP7T/wUXjZ/xe6D
/Rs7H/Zl3f9xN9R9IP4ML5tfY5fCPo8dEvuy7hO5G+p+ET+F185fsftg/8ZO
in1Z95PcDXVfiT/Da+fX2KWwz7Pd0Pdl3XdyN9T9J34KL5a/snhylbN9T/d/
3G10H4g/w4vl1yyRXOVs39N9IncbDQ/5Kbxi/sqiqYWa2Pd0P8ndRveV+DO8
Yn7NYqmFmtj3dN/J3Ub3n/gpvGz+ytLJVc72Zd3/cTfUfSD+DC+bX7NMcpWz
fVn3idwNdb+In8Jr568smVqoiX1Z95PcDXVfiT/Da+fXLJVaqIl9Wfed3A11
/8k37lvnScyU87RbcrH/7m63fXiYATt4EjPnfO6e38Y+vbvd9uthECzimcyQ
87RHfmv7+e5229eHabCNZzJjzueeqZ19f3e77f/DSFjJ05kt52mv5GL/3d14
+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
5bmaifD87BbYS+IFXp9c5WwWysM1E+Eh2i2w58S7uya1UBOz2klDn4nw/OwW
2JviBV6bWqiJWS2P2UyEh2i3wB4W7+6m5CpnAMOzNhPh+dktsNfFC5yUXOVs
lswDf3boHqLdAntivLsbUgs1MevmqZuJ8PzsFtg74wXemFqoiVk3j95MhIdo
t8oeJe/OrMNsybzFLNT85dahe352q+xl8gLNOsyqzG/MQs1zzER4iHar7Hny
7sw6zL7MW8xqzV9uHrrnZ7fK3igv0KzDLM38xqzWPOeWoXuIdqvsofLuzDrM
5syrzJLPG/pMhOdnt8peKy/QrMOsz/zLLHnC0GciPES7VfZkeXdmHWaH5lVm
3eZXZiI8P7tV9m55gWYdZpHmX2bdE4c+E+Eh2q2yR4kILkuucjYLNXMyE+H5
2a2yl8kLvDy5ytks1AzLTISHaLfKnifv7pLUQk3Mas3EzER4fnar7I3yAi9N
LdTErNaMzUyEh2i3yh4q7+6q5Cpns2QzOzMRnp/dKnutvMCrk6uczZLNAM1E
eIh2q+zJ8u6uSC3UxKzbTNFMhOdnt8reLS/wytRCTcy6zSjNRHiIvnHfOu/u
hJynV5OLmaidGJ4fzIAdvMATcz5fy29jJmonhocIg2AR7+64nKfX81ub2dqJ
4fnBNNjGCzw+5/ON1M7M1k4MDxFGwkre3Sk5T28mFzNlOzE8P5gLe3mBp+Z8
vpXfxkzZTgwPEYbDct7dSTlPb+e3NvO2E8Pz+264gRd4cs7nO6mdmbedGB6i
b9y3zrs7I7lOzvkyE7UTw/ODGbCDF3hmcn0u59VM1E4MDxEGwSLe3WmpxfM5
X+cOfSeG5wfTYBsv8PTU4oWcVzNbOzE8RBgJK3l35yTXF3O+zJTtxPD8YC7s
5QWem1xfynk1U9YY8RBhOCzn3Z2VWryc82XmbSeG54cTcAMv8OzU4pWcVzNv
OzE8RN+4b513Z9cFn8JwWG4m+vzQPT+YATt4gXZd8DNOwA1monZieIgwCBbx
7uy64FMcg2vMbCcP3fODabCNF2jXBT/jLNxlZvvc0D1EGAkreXd2XfApDIfl
hw59J4bnB3NhLy/Qrgt+xgm44ZCh78TwEGE4LOfd2XXBpzgG15h524nh+eEE
3MALtOuCn3EW7vrJ0HdieIi+cd867+6I5Cpn/GomaieG5wczYAcv8MjkKmd8
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
5Wxf1n0id0PdL+Kn8Nr5K0umFmpiX9b9JHdD3Vfiz/Da+TVLpRZqYl/WfSd3
Q91/8o371nkSM+U87ZZc7L+7220fHmbADp7EzDmfu+e3sU/vbrf9ehgEi3gm
M+Q87ZHf2n6+u9329WEabOOZzJjzuWdqZ9/f3W77/zASVvJ0Zst52iu52H93
N/7WoWMu7OXpzJ7zuXd+G/v07sbbr4fhsJznNEvO07j81vbz3Y2/eeicgBt4
TrPmfO6T2tn3dzf+lqF/4751nsRcyXX7nC/77+5224eHGbCDJzF3ch2b82qf
3t1u+/UwCBbxTOZILXbI+bKf7263fX2YBtt4JnOmFjvmvNr3d7fb/j+MhJU8
nfmS6045X/bf3Y23Dw9zYS9PZ/7kunPOq316d+Pt18NwWM5zmie12CXny36+
u/H29XECbuA5zZta7Jrzat/f3Xj7/75x3zpP1uwen8JwWO7+j79t4T4QzIAd
PFm7APgZJ+AG94n8bQv3i2AQLOIZm93jUxyDa9xP8rct3FeCabCNZ2wXAD/j
LNzlvpO/beH+E4yElTxtuw/4FIbDcvd//G0Q94FgLuzladulwM84ATe4T+Rv
g7hfBMNhOc/d7gM+xTG4xv0kfxvEfSWcgBt47nYp8DPOwl3uO/nbIO4/+cZ9
6zzZqZKrnPGr+z/+toX7QDADdvBkp06ucsbX7hP52xbPDh2DYBHPeIrUQk3w
q/tJ/raF+0owDbbxjKdMLdQEX7vv5G9buP8EI2ElT3u65Cpn/Or+j78N4j4Q
zIW9PO3pk6uc8bX7RP42iPtFMByW89ynSS3UBL+6n+Rvg7ivhBNwA8992tRC
TfC1+07+Noj7T/QEL4K+kKczKG89nm/ct+6OD33Ci6BX5OkMylvPCDNghzs+
9ASvhL5QB2dQXfR4MAgWueNDn/BK6BV1cAbVRc8I02CbOz70BC+HvpCnMyhv
PR6MhJUTh65PeDn0ijydQXnrGWEu7HVHip7gNdEX6uAMqoseD4bD8glD1ye8
JnpFHZxBddEz4gTccN7Q9QQvgr7YP7nKWY/nG/etu+NDn/Ai6JUDkquc9Yww
A3a440NP8Eroi31TCzXR48EgWOSOD33CK6FX9kst1ETPCNNgmzs+9AQvh744
OLnKWY8HI2GlO1L0CS+HXhmfXOWsZ4S5sNcdKXqC10RfHJhaqIkeD4bDcnek
6BNeE71yUGqhJnpGnIAb3JHip/Bi+StwHgfDfT2eb9y37o4jf4YXy6+B8zgY
7usZYQbscMeRn8Ir5q/gIRyMl/R4MAgWuePIn+EV82vwEA7GS3pGmAbb3HHk
p/Cy+StwHgfDfT0ejISV7ojyZ3jZ/Bo4j4Phvp4R5sJed0T5Kbx2/goewsF4
SY8Hw2G5O6L8GV47vwYP4WC8pGfECbjBHVF+Ci+Wv7JHcpWzHs837lt3x5E/
w4vl1+yZXOWsZ4QZsGPS0P0UXjF/ZbfUQk30eDAIFrnjyJ/hFfNrdk8t1ETP
CNNgmzuO/BReNn9lXHKVsx4PRsJKd0T5M7xsfs0+yVXOekaYC3vdEeWn8Nr5
K3ulFmqix4PhsNwdUf4Mr51fs3dqoSZ6RpyAG9wR9Y371nkSG+Y8LZpcaDxa
zx1vmAE7eBIb5Xwult+GZqQd3fGGQbCIZ7J+ztPi+a1pUFrUHW+YBtt4Jhvk
fC6R2tG0tK073jASVvJ0Ns15WjK50Mi08k+Gjrmwl6ezWc7nUvltaG7a2x15
GA7LeU4b5zwtnd+ahqflDxk6J+AGntMmOZ/LpHY8Ad7AoUP/xn3rPIktk+vI
nC8aj9ZzxxtmwA6exFbJdVTOK81IO7rjDYNgEc9k89RidM4XDUqLuuMN02Ab
z2SL1GKBnFealrZ1xxtGwkqezrbJdcGcLxqZVnZHHubCXp7Odsl1oZxXmpv2
dkcehsNyntPWqcXCOV80PC3vjjxOwA08p21Si0VyXnkCvAF35H3jvnWerF4O
n8JwWE7j0Xr+xgXMgB08Wb0hfsYJuIFmpB39jQsYBIt4xno5fIpjcA0NSov6
GxcwDbbxjPWG+Bln4S6alrb1Ny5gJKzkaevl8CkMh+U0Mq3sb4TAXNjL09Yb
4mecgBtobtrb3wiB4bCc566Xw6c4BtfQ8LS8vxGCE3ADz11viJ9xFu7iCfAG
/I0Q37hvnSe7ZnKVM36l8Wg9f+MCZsAOnuxayVXO+JpmpB3PHToGwSKe8eqp
hZrgVxqUFvU3LmAabOMZr5FaqAm+pmlpW3/jAkbCSp72uslVzviVRqaV/Y0Q
mAt7edrrJVc542uam/b2N0JgOCznua+dWqgJfqXhaXl/IwQn4Aae+zqphZrg
a54Ab8DfCPl/CrMrMg==
     "]}, CompressedData["
1:eJzlmjHLpWcVRT+CYmcn2GoVbbQIVkIQy1iIhT9AMRowRDIWFjYWksZfoCB2
mkYEsbII2ES0tIrVYJogWggWWgimCBH05XLHOc9mrX1SSIqXmZvtYT37nL0/
9pVXvvTiw7MPD48+8PDw8IWXHn37xWfe/ZdHH3r3fz7/ysvf+ubXvvPqw3v/
vPrFZ/72o1/86803bnzy7Mc/8vavfv/4+f/95BsvfP9nv/nMH954/9sbf8o7
333r9Rc+99eLP+X9Tz79+FP//OGv/3TxWz769Q/+8rXX3rrrL3r88lf//vZP
/nL1F/34kz/46Zuv3/pT3vndh3/72S//+fkbn/zjE889+vn3/njrk/9W99Z/
9Ki6t/5vDKl7S5f71b3rt6jUvWte3lP36i+6e3ZvffJ/zK6DDDPq3jG7d6iL
nN071L34BMjdJ1E3Nrt3kOG0ujPcRZLhqdQlcbePDCTuxhzZXX9R2pE91eyS
yPAk6sa2iaeaXdKrFlP3ScjwVJ5hJRlm1M373djsxhzZae7GPMMwGU6rm/e7
DnVJ3O0jA4m7w7N7octmvzs8uzPq1vjd4W0CoK6Vuw4yWLkbm90av4t81Wr8
LpIMNX63jwwk7sYc2co+Q4wMK/sMsVdtZZ+hjwzFuVpMXUefIeYZVvYZkGSo
6TP0kYHE3b7ZtXLXMbtW7jrUtXLXQQYrdx27Gom7yFcNcMWR5WqyTViWq8mu
OLI7gyz5kd0ZZKml7M4gS35kdwZZaim7MwyrO+PITnMXmbjHtonT3EWSIebI
TnO3jwwk7g7P7sUnm/3u8OzOqFvjd4e3CYC6Vu46yGDlbmx2a/wu8lWr8btI
MtT43T4ykLgbc2Qr+wwxMqzsM8RetZV9hj4yFOdqMXUdfYaYZ1jZZ0CSoabP
0EcGEndj13OZusgb2Yy6ADIgPQNAXZJn6CMDyTMgZxewTSBvZDEyOHY1JBkA
VxxkNgEgA4m7MUcmu54jb2Qz6gKSH2QmDFCXlAn3kYGUCSNnF9AWQd7IYmQ4
rW7e7zrUJXG3jwwk7sYS95V+N5arrfS7sVxtpd+N5Wor/S5ydmv8LvJVq/G7
SDLU+N0+MpC4G3NkK/sMMTKs7DPEXrWVfYY+MhTnajF1HX2GmGdY2WdAkqGm
z9BHBhJ3+2bXyl3H7Fq561DXyl0HGazcdexqJO4iXzXAFUeWq8k2YVmuJrvi
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
    "]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.876838014538197*^9, 3.876838023073537*^9}, 
   3.876841233705792*^9, 3.876841325368762*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"b657cc05-8842-41b2-9f83-cdbe7ab161ed"]
}, Open  ]],

Cell[TextData[{
 StyleBox["CalcPauliStringMatrix",
  FontWeight->"Bold"],
 " remains useful for (significantly) faster parallel handling of numerical \
real-coefficient operators."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.8768376695335484`*^9, 
   3.876837680379217*^9}, {3.876837957283903*^9, 3.876838085402686*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"2611baa9-52e9-4329-8824-e3d3bc0ce4b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["AssertValidChannels", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}},ExpressionUUID->"8c2ab6ce-e26c-4dd3-af93-\
b4443cd5fe08"],

Cell[TextData[{
 "By default, functions like ",
 StyleBox["CalcCircuitMatrix",
  FontWeight->"Bold"],
 " will now assert that the given decoherence channels are \
completely-positive and trace-preserving, and infer assumptions about their \
parameters which are then used to simplify subsequent expressions. This \
behaviour can be disabled with ",
 StyleBox["AssertValidChannels -> False",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"527da8cc-5697-4a4d-b22b-c70788d840bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AssertValidChannels"}]], "Input",
 CellChangeTimes->{{3.876823525937052*^9, 3.876823529167124*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"2559a893-bb2d-4714-8096-d32022b67785"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Optional argument to CalcCircuitMatrix and \
GetCircuitSuperoperator (default True), specifying whether to simplify their \
outputs by asserting that all channels therein are completely-positive and \
trace-preserving. For example, this asserts that the argument to a damping \
channel lies between 0 and 1.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"QuEST`Option`AssertValidChannels\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Optional argument to CalcCircuitMatrix and \
GetCircuitSuperoperator (default True), specifying whether to simplify their \
outputs by asserting that all channels therein are completely-positive and \
trace-preserving. For example, this asserts that the argument to a damping \
channel lies between 0 and 1.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "Optional argument to CalcCircuitMatrix and GetCircuitSuperoperator \
(default True), specifying whether to simplify their outputs by asserting \
that all channels therein are completely-positive and trace-preserving. For \
example, this asserts that the argument to a damping channel lies between 0 \
and 1.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "QuEST`Option`AssertValidChannels"|>, 
   False]]], "Output",
 CellChangeTimes->{3.876823529455084*^9, 3.876823797287418*^9, 
  3.876824095804796*^9, 3.876826921740518*^9, 3.876827322881893*^9, 
  3.876828123529593*^9, 3.876832918730063*^9, 3.876841233808079*^9, 
  3.876841325458652*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"7851d91c-63a1-4fb2-9a71-d97e7f46de87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CalcCircuitMatrix", "[", 
   RowBox[{
    SubscriptBox["Depol", "0"], "[", "x", "]"}], "]"}], " ", "//", " ", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.876823553265471*^9, 3.876823564093449*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"b1cb7fbf-cc5b-4c56-8764-164fdd780559"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"2", " ", "x"}], "3"]}], "0", "0", 
      FractionBox[
       RowBox[{"2", " ", "x"}], "3"]},
     {"0", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"4", " ", "x"}], "3"]}], "0", "0"},
     {"0", "0", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"4", " ", "x"}], "3"]}], "0"},
     {
      FractionBox[
       RowBox[{"2", " ", "x"}], "3"], "0", "0", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"2", " ", "x"}], "3"]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.876823557552392*^9, 3.8768235642984543`*^9}, 
   3.8768237973195047`*^9, 3.876824095846773*^9, 3.876826921750922*^9, 
   3.876827322915681*^9, 3.876828123559574*^9, 3.8768329187403917`*^9, 
   3.876841233848192*^9, 3.876841325549592*^9},
 CellLabel->
  "Out[69]//MatrixForm=",ExpressionUUID->"490d67ef-707f-442c-a3c4-\
32d9ded12b39"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CalcCircuitMatrix", "[", 
   RowBox[{
    RowBox[{
     SubscriptBox["Depol", "0"], "[", "x", "]"}], ",", " ", 
    RowBox[{"AssertValidChannels", "->", "False"}]}], "]"}], " ", "//", " ", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.876823567362422*^9, 3.876823576134334*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"9c9faf5e-175b-4cc9-b57f-dff60f6583c0"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "-", "x"}]], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox[
          RowBox[{"1", "-", "x"}]], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "3"], " ", 
        SqrtBox["x"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["x"], "]"}]}]}], "0", "0", 
      RowBox[{
       FractionBox["2", "3"], " ", 
       SqrtBox["x"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["x"], "]"}]}]},
     {"0", 
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "-", "x"}]], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox[
          RowBox[{"1", "-", "x"}]], "]"}]}], "-", 
       RowBox[{
        FractionBox["1", "3"], " ", 
        SqrtBox["x"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["x"], "]"}]}]}], "0", "0"},
     {"0", "0", 
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "-", "x"}]], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox[
          RowBox[{"1", "-", "x"}]], "]"}]}], "-", 
       RowBox[{
        FractionBox["1", "3"], " ", 
        SqrtBox["x"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["x"], "]"}]}]}], "0"},
     {
      RowBox[{
       FractionBox["2", "3"], " ", 
       SqrtBox["x"], " ", 
       RowBox[{"Conjugate", "[", 
        SqrtBox["x"], "]"}]}], "0", "0", 
      RowBox[{
       RowBox[{
        SqrtBox[
         RowBox[{"1", "-", "x"}]], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox[
          RowBox[{"1", "-", "x"}]], "]"}]}], "+", 
       RowBox[{
        FractionBox["1", "3"], " ", 
        SqrtBox["x"], " ", 
        RowBox[{"Conjugate", "[", 
         SqrtBox["x"], "]"}]}]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.876823571812356*^9, 3.8768235763756113`*^9}, 
   3.8768237973345623`*^9, 3.876824095860241*^9, 3.876826921764716*^9, 
   3.876827322927294*^9, 3.8768281235679398`*^9, 3.876832918762405*^9, 
   3.876841233864521*^9, 3.876841325566525*^9},
 CellLabel->
  "Out[70]//MatrixForm=",ExpressionUUID->"e71b954a-4d68-4a03-a4a7-\
78c3cae96838"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DrawCircuit", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876828689478299*^9, 
  3.876828690875711*^9}},ExpressionUUID->"b627e257-6096-4a2c-b94c-\
290d5a949e52"],

Cell[TextData[{
 StyleBox["DrawCircuit",
  FontWeight->"Bold"],
 " will now render global phase gates (",
 StyleBox["G",
  FontWeight->"Bold"],
 ") and the identity suboperators of Pauli gadgets ",
 StyleBox["R",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"0b551480-13ff-4602-a40c-90b3e21e8b42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DrawCircuit", " ", "@", " ", 
  RowBox[{"Circuit", "[", 
   RowBox[{
    RowBox[{"G", "[", "\[Theta]", "]"}], " ", 
    RowBox[{"R", "[", 
     RowBox[{"\[Pi]", ",", " ", 
      RowBox[{
       SubscriptBox["X", "0"], 
       SubscriptBox["Id", "1"], 
       SubscriptBox["Z", "2"]}]}], "]"}]}], "  ", "]"}]}]], "Input",
 CellChangeTimes->{{3.876828694021541*^9, 3.876828720488432*^9}, {
  3.876834543281493*^9, 3.876834543959063*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"dac96892-d376-4b22-837e-4aafa3d95768"],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[GrayLevel[0]], FaceForm[GrayLevel[
   1]], {{LineBox[{{0, 0.5}, {1, 0.5}}], LineBox[{{0, 1.5}, {1, 1.5}}], 
     LineBox[{{0, 2.5}, {1, 2.5}}]}, {LineBox[{{1, 0.5}, {2, 0.5}}], 
     LineBox[{{1, 1.5}, {2, 1.5}}], LineBox[{{1, 2.5}, {2, 2.5}}]}}, {{
     RectangleBox[{0.1, 0.1}, {0.9, 2.9}], InsetBox[
      SuperscriptBox["\<\"e\"\>", "\<\"i\[Theta]\"\>"], {0.5, 1.5}]}, {
     LineBox[{{1.5, 0.5}, {1.5, 2.5}}], {RectangleBox[{1.1, 1.1}, {1.9, 1.9}],
       InsetBox["\<\"\[DoubleStruckOne]\"\>", {1.5, 1.5}]}, {
      RectangleBox[{1.1, 0.1}, {1.9, 0.9}], 
      InsetBox["\<\"Rx\"\>", {1.5, 0.5}]}, {
      RectangleBox[{1.1, 2.1}, {1.9, 2.9}], 
      InsetBox["\<\"Rz\"\>", {1.5, 2.5}]}}}},
  ImageSize->90,
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{{3.876828714321658*^9, 3.876828720900682*^9}, 
   3.87683291877281*^9, 3.8768345444309683`*^9, 3.876841233896695*^9, 
   3.87684132559783*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"34c10ba4-4387-4161-bdad-38482a2e9bf9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["UNonNorm and Matr", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.87682274326497*^9, 3.876822745180613*^9}, {3.876823513803295*^9, 
  3.8768235488984547`*^9}, {3.876828689478299*^9, 3.876828690875711*^9}, {
  3.876837195229863*^9, 
  3.876837205628521*^9}},ExpressionUUID->"905e4ca3-d739-474f-95d3-\
15b47eac7ec8"],

Cell[TextData[{
 "Previously, ",
 StyleBox["Matr",
  FontWeight->"Bold"],
 " was a normalisation-relaxed form of the restrictedly-unitary operator ",
 StyleBox["U",
  FontWeight->"Bold"],
 ". Now, ",
 StyleBox["UNonNorm",
  FontWeight->"Bold"],
 " fills that role while ",
 StyleBox["Matr",
  FontWeight->"Bold"],
 " is never assumed nor treated as a unitary. This means that when applied to \
density-matrices, ",
 StyleBox["Matr",
  FontWeight->"Bold"],
 " will only ever left-multiply (never being conjugated and right-multiplied \
like ",
 StyleBox["UNonNorm",
  FontWeight->"Bold"],
 "). "
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837208418459*^9, 
   3.876837301460814*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"e33c8489-226c-4924-a935-5cc4373303a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "Matr"}], "\[IndentingNewLine]", 
 RowBox[{"?", "UNonNorm"}]}], "Input",
 CellChangeTimes->{{3.876837197548259*^9, 3.87683719814602*^9}, {
  3.87683730631612*^9, 3.8768373085524607`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"f5d805cb-c605-470d-aeba-0b2f6a43c194"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix. Unlike UNonNorm, the given matrix is not internally \
assumed unitary. It is hence only left-multiplied onto density matrices.\"\>",
              "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`Matr\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Matr[matrix] is an arbitrary operator with any \
number of target qubits, specified as a completely general (even non-unitary) \
square complex matrix. Unlike UNonNorm, the given matrix is not internally \
assumed unitary. It is hence only left-multiplied onto density matrices.\"\>",
              "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "Matr[matrix] is an arbitrary operator with any number of target qubits, \
specified as a completely general (even non-unitary) square complex matrix. \
Unlike UNonNorm, the given matrix is not internally assumed unitary. It is \
hence only left-multiplied onto density matrices.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "QuEST`Gate`Matr"|>, False]]], "Output",
 CellChangeTimes->{3.876837198464856*^9, 3.876837309017049*^9, 
  3.876841233973892*^9, 3.8768413256772003`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"2c0b2b42-01ab-4b95-a9c1-0e47f514514c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"UNonNorm[matr] is treated like a general unitary \
gate U, but with relaxed normalisation conditions on the matrix. This is \
distinct to gate Matr, which will be internally assumed non-unitary.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"QuEST`Gate`UNonNorm\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"UNonNorm[matr] is treated like a general unitary \
gate U, but with relaxed normalisation conditions on the matrix. This is \
distinct to gate Matr, which will be internally assumed non-unitary.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "UNonNorm[matr] is treated like a general unitary gate U, but with \
relaxed normalisation conditions on the matrix. This is distinct to gate \
Matr, which will be internally assumed non-unitary.", "Documentation" -> None,
     "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "QuEST`Gate`UNonNorm"|>, False]]], "Output",
 CellChangeTimes->{3.876837198464856*^9, 3.876837309017049*^9, 
  3.876841233973892*^9, 3.8768413257423267`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"fe14294d-a766-409c-b167-98073f11bd35"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["CalcQuregDerivs -> ApplyCircuitDerivs", "Subsection",
 CellChangeTimes->{{3.8768176401621933`*^9, 3.87681766087532*^9}, {
  3.876838111441761*^9, 
  3.876838113477993*^9}},ExpressionUUID->"60ab38c2-3fe4-421c-a047-\
ab5d63c79bc7"],

Cell[TextData[{
 StyleBox["CalcQuregDerivs",
  FontWeight->"Bold"],
 " has been renamed to ",
 StyleBox["ApplyCircuitDerivs",
  FontWeight->"Bold"],
 ", along with its significant extensions as per above. Note too that the \
order of the arguments changed."
}], "Text",
 CellChangeTimes->{{3.876829003609867*^9, 3.876829039932304*^9}, 
   3.876834464599329*^9, {3.876834510101791*^9, 3.876834540053239*^9}, {
   3.876834570306609*^9, 3.876834570447513*^9}, {3.876837099092321*^9, 
   3.876837177235832*^9}, {3.876837388482683*^9, 3.8768374346595716`*^9}, {
   3.876837625053575*^9, 3.8768376394449587`*^9}, {3.876838122661193*^9, 
   3.876838155483184*^9}},
 Background->RGBColor[
  0.88, 1, 0.88],ExpressionUUID->"e3bfd708-e0d4-4afe-9794-52f590239544"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CalcQuregDerivs"}]], "Input",
 CellChangeTimes->{{3.876838158132341*^9, 3.8768381599031267`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"f5b444bb-46eb-4140-aa18-42d21d0be444"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
ApplyCircuitDerivs.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"CalcQuregDerivs", "[", 
                    
                    RowBox[{
                    "QuEST`Private`circuit_", ",", "QuEST`Private`initQureg_",
                     ",", "QuEST`Private`varVals_", ",", 
                    "QuEST`Private`derivQuregs_", ",", 
                    RowBox[{"QuEST`Private`workQuregs_", ":", 
                    RowBox[{"-", "1"}]}]}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"ApplyCircuitDerivs", "::", "error"}], 
                    "MessageName"], ",", 
                    "\"The function CalcQuregDerivs[] is deprecated, though \
has still been attemptedly performed. In future, please use \
ApplyCircuitDerivs[], or temporarily hide this message using Quiet[].\""}], 
                    "]"}], ";", 
                    RowBox[{"ApplyCircuitDerivs", "[", 
                    
                    RowBox[{"QuEST`Private`initQureg", ",", 
                    "QuEST`Private`circuit", ",", "QuEST`Private`varVals", 
                    ",", "QuEST`Private`derivQuregs", ",", 
                    "QuEST`Private`workQuregs"}], "]"}]}], ")"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"QuEST`Deprecated`CalcQuregDerivs\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"This function is deprecated. Please instead use \
ApplyCircuitDerivs.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "This function is deprecated. Please instead use ApplyCircuitDerivs.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, QuEST`Deprecated`CalcQuregDerivs, {
      QuEST`Deprecated`CalcQuregDerivs[
         Pattern[QuEST`Private`circuit, 
          Blank[]], 
         Pattern[QuEST`Private`initQureg, 
          Blank[]], 
         Pattern[QuEST`Private`varVals, 
          Blank[]], 
         Pattern[QuEST`Private`derivQuregs, 
          Blank[]], 
         Optional[
          Pattern[QuEST`Private`workQuregs, 
           Blank[]], -1]] :> (Message[
          MessageName[QuEST`ApplyCircuitDerivs, "error"], 
          "The function CalcQuregDerivs[] is deprecated, though has still \
been attemptedly performed. In future, please use ApplyCircuitDerivs[], or \
temporarily hide this message using Quiet[]."]; 
        QuEST`ApplyCircuitDerivs[
         QuEST`Private`initQureg, QuEST`Private`circuit, 
          QuEST`Private`varVals, QuEST`Private`derivQuregs, 
          QuEST`Private`workQuregs])}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "QuEST`Deprecated`CalcQuregDerivs"|>, 
   False]]], "Output",
 CellChangeTimes->{3.876838160200863*^9, 3.876841234114654*^9, 
  3.876841325821385*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"57135e1f-6102-461f-87e0-94448bc933c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1079, 1395},
WindowMargins->{{-1550, Automatic}, {851, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"13.0 for Mac OS X x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"85470500-53b0-4c28-b9c4-841f0a11e85b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 98, "Title",ExpressionUUID->"bf919c1e-dd86-4e2c-867d-af2c9fdb1495"],
Cell[CellGroupData[{
Cell[765, 29, 150, 3, 69, "Chapter",ExpressionUUID->"c6101b35-fb3a-45d5-bc21-70742ad7e437"],
Cell[918, 34, 323, 8, 72, "Code",ExpressionUUID->"2a74ce87-dc1e-4b54-9df0-8db2187430e8"],
Cell[1244, 44, 1026, 18, 143, "Text",ExpressionUUID->"9d879705-0543-4df2-afab-7c8010c6396a"],
Cell[CellGroupData[{
Cell[2295, 66, 157, 3, 67, "Section",ExpressionUUID->"389dc032-c1e0-415c-8e3e-534c589fe473"],
Cell[CellGroupData[{
Cell[2477, 73, 360, 6, 54, "Subsection",ExpressionUUID->"ed58bc22-3245-4c01-936b-a338b52ecfc1"],
Cell[2840, 81, 296, 8, 51, "Text",ExpressionUUID->"275055e6-3043-4c0c-818d-dae8f1036a19"],
Cell[CellGroupData[{
Cell[3161, 93, 202, 3, 30, "Input",ExpressionUUID->"2825aa5e-7e77-439f-b34d-22624da69f84"],
Cell[3366, 98, 34263, 766, 287, "Output",ExpressionUUID->"73912207-4d01-45a1-a855-6ed4bdd6a7ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37666, 869, 433, 8, 30, "Input",ExpressionUUID->"fc92759a-2db9-4e6c-9689-38456501aa75"],
Cell[38102, 879, 4885, 89, 144, "Output",ExpressionUUID->"e98772cf-ef01-46b2-a33f-9ce9a1fd7b53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43024, 973, 354, 7, 30, "Input",ExpressionUUID->"e892a004-0b3d-4c26-8511-0a5839df3289"],
Cell[43381, 982, 5553, 105, 142, "Output",ExpressionUUID->"bac7676a-7c44-43f1-a60f-d6f3c9d394f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48971, 1092, 345, 7, 30, "Input",ExpressionUUID->"049b88c9-d8e1-4f0f-b1a1-eebd21eddd46"],
Cell[49319, 1101, 8424, 155, 139, "Output",ExpressionUUID->"2a540e69-e0a1-463f-8ff9-f3cd2eb1ea37"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[57792, 1262, 167, 3, 54, "Subsection",ExpressionUUID->"9c01af04-2d90-4e6c-8e46-ef35e7159d68"],
Cell[57962, 1267, 538, 17, 51, "Text",ExpressionUUID->"29c63fd3-b3e1-45f9-bdab-563dab605fa9"],
Cell[CellGroupData[{
Cell[58525, 1288, 205, 3, 30, "Input",ExpressionUUID->"44638323-3dc8-46d1-aeaa-d263e9ce77c8"],
Cell[58733, 1293, 18905, 408, 287, "Output",ExpressionUUID->"3ea2a546-0684-479e-8657-c679e22dcd82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77675, 1706, 1600, 42, 139, "Input",ExpressionUUID->"13bf938b-d634-44a1-ae07-4908291734f0"],
Cell[79278, 1750, 1887, 33, 123, "Output",ExpressionUUID->"dd9bc34e-a4ca-41cf-b600-8009c568658d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81202, 1788, 683, 17, 52, "Input",ExpressionUUID->"80e62cd7-f828-42cf-aef6-761cd1db250d"],
Cell[81888, 1807, 3065, 65, 151, "Output",ExpressionUUID->"907603f0-27be-4eb9-869e-29d2dbff78a1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[85002, 1878, 224, 4, 54, "Subsection",ExpressionUUID->"6def6dd7-68d8-4439-afb9-d11bd97977f5"],
Cell[85229, 1884, 3330, 85, 339, "Text",ExpressionUUID->"f2d3164f-ba4f-4e74-a3a3-e9b9c810982a"],
Cell[CellGroupData[{
Cell[88584, 1973, 216, 3, 30, "Input",ExpressionUUID->"4b0310dc-71c7-4160-bb92-1b1ef8f7d97f"],
Cell[88803, 1978, 22982, 497, 311, "Output",ExpressionUUID->"ff7b36cb-699b-4eab-9aeb-f4680fa444ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111822, 2480, 210, 3, 30, "Input",ExpressionUUID->"23620abd-f015-49d0-ab93-f29cf0ee8bdc"],
Cell[112035, 2485, 1646, 30, 123, "Output",ExpressionUUID->"54e9b458-7203-4a1a-b52d-a5ed5a6b0399"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113718, 2520, 2234, 50, 73, "Input",ExpressionUUID->"a169320d-e15f-46b9-81f9-5690403c256c"],
Cell[115955, 2572, 1530, 24, 34, "Output",ExpressionUUID->"1618dd06-713e-4ebf-a0be-24e6841d187b"]
}, Open  ]],
Cell[117500, 2599, 397, 6, 51, "Text",ExpressionUUID->"59a05318-bb10-4107-a641-1ff49f9efa45"],
Cell[CellGroupData[{
Cell[117922, 2609, 1118, 28, 77, "Input",ExpressionUUID->"14705ea6-b92a-46ad-b33c-3314c09b7193"],
Cell[119043, 2639, 517, 8, 34, "Output",ExpressionUUID->"eb115112-3c73-4ef9-b6dc-dd2a1f1c94e7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[119609, 2653, 213, 4, 54, "Subsection",ExpressionUUID->"52607d2e-8ba3-433b-b3a3-3f928fca8066"],
Cell[119825, 2659, 5633, 155, 309, "Text",ExpressionUUID->"cfa5de06-5bb2-4357-87fe-ff3b014be22c"],
Cell[CellGroupData[{
Cell[125483, 2818, 206, 3, 30, "Input",ExpressionUUID->"52e323c8-d2fa-4cdc-9459-eb4f2f2e6e76"],
Cell[125692, 2823, 20157, 429, 359, "Output",ExpressionUUID->"4e49a96e-dca4-45f4-8d8f-bd0d6cf81576"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145886, 3257, 239, 3, 52, "Input",ExpressionUUID->"b4213d90-ff4e-430d-a2b0-cf472216558a"],
Cell[146128, 3262, 1107, 31, 48, "Output",ExpressionUUID->"0773103f-9b46-410e-a1fc-38c2dda243aa"],
Cell[147238, 3295, 1701, 31, 123, "Output",ExpressionUUID->"b0308a01-4ca7-4a19-8413-2d1ed654f286"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148976, 3331, 700, 15, 30, "Input",ExpressionUUID->"bdc58f52-b1dc-4061-9539-3ce55cadc276"],
Cell[149679, 3348, 1234, 30, 65, "Output",ExpressionUUID->"0601a102-8cf4-42cc-8fa8-0be0df0e220d"]
}, Open  ]],
Cell[150928, 3381, 526, 9, 74, "Text",ExpressionUUID->"b69fb4ea-4c74-4872-83f0-2fbd02a30cf5"],
Cell[CellGroupData[{
Cell[151479, 3394, 1570, 38, 97, "Input",ExpressionUUID->"f4e097c1-7186-481c-91e3-e9ff261de26b"],
Cell[153052, 3434, 8020, 149, 107, "Output",ExpressionUUID->"04e160f0-e43a-475c-81b6-1247237eed9b"]
}, Open  ]],
Cell[161087, 3586, 532, 12, 52, "Input",ExpressionUUID->"31fdbf0d-e01e-43ee-ab41-e1f7357a7dd3"],
Cell[161622, 3600, 502, 12, 51, "Text",ExpressionUUID->"5636bc47-185e-44d9-9aea-de6bdf094418"],
Cell[162127, 3614, 2890, 70, 352, "Input",ExpressionUUID->"eaec4548-b14e-4e78-b2d3-df6886618eae"],
Cell[165020, 3686, 356, 5, 51, "Text",ExpressionUUID->"0faeb42a-a76a-4caa-a5bb-e14a616d051e"],
Cell[CellGroupData[{
Cell[165401, 3695, 1241, 31, 178, "Input",ExpressionUUID->"c4260f19-d560-4070-b7de-8951f6f8f316"],
Cell[166645, 3728, 3686, 85, 223, "Output",ExpressionUUID->"a48d1d41-0dd4-44e9-8a56-d86077f981ac"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[170380, 3819, 212, 4, 54, "Subsection",ExpressionUUID->"4afae7f6-d453-4639-a52b-6b8625944f6c"],
Cell[170595, 3825, 269, 6, 51, "Text",ExpressionUUID->"6c6dc5c2-a694-4a34-b2aa-ce3527348f08"],
Cell[CellGroupData[{
Cell[170889, 3835, 239, 4, 30, "Input",ExpressionUUID->"1a6a98cf-fd0c-4b10-9a59-8479a5caeb86"],
Cell[171131, 3841, 632, 13, 28, "Message",ExpressionUUID->"60d2ab70-0002-43de-bd81-bb362f062c8b"],
Cell[171766, 3856, 228, 3, 34, "Output",ExpressionUUID->"adb4337b-8544-4806-aeb4-bfc966c7a0fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172031, 3864, 338, 7, 30, "Input",ExpressionUUID->"947f57e7-6a88-4a1b-b15d-0e113800f8ef"],
Cell[172372, 3873, 691, 14, 28, "Message",ExpressionUUID->"72f9777b-fd0e-421f-8fd2-4d5d2359ddf3"],
Cell[173066, 3889, 226, 3, 34, "Output",ExpressionUUID->"a6358ddb-b1c2-451d-b35e-0e166b839987"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173329, 3897, 435, 11, 45, "Input",ExpressionUUID->"d6705ebb-dda9-4a2a-af10-e4533a603e36"],
Cell[173767, 3910, 1265, 22, 36, "Message",ExpressionUUID->"b87bb788-1c72-4838-aeb8-52ee3b52c94f"],
Cell[175035, 3934, 249, 3, 34, "Output",ExpressionUUID->"d0b2ddf2-4e34-446b-a015-a7e4b7b2af63"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[175333, 3943, 263, 4, 54, "Subsection",ExpressionUUID->"31ee56bd-ecb2-43fb-836b-2bbc8ccd40a5"],
Cell[CellGroupData[{
Cell[175621, 3951, 207, 3, 30, "Input",ExpressionUUID->"db7ffd60-d046-4e04-87b3-40a3724aef87"],
Cell[175831, 3956, 21149, 484, 215, "Output",ExpressionUUID->"bb6204b3-1dc0-46af-8425-00171c04dff9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197017, 4445, 249, 4, 30, "Input",ExpressionUUID->"4aacb01a-d13b-4694-bf5b-11af2481b58e"],
Cell[197269, 4451, 1506, 38, 56, "Output",ExpressionUUID->"e0ee97e2-582b-43f5-8676-5e8d63e8e22e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198812, 4494, 336, 7, 33, "Input",ExpressionUUID->"8c964495-da8d-4b2e-8111-60f10c552b2a"],
Cell[199151, 4503, 723, 13, 28, "Message",ExpressionUUID->"27c40034-8fe5-4a92-9d45-bdd6912392bb"],
Cell[199877, 4518, 1908, 48, 56, "Output",ExpressionUUID->"bef8bb5d-e498-4417-bfcb-728257cfab10"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[201834, 4572, 269, 4, 54, "Subsection",ExpressionUUID->"e8e52950-7178-4bf0-a8b6-5d3cbe5c177d"],
Cell[CellGroupData[{
Cell[202128, 4580, 212, 3, 30, "Input",ExpressionUUID->"5628d739-af43-46b5-93a8-5dddb407d664"],
Cell[202343, 4585, 13423, 318, 119, "Output",ExpressionUUID->"869bf5eb-949a-4089-94e6-8a9a71fc18cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215803, 4908, 307, 5, 30, "Input",ExpressionUUID->"4e618f15-8cd7-401a-9d42-2e7536dc171e"],
Cell[216113, 4915, 426, 6, 34, "Output",ExpressionUUID->"c6ac4d12-743b-4384-9dc1-eadaf308ac62"]
}, Open  ]],
Cell[216554, 4924, 508, 10, 74, "Text",ExpressionUUID->"e6d0e103-cbf8-431e-b52f-bc7fc9b1fd23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217099, 4939, 317, 5, 54, "Subsection",ExpressionUUID->"0b655695-5fc7-4178-a71f-ac21425fac02"],
Cell[CellGroupData[{
Cell[217441, 4948, 211, 3, 30, "Input",ExpressionUUID->"01bcb90b-cfcf-4ff5-b8c5-b0816abc7c3d"],
Cell[217655, 4953, 12023, 286, 143, "Output",ExpressionUUID->"5706ce0e-e4d1-48d3-be5f-50aa6bbcd2bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229715, 5244, 435, 9, 52, "Input",ExpressionUUID->"1e0b0648-1725-41bc-841c-e54961aa87a3"],
Cell[230153, 5255, 650, 16, 34, "Output",ExpressionUUID->"7344acbd-dccd-4f94-a575-c81da76ea41f"],
Cell[230806, 5273, 3446, 74, 151, "Output",ExpressionUUID->"3741640a-007e-474c-a80a-8d11144283b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234289, 5352, 563, 14, 94, "Input",ExpressionUUID->"be3cee95-9571-4ab5-a227-be57b35af866"],
Cell[234855, 5368, 2469, 56, 151, "Output",ExpressionUUID->"80216f9c-3862-4baa-b938-501412c9d6ba"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[237373, 5430, 368, 6, 54, "Subsection",ExpressionUUID->"e39772de-f934-4146-8eaf-6f318d37109c"],
Cell[237744, 5438, 617, 15, 51, "Text",ExpressionUUID->"779bcef3-a151-4ff6-948e-d8cff03fc336"],
Cell[CellGroupData[{
Cell[238386, 5457, 209, 3, 30, "Input",ExpressionUUID->"b05d7217-b4bf-406a-9e99-a5e27a52579d"],
Cell[238598, 5462, 14904, 347, 167, "Output",ExpressionUUID->"983b9427-a421-42a7-a5b3-3f9e6ee0bdd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253539, 5814, 944, 24, 94, "Input",ExpressionUUID->"ceb4bb9c-1cba-4dae-9e65-3d5694d08f5a"],
Cell[254486, 5840, 448, 10, 28, "Message",ExpressionUUID->"70e7ca41-7359-4ccd-932e-d21bbec57745"],
Cell[254937, 5852, 1420, 44, 105, "Output",ExpressionUUID->"5eb85acf-6f03-46c1-b6d7-9a5245480ae7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[256406, 5902, 356, 6, 54, "Subsection",ExpressionUUID->"ff8a01bb-eebb-4347-b445-1fc99ece1d7c"],
Cell[CellGroupData[{
Cell[256787, 5912, 189, 3, 30, "Input",ExpressionUUID->"82053fff-d6bb-45ad-9f59-fe2bfc4f1a3d"],
Cell[256979, 5917, 8841, 216, 119, "Output",ExpressionUUID->"e52aeb49-f9c5-489e-8c95-09e26e584ff3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265857, 6138, 196, 3, 30, "Input",ExpressionUUID->"fe2e4356-fbc3-4c42-9dca-c9618465f9b0"],
Cell[266056, 6143, 9176, 225, 119, "Output",ExpressionUUID->"dfffb075-59bf-4310-850a-6b536cade138"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275269, 6373, 193, 3, 30, "Input",ExpressionUUID->"13c42c79-ebc8-410c-aa5b-93524b104211"],
Cell[275465, 6378, 9406, 227, 119, "Output",ExpressionUUID->"59aed604-03dd-4ec0-842e-cdadf3241274"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[284932, 6612, 201, 4, 67, "Section",ExpressionUUID->"2da8172a-9237-4a9c-bd02-23446282a59f"],
Cell[CellGroupData[{
Cell[285158, 6620, 320, 5, 54, "Subsection",ExpressionUUID->"6b08a688-a9c6-4830-a211-7743687ced8b"],
Cell[285481, 6627, 693, 17, 74, "Text",ExpressionUUID->"2a2f846b-109d-44aa-a014-7c527a1cf7c0"],
Cell[CellGroupData[{
Cell[286199, 6648, 211, 3, 30, "Input",ExpressionUUID->"0238c22a-82a2-4182-9b4a-49e673958153"],
Cell[286413, 6653, 12007, 287, 143, "Output",ExpressionUUID->"38f49b58-1299-445b-8cca-6df6b99a9c02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298457, 6945, 729, 18, 94, "Input",ExpressionUUID->"6858d687-d7dd-43ad-983d-cad11615f2de"],
Cell[299189, 6965, 409, 7, 34, "Output",ExpressionUUID->"01d5a0ae-e612-4a8d-83a1-954bf5ab1a9a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[299647, 6978, 408, 6, 54, "Subsection",ExpressionUUID->"c540a8e0-ca2e-4d40-a0c4-9b76e68cde2d"],
Cell[300058, 6986, 725, 16, 51, "Text",ExpressionUUID->"85236c7b-674a-4264-957e-133aca764a55"],
Cell[CellGroupData[{
Cell[300808, 7006, 210, 3, 30, "Input",ExpressionUUID->"2243fe87-d300-4ecc-8272-f5c537bd0563"],
Cell[301021, 7011, 11626, 283, 95, "Output",ExpressionUUID->"07e989c6-9245-4478-91d5-5212d11b7b78"]
}, Open  ]],
Cell[312662, 7297, 583, 10, 51, "Text",ExpressionUUID->"6d6cd907-683f-4c57-8497-01beccda88c6"],
Cell[CellGroupData[{
Cell[313270, 7311, 358, 7, 52, "Input",ExpressionUUID->"c58c5b11-4fde-4a4e-a7df-dda31f76bfe4"],
Cell[313631, 7320, 578, 12, 46, "Message",ExpressionUUID->"f1e37333-f67c-4d99-885f-9e6d72698457"],
Cell[314212, 7334, 244, 3, 34, "Output",ExpressionUUID->"350e8e71-9e39-4b00-9cd0-7a0d7c215d49"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[314505, 7343, 368, 6, 54, "Subsection",ExpressionUUID->"49e7677e-d793-44f6-8bca-2fdc02b67d15"],
Cell[314876, 7351, 628, 15, 51, "Text",ExpressionUUID->"44293c53-dc30-422a-9bd8-2138dc69b615"],
Cell[CellGroupData[{
Cell[315529, 7370, 204, 3, 30, "Input",ExpressionUUID->"e37636ce-6d7c-4e55-a498-aa83fc1111c0"],
Cell[315736, 7375, 10802, 269, 95, "Output",ExpressionUUID->"f079931e-221d-44e6-8804-5e4940a7d1ea"]
}, Open  ]],
Cell[326553, 7647, 583, 10, 51, "Text",ExpressionUUID->"7d577674-b9df-4913-9245-f356308d49ec"],
Cell[CellGroupData[{
Cell[327161, 7661, 303, 6, 30, "Input",ExpressionUUID->"1e73d4c3-5a81-4769-9ccd-96a75b5a682e"],
Cell[327467, 7669, 583, 12, 28, "Message",ExpressionUUID->"b71a078a-582d-4a61-af88-2f0123c4af67"],
Cell[328053, 7683, 262, 4, 34, "Output",ExpressionUUID->"261ffb98-28c6-497b-83b2-81bdd4376d33"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[328364, 7693, 418, 6, 54, "Subsection",ExpressionUUID->"a948c262-3d70-41b7-a53e-8d7fa9d152e2"],
Cell[328785, 7701, 787, 16, 51, "Text",ExpressionUUID->"7f2c8591-e6b1-4977-ac75-03c5d228ba0a"],
Cell[CellGroupData[{
Cell[329597, 7721, 303, 5, 30, "Input",ExpressionUUID->"ac037597-dc89-429c-98f7-9d2c4b7c5a23"],
Cell[329903, 7728, 45101, 784, 61, "Output",ExpressionUUID->"b657cc05-8842-41b2-9f83-cdbe7ab161ed"]
}, Open  ]],
Cell[375019, 8515, 724, 13, 51, "Text",ExpressionUUID->"2611baa9-52e9-4329-8824-e3d3bc0ce4b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375780, 8533, 264, 4, 54, "Subsection",ExpressionUUID->"8c2ab6ce-e26c-4dd3-af93-b4443cd5fe08"],
Cell[376047, 8539, 764, 17, 97, "Text",ExpressionUUID->"527da8cc-5697-4a4d-b22b-c70788d840bd"],
Cell[CellGroupData[{
Cell[376836, 8560, 207, 3, 30, "Input",ExpressionUUID->"2559a893-bb2d-4714-8096-d32022b67785"],
Cell[377046, 8565, 9198, 222, 119, "Output",ExpressionUUID->"7851d91c-63a1-4fb2-9a71-d97e7f46de87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[386281, 8792, 318, 7, 32, "Input",ExpressionUUID->"b1cb7fbf-cc5b-4c56-8764-164fdd780559"],
Cell[386602, 8801, 1346, 40, 115, "Output",ExpressionUUID->"490d67ef-707f-442c-a3c4-32d9ded12b39"]
}, Open  ]],
Cell[CellGroupData[{
Cell[387985, 8846, 397, 9, 32, "Input",ExpressionUUID->"9c9faf5e-175b-4cc9-b57f-dff60f6583c0"],
Cell[388385, 8857, 2546, 82, 119, "Output",ExpressionUUID->"e71b954a-4d68-4a03-a4a7-78c3cae96838"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[390980, 8945, 305, 5, 54, "Subsection",ExpressionUUID->"b627e257-6096-4a2c-b94c-290d5a949e52"],
Cell[391288, 8952, 530, 14, 51, "Text",ExpressionUUID->"0b551480-13ff-4602-a40c-90b3e21e8b42"],
Cell[CellGroupData[{
Cell[391843, 8970, 538, 13, 30, "Input",ExpressionUUID->"dac96892-d376-4b22-837e-4aafa3d95768"],
Cell[392384, 8985, 1032, 19, 142, "Output",ExpressionUUID->"34c10ba4-4387-4161-bdad-38482a2e9bf9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[393465, 9010, 360, 6, 54, "Subsection",ExpressionUUID->"905e4ca3-d739-474f-95d3-15b47eac7ec8"],
Cell[393828, 9018, 940, 28, 97, "Text",ExpressionUUID->"e33c8489-226c-4924-a935-5cc4373303a7"],
Cell[CellGroupData[{
Cell[394793, 9050, 295, 5, 52, "Input",ExpressionUUID->"f5d805cb-c605-470d-aeba-0b2f6a43c194"],
Cell[395091, 9057, 9406, 227, 119, "Output",ExpressionUUID->"2c0b2b42-01ab-4b95-a9c1-0e47f514514c"],
Cell[404500, 9286, 9177, 225, 119, "Output",ExpressionUUID->"fe14294d-a766-409c-b167-98073f11bd35"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[413726, 9517, 235, 4, 54, "Subsection",ExpressionUUID->"60ab38c2-3fe4-421c-a047-ab5d63c79bc7"],
Cell[413964, 9523, 753, 16, 74, "Text",ExpressionUUID->"e3bfd708-e0d4-4afe-9794-52f590239544"],
Cell[CellGroupData[{
Cell[414742, 9543, 205, 3, 30, "Input",ExpressionUUID->"f5b444bb-46eb-4140-aa18-42d21d0be444"],
Cell[414950, 9548, 11737, 288, 95, "Output",ExpressionUUID->"57135e1f-6102-461f-87e0-94448bc933c7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

